
CUFR_LT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009414  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080095b4  080095b4  0000a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  0000b0a8  2**0
                  CONTENTS
  4 .ARM          00000008  080099e8  080099e8  0000a9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f0  080099f0  0000b0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  0000a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099f4  080099f4  0000a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  080099f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0a8  2**0
                  CONTENTS
 10 .bss          000004b4  200000a8  200000a8  0000b0a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000055c  2000055c  0000b0a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ae0  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282b  00000000  00000000  0001bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0001e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a52  00000000  00000000  0001f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ddb  00000000  00000000  0001fba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f45  00000000  00000000  0004197d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a6e  00000000  00000000  000558c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c330  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bd4  00000000  00000000  0011c374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0011ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800959c 	.word	0x0800959c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	0800959c 	.word	0x0800959c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
void configure_sd(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	@ (80002d4 <myprintf+0x44>)
 80002a8:	f008 fcea 	bl	8008c80 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	@ (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	@ (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	@ (80002d8 <myprintf+0x48>)
 80002c2:	f004 fed5 	bl	8005070 <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	200002cc 	.word	0x200002cc
 80002d8:	200001d8 	.word	0x200001d8

080002dc <acdm55>:

int acdm55(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80002e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002e6:	2201      	movs	r2, #1
 80002e8:	4976      	ldr	r1, [pc, #472]	@ (80004c4 <acdm55+0x1e8>)
 80002ea:	4877      	ldr	r0, [pc, #476]	@ (80004c8 <acdm55+0x1ec>)
 80002ec:	f003 ffe7 	bl	80042be <HAL_SPI_Transmit>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b75      	ldr	r3, [pc, #468]	@ (80004cc <acdm55+0x1f0>)
 80002f6:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80002f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002fc:	2201      	movs	r2, #1
 80002fe:	4971      	ldr	r1, [pc, #452]	@ (80004c4 <acdm55+0x1e8>)
 8000300:	4871      	ldr	r0, [pc, #452]	@ (80004c8 <acdm55+0x1ec>)
 8000302:	f003 ffdc 	bl	80042be <HAL_SPI_Transmit>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	4b70      	ldr	r3, [pc, #448]	@ (80004cc <acdm55+0x1f0>)
 800030c:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD55, 6, 1000); //Sending in Blocking mode
 800030e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000312:	2206      	movs	r2, #6
 8000314:	496e      	ldr	r1, [pc, #440]	@ (80004d0 <acdm55+0x1f4>)
 8000316:	486c      	ldr	r0, [pc, #432]	@ (80004c8 <acdm55+0x1ec>)
 8000318:	f003 ffd1 	bl	80042be <HAL_SPI_Transmit>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b6a      	ldr	r3, [pc, #424]	@ (80004cc <acdm55+0x1f0>)
 8000322:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8000324:	200a      	movs	r0, #10
 8000326:	f001 fc73 	bl	8001c10 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, CMD55_Response, 2, 1000);
 800032a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800032e:	2202      	movs	r2, #2
 8000330:	4968      	ldr	r1, [pc, #416]	@ (80004d4 <acdm55+0x1f8>)
 8000332:	4865      	ldr	r0, [pc, #404]	@ (80004c8 <acdm55+0x1ec>)
 8000334:	f004 f938 	bl	80045a8 <HAL_SPI_Receive>
		//HAL_Delay(1000);
		count = 0;
 8000338:	4b67      	ldr	r3, [pc, #412]	@ (80004d8 <acdm55+0x1fc>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		while(count < 20 && CMD55_Response[0] != 0x0 && CMD55_Response[1] != 0x1){
 800033e:	e02d      	b.n	800039c <acdm55+0xc0>
				count++;
 8000340:	4b65      	ldr	r3, [pc, #404]	@ (80004d8 <acdm55+0x1fc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	4a64      	ldr	r2, [pc, #400]	@ (80004d8 <acdm55+0x1fc>)
 8000348:	6013      	str	r3, [r2, #0]
				for(int i = 0; i<2; i++){
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e00a      	b.n	8000366 <acdm55+0x8a>
							  myprintf("(%x)", CMD55_Response[i]);
 8000350:	4a60      	ldr	r2, [pc, #384]	@ (80004d4 <acdm55+0x1f8>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4860      	ldr	r0, [pc, #384]	@ (80004dc <acdm55+0x200>)
 800035c:	f7ff ff98 	bl	8000290 <myprintf>
				for(int i = 0; i<2; i++){
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b01      	cmp	r3, #1
 800036a:	ddf1      	ble.n	8000350 <acdm55+0x74>
						  }
				myprintf("\r\n");
 800036c:	485c      	ldr	r0, [pc, #368]	@ (80004e0 <acdm55+0x204>)
 800036e:	f7ff ff8f 	bl	8000290 <myprintf>
			  ok_notok = HAL_SPI_Transmit(&hspi2, CMD55, 6, 1000); //Sending in Blocking mode
 8000372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000376:	2206      	movs	r2, #6
 8000378:	4955      	ldr	r1, [pc, #340]	@ (80004d0 <acdm55+0x1f4>)
 800037a:	4853      	ldr	r0, [pc, #332]	@ (80004c8 <acdm55+0x1ec>)
 800037c:	f003 ff9f 	bl	80042be <HAL_SPI_Transmit>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b51      	ldr	r3, [pc, #324]	@ (80004cc <acdm55+0x1f0>)
 8000386:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(10);
 8000388:	200a      	movs	r0, #10
 800038a:	f001 fc41 	bl	8001c10 <HAL_Delay>
			  HAL_SPI_Receive(&hspi2, CMD55_Response, 2, 1000);
 800038e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000392:	2202      	movs	r2, #2
 8000394:	494f      	ldr	r1, [pc, #316]	@ (80004d4 <acdm55+0x1f8>)
 8000396:	484c      	ldr	r0, [pc, #304]	@ (80004c8 <acdm55+0x1ec>)
 8000398:	f004 f906 	bl	80045a8 <HAL_SPI_Receive>
		while(count < 20 && CMD55_Response[0] != 0x0 && CMD55_Response[1] != 0x1){
 800039c:	4b4e      	ldr	r3, [pc, #312]	@ (80004d8 <acdm55+0x1fc>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b13      	cmp	r3, #19
 80003a2:	dc07      	bgt.n	80003b4 <acdm55+0xd8>
 80003a4:	4b4b      	ldr	r3, [pc, #300]	@ (80004d4 <acdm55+0x1f8>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <acdm55+0xd8>
 80003ac:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <acdm55+0x1f8>)
 80003ae:	785b      	ldrb	r3, [r3, #1]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d1c5      	bne.n	8000340 <acdm55+0x64>
		}
		if(count == 20){
 80003b4:	4b48      	ldr	r3, [pc, #288]	@ (80004d8 <acdm55+0x1fc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b14      	cmp	r3, #20
 80003ba:	d101      	bne.n	80003c0 <acdm55+0xe4>
			//myprintf("CMD 55 Timeout \r\n");
				return 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	e07d      	b.n	80004bc <acdm55+0x1e0>
			}
		myprintf("CMD55: ");
 80003c0:	4848      	ldr	r0, [pc, #288]	@ (80004e4 <acdm55+0x208>)
 80003c2:	f7ff ff65 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	e00a      	b.n	80003e2 <acdm55+0x106>
				  myprintf("(%x)", CMD55_Response[i]);
 80003cc:	4a41      	ldr	r2, [pc, #260]	@ (80004d4 <acdm55+0x1f8>)
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4841      	ldr	r0, [pc, #260]	@ (80004dc <acdm55+0x200>)
 80003d8:	f7ff ff5a 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3301      	adds	r3, #1
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	ddf1      	ble.n	80003cc <acdm55+0xf0>
			  }
		myprintf("\r\n");
 80003e8:	483d      	ldr	r0, [pc, #244]	@ (80004e0 <acdm55+0x204>)
 80003ea:	f7ff ff51 	bl	8000290 <myprintf>
		ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80003ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003f2:	2201      	movs	r2, #1
 80003f4:	4933      	ldr	r1, [pc, #204]	@ (80004c4 <acdm55+0x1e8>)
 80003f6:	4834      	ldr	r0, [pc, #208]	@ (80004c8 <acdm55+0x1ec>)
 80003f8:	f003 ff61 	bl	80042be <HAL_SPI_Transmit>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b32      	ldr	r3, [pc, #200]	@ (80004cc <acdm55+0x1f0>)
 8000402:	701a      	strb	r2, [r3, #0]
		ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 8000404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000408:	2201      	movs	r2, #1
 800040a:	492e      	ldr	r1, [pc, #184]	@ (80004c4 <acdm55+0x1e8>)
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <acdm55+0x1ec>)
 800040e:	f003 ff56 	bl	80042be <HAL_SPI_Transmit>
 8000412:	4603      	mov	r3, r0
 8000414:	461a      	mov	r2, r3
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <acdm55+0x1f0>)
 8000418:	701a      	strb	r2, [r3, #0]
		//ACMD41
		ok_notok = HAL_SPI_Transmit(&hspi2, ACMD41, 6, 1000); //Sending in Blocking mode
 800041a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800041e:	2206      	movs	r2, #6
 8000420:	4931      	ldr	r1, [pc, #196]	@ (80004e8 <acdm55+0x20c>)
 8000422:	4829      	ldr	r0, [pc, #164]	@ (80004c8 <acdm55+0x1ec>)
 8000424:	f003 ff4b 	bl	80042be <HAL_SPI_Transmit>
 8000428:	4603      	mov	r3, r0
 800042a:	461a      	mov	r2, r3
 800042c:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <acdm55+0x1f0>)
 800042e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	@ 0x64
 8000432:	f001 fbed 	bl	8001c10 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, ACMD41_Response, 2, 1000);
 8000436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043a:	2202      	movs	r2, #2
 800043c:	492b      	ldr	r1, [pc, #172]	@ (80004ec <acdm55+0x210>)
 800043e:	4822      	ldr	r0, [pc, #136]	@ (80004c8 <acdm55+0x1ec>)
 8000440:	f004 f8b2 	bl	80045a8 <HAL_SPI_Receive>
		count = 0;
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <acdm55+0x1fc>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
		if(ACMD41_Response[0] != 0x0 && ACMD41_Response[1] != 0x0)
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <acdm55+0x210>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d01c      	beq.n	800048c <acdm55+0x1b0>
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <acdm55+0x210>)
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d018      	beq.n	800048c <acdm55+0x1b0>
		{
			myprintf("ACMD41 Fail once: ");
 800045a:	4825      	ldr	r0, [pc, #148]	@ (80004f0 <acdm55+0x214>)
 800045c:	f7ff ff18 	bl	8000290 <myprintf>
			for(int i = 0; i<2; i++){
 8000460:	2300      	movs	r3, #0
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	e00a      	b.n	800047c <acdm55+0x1a0>
				myprintf("(%x)", ACMD41_Response[i]);
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <acdm55+0x210>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4413      	add	r3, r2
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	481a      	ldr	r0, [pc, #104]	@ (80004dc <acdm55+0x200>)
 8000472:	f7ff ff0d 	bl	8000290 <myprintf>
			for(int i = 0; i<2; i++){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3301      	adds	r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b01      	cmp	r3, #1
 8000480:	ddf1      	ble.n	8000466 <acdm55+0x18a>
			}
			myprintf("\r\n");
 8000482:	4817      	ldr	r0, [pc, #92]	@ (80004e0 <acdm55+0x204>)
 8000484:	f7ff ff04 	bl	8000290 <myprintf>
			return 0;
 8000488:	2300      	movs	r3, #0
 800048a:	e017      	b.n	80004bc <acdm55+0x1e0>
		}
		myprintf("ACMD41: ");
 800048c:	4819      	ldr	r0, [pc, #100]	@ (80004f4 <acdm55+0x218>)
 800048e:	f7ff feff 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 8000492:	2300      	movs	r3, #0
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	e00a      	b.n	80004ae <acdm55+0x1d2>
				  myprintf("(%x)", ACMD41_Response[i]);
 8000498:	4a14      	ldr	r2, [pc, #80]	@ (80004ec <acdm55+0x210>)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	4413      	add	r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	480e      	ldr	r0, [pc, #56]	@ (80004dc <acdm55+0x200>)
 80004a4:	f7ff fef4 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	ddf1      	ble.n	8000498 <acdm55+0x1bc>
			  }
		myprintf("\r\n");
 80004b4:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <acdm55+0x204>)
 80004b6:	f7ff feeb 	bl	8000290 <myprintf>
		return 1;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000030 	.word	0x20000030
 80004c8:	200000ec 	.word	0x200000ec
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000020 	.word	0x20000020
 80004d4:	2000026c 	.word	0x2000026c
 80004d8:	20000274 	.word	0x20000274
 80004dc:	080095b4 	.word	0x080095b4
 80004e0:	080095bc 	.word	0x080095bc
 80004e4:	080095c0 	.word	0x080095c0
 80004e8:	20000028 	.word	0x20000028
 80004ec:	20000270 	.word	0x20000270
 80004f0:	080095c8 	.word	0x080095c8
 80004f4:	080095dc 	.word	0x080095dc

080004f8 <configure_sd>:

void configure_sd(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	48ac      	ldr	r0, [pc, #688]	@ (80007b4 <configure_sd+0x2bc>)
 8000504:	f002 f96c 	bl	80027e0 <HAL_GPIO_WritePin>
	ok_notok = HAL_SPI_Transmit(&hspi2, high, 10, 1000); //Sending in Blocking mode
 8000508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050c:	220a      	movs	r2, #10
 800050e:	49aa      	ldr	r1, [pc, #680]	@ (80007b8 <configure_sd+0x2c0>)
 8000510:	48aa      	ldr	r0, [pc, #680]	@ (80007bc <configure_sd+0x2c4>)
 8000512:	f003 fed4 	bl	80042be <HAL_SPI_Transmit>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4ba9      	ldr	r3, [pc, #676]	@ (80007c0 <configure_sd+0x2c8>)
 800051c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	48a4      	ldr	r0, [pc, #656]	@ (80007b4 <configure_sd+0x2bc>)
 8000524:	f002 f95c 	bl	80027e0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
	//		  ok_notok = HAL_UART_Transmit(&huart2, (uint8_t *)hw, len, 100);

	//CMD0:
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD0, 6, 1000); //Sending in Blocking mode
 8000528:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052c:	2206      	movs	r2, #6
 800052e:	49a5      	ldr	r1, [pc, #660]	@ (80007c4 <configure_sd+0x2cc>)
 8000530:	48a2      	ldr	r0, [pc, #648]	@ (80007bc <configure_sd+0x2c4>)
 8000532:	f003 fec4 	bl	80042be <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4ba1      	ldr	r3, [pc, #644]	@ (80007c0 <configure_sd+0x2c8>)
 800053c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800053e:	2064      	movs	r0, #100	@ 0x64
 8000540:	f001 fb66 	bl	8001c10 <HAL_Delay>
	HAL_SPI_Receive(&hspi2, CMD0_Response, 2, 1000);
 8000544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000548:	2202      	movs	r2, #2
 800054a:	499f      	ldr	r1, [pc, #636]	@ (80007c8 <configure_sd+0x2d0>)
 800054c:	489b      	ldr	r0, [pc, #620]	@ (80007bc <configure_sd+0x2c4>)
 800054e:	f004 f82b 	bl	80045a8 <HAL_SPI_Receive>
	count = 0;
 8000552:	4b9e      	ldr	r3, [pc, #632]	@ (80007cc <configure_sd+0x2d4>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	while(CMD0_Response[1] != 0x1 && count < 20){
 8000558:	e01c      	b.n	8000594 <configure_sd+0x9c>
	  count++;
 800055a:	4b9c      	ldr	r3, [pc, #624]	@ (80007cc <configure_sd+0x2d4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a9a      	ldr	r2, [pc, #616]	@ (80007cc <configure_sd+0x2d4>)
 8000562:	6013      	str	r3, [r2, #0]
	  myprintf("0 Failed once: \r\n");
 8000564:	489a      	ldr	r0, [pc, #616]	@ (80007d0 <configure_sd+0x2d8>)
 8000566:	f7ff fe93 	bl	8000290 <myprintf>
	  ok_notok = HAL_SPI_Transmit(&hspi2, CMD0, 6, 1000); //Sending in Blocking mode
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	2206      	movs	r2, #6
 8000570:	4994      	ldr	r1, [pc, #592]	@ (80007c4 <configure_sd+0x2cc>)
 8000572:	4892      	ldr	r0, [pc, #584]	@ (80007bc <configure_sd+0x2c4>)
 8000574:	f003 fea3 	bl	80042be <HAL_SPI_Transmit>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b90      	ldr	r3, [pc, #576]	@ (80007c0 <configure_sd+0x2c8>)
 800057e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f001 fb45 	bl	8001c10 <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, CMD0_Response, 2, 1000);
 8000586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800058a:	2202      	movs	r2, #2
 800058c:	498e      	ldr	r1, [pc, #568]	@ (80007c8 <configure_sd+0x2d0>)
 800058e:	488b      	ldr	r0, [pc, #556]	@ (80007bc <configure_sd+0x2c4>)
 8000590:	f004 f80a 	bl	80045a8 <HAL_SPI_Receive>
	while(CMD0_Response[1] != 0x1 && count < 20){
 8000594:	4b8c      	ldr	r3, [pc, #560]	@ (80007c8 <configure_sd+0x2d0>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d003      	beq.n	80005a4 <configure_sd+0xac>
 800059c:	4b8b      	ldr	r3, [pc, #556]	@ (80007cc <configure_sd+0x2d4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b13      	cmp	r3, #19
 80005a2:	ddda      	ble.n	800055a <configure_sd+0x62>
	}
	if(count == 20){
 80005a4:	4b89      	ldr	r3, [pc, #548]	@ (80007cc <configure_sd+0x2d4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b14      	cmp	r3, #20
 80005aa:	d103      	bne.n	80005b4 <configure_sd+0xbc>
		myprintf("Timeout \r\n");
 80005ac:	4889      	ldr	r0, [pc, #548]	@ (80007d4 <configure_sd+0x2dc>)
 80005ae:	f7ff fe6f 	bl	8000290 <myprintf>
		return;
 80005b2:	e0fb      	b.n	80007ac <configure_sd+0x2b4>
	}
	myprintf("CMD0: ");
 80005b4:	4888      	ldr	r0, [pc, #544]	@ (80007d8 <configure_sd+0x2e0>)
 80005b6:	f7ff fe6b 	bl	8000290 <myprintf>
	for(int i = 0; i<2; i++){
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e00a      	b.n	80005d6 <configure_sd+0xde>
			  myprintf("(%x)", CMD0_Response[i]);
 80005c0:	4a81      	ldr	r2, [pc, #516]	@ (80007c8 <configure_sd+0x2d0>)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4884      	ldr	r0, [pc, #528]	@ (80007dc <configure_sd+0x2e4>)
 80005cc:	f7ff fe60 	bl	8000290 <myprintf>
	for(int i = 0; i<2; i++){
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	ddf1      	ble.n	80005c0 <configure_sd+0xc8>
		  }
	myprintf("\r\n");
 80005dc:	4880      	ldr	r0, [pc, #512]	@ (80007e0 <configure_sd+0x2e8>)
 80005de:	f7ff fe57 	bl	8000290 <myprintf>
	//HAL_Delay(100);
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80005e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e6:	2201      	movs	r2, #1
 80005e8:	497e      	ldr	r1, [pc, #504]	@ (80007e4 <configure_sd+0x2ec>)
 80005ea:	4874      	ldr	r0, [pc, #464]	@ (80007bc <configure_sd+0x2c4>)
 80005ec:	f003 fe67 	bl	80042be <HAL_SPI_Transmit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b72      	ldr	r3, [pc, #456]	@ (80007c0 <configure_sd+0x2c8>)
 80005f6:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80005f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fc:	2201      	movs	r2, #1
 80005fe:	4979      	ldr	r1, [pc, #484]	@ (80007e4 <configure_sd+0x2ec>)
 8000600:	486e      	ldr	r0, [pc, #440]	@ (80007bc <configure_sd+0x2c4>)
 8000602:	f003 fe5c 	bl	80042be <HAL_SPI_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b6d      	ldr	r3, [pc, #436]	@ (80007c0 <configure_sd+0x2c8>)
 800060c:	701a      	strb	r2, [r3, #0]

	//CMD8:
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD8, 6, 1000); //Sending in Blocking mode
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	2206      	movs	r2, #6
 8000614:	4974      	ldr	r1, [pc, #464]	@ (80007e8 <configure_sd+0x2f0>)
 8000616:	4869      	ldr	r0, [pc, #420]	@ (80007bc <configure_sd+0x2c4>)
 8000618:	f003 fe51 	bl	80042be <HAL_SPI_Transmit>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b67      	ldr	r3, [pc, #412]	@ (80007c0 <configure_sd+0x2c8>)
 8000622:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	@ 0x64
 8000626:	f001 faf3 	bl	8001c10 <HAL_Delay>
	HAL_SPI_Receive(&hspi2, CMD8_Response, 7, 1000);
 800062a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062e:	2207      	movs	r2, #7
 8000630:	496e      	ldr	r1, [pc, #440]	@ (80007ec <configure_sd+0x2f4>)
 8000632:	4862      	ldr	r0, [pc, #392]	@ (80007bc <configure_sd+0x2c4>)
 8000634:	f003 ffb8 	bl	80045a8 <HAL_SPI_Receive>
	//HAL_Delay(1000);
	count = 0;
 8000638:	4b64      	ldr	r3, [pc, #400]	@ (80007cc <configure_sd+0x2d4>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	while(count < 20 && (CMD8_Response[1] != 0x1 || CMD8_Response[5] != 0xAA)){
 800063e:	e02d      	b.n	800069c <configure_sd+0x1a4>
			count++;
 8000640:	4b62      	ldr	r3, [pc, #392]	@ (80007cc <configure_sd+0x2d4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a61      	ldr	r2, [pc, #388]	@ (80007cc <configure_sd+0x2d4>)
 8000648:	6013      	str	r3, [r2, #0]
			  myprintf("8 Failed once: \r\n");
 800064a:	4869      	ldr	r0, [pc, #420]	@ (80007f0 <configure_sd+0x2f8>)
 800064c:	f7ff fe20 	bl	8000290 <myprintf>
			  for(int i = 0; i<7; i++){
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	e00a      	b.n	800066c <configure_sd+0x174>
			  			  myprintf("(%x)", CMD8_Response[i]);
 8000656:	4a65      	ldr	r2, [pc, #404]	@ (80007ec <configure_sd+0x2f4>)
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	485e      	ldr	r0, [pc, #376]	@ (80007dc <configure_sd+0x2e4>)
 8000662:	f7ff fe15 	bl	8000290 <myprintf>
			  for(int i = 0; i<7; i++){
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b06      	cmp	r3, #6
 8000670:	ddf1      	ble.n	8000656 <configure_sd+0x15e>
			  		  }
			  ok_notok = HAL_SPI_Transmit(&hspi2, CMD8, 6, 1000); //Sending in Blocking mode
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	2206      	movs	r2, #6
 8000678:	495b      	ldr	r1, [pc, #364]	@ (80007e8 <configure_sd+0x2f0>)
 800067a:	4850      	ldr	r0, [pc, #320]	@ (80007bc <configure_sd+0x2c4>)
 800067c:	f003 fe1f 	bl	80042be <HAL_SPI_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b4e      	ldr	r3, [pc, #312]	@ (80007c0 <configure_sd+0x2c8>)
 8000686:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f001 fac1 	bl	8001c10 <HAL_Delay>
			  HAL_SPI_Receive(&hspi2, CMD8_Response, 7, 1000);
 800068e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000692:	2207      	movs	r2, #7
 8000694:	4955      	ldr	r1, [pc, #340]	@ (80007ec <configure_sd+0x2f4>)
 8000696:	4849      	ldr	r0, [pc, #292]	@ (80007bc <configure_sd+0x2c4>)
 8000698:	f003 ff86 	bl	80045a8 <HAL_SPI_Receive>
	while(count < 20 && (CMD8_Response[1] != 0x1 || CMD8_Response[5] != 0xAA)){
 800069c:	4b4b      	ldr	r3, [pc, #300]	@ (80007cc <configure_sd+0x2d4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b13      	cmp	r3, #19
 80006a2:	dc07      	bgt.n	80006b4 <configure_sd+0x1bc>
 80006a4:	4b51      	ldr	r3, [pc, #324]	@ (80007ec <configure_sd+0x2f4>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d1c9      	bne.n	8000640 <configure_sd+0x148>
 80006ac:	4b4f      	ldr	r3, [pc, #316]	@ (80007ec <configure_sd+0x2f4>)
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2baa      	cmp	r3, #170	@ 0xaa
 80006b2:	d1c5      	bne.n	8000640 <configure_sd+0x148>
	}
	if(count == 20){
 80006b4:	4b45      	ldr	r3, [pc, #276]	@ (80007cc <configure_sd+0x2d4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b14      	cmp	r3, #20
 80006ba:	d103      	bne.n	80006c4 <configure_sd+0x1cc>
		myprintf("Timeout \r\n");
 80006bc:	4845      	ldr	r0, [pc, #276]	@ (80007d4 <configure_sd+0x2dc>)
 80006be:	f7ff fde7 	bl	8000290 <myprintf>
			return;
 80006c2:	e073      	b.n	80007ac <configure_sd+0x2b4>
		}
	myprintf("CMD8: ");
 80006c4:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <configure_sd+0x2fc>)
 80006c6:	f7ff fde3 	bl	8000290 <myprintf>
	for(int i = 0; i<7; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e00a      	b.n	80006e6 <configure_sd+0x1ee>
			  myprintf("(%x)", CMD8_Response[i]);
 80006d0:	4a46      	ldr	r2, [pc, #280]	@ (80007ec <configure_sd+0x2f4>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4840      	ldr	r0, [pc, #256]	@ (80007dc <configure_sd+0x2e4>)
 80006dc:	f7ff fdd8 	bl	8000290 <myprintf>
	for(int i = 0; i<7; i++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	ddf1      	ble.n	80006d0 <configure_sd+0x1d8>
		  }
	myprintf("\r\n");
 80006ec:	483c      	ldr	r0, [pc, #240]	@ (80007e0 <configure_sd+0x2e8>)
 80006ee:	f7ff fdcf 	bl	8000290 <myprintf>
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80006f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f6:	2201      	movs	r2, #1
 80006f8:	493a      	ldr	r1, [pc, #232]	@ (80007e4 <configure_sd+0x2ec>)
 80006fa:	4830      	ldr	r0, [pc, #192]	@ (80007bc <configure_sd+0x2c4>)
 80006fc:	f003 fddf 	bl	80042be <HAL_SPI_Transmit>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <configure_sd+0x2c8>)
 8000706:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 8000708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070c:	2201      	movs	r2, #1
 800070e:	4935      	ldr	r1, [pc, #212]	@ (80007e4 <configure_sd+0x2ec>)
 8000710:	482a      	ldr	r0, [pc, #168]	@ (80007bc <configure_sd+0x2c4>)
 8000712:	f003 fdd4 	bl	80042be <HAL_SPI_Transmit>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <configure_sd+0x2c8>)
 800071c:	701a      	strb	r2, [r3, #0]

	//CMD55:
	int counter = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
	int worked = acdm55();
 8000722:	f7ff fddb 	bl	80002dc <acdm55>
 8000726:	6078      	str	r0, [r7, #4]
	myprintf("Worked: (%i)\r\n", worked);
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <configure_sd+0x300>)
 800072c:	f7ff fdb0 	bl	8000290 <myprintf>
	while(worked == 0 && counter<20){
 8000730:	e00b      	b.n	800074a <configure_sd+0x252>
			worked = acdm55();
 8000732:	f7ff fdd3 	bl	80002dc <acdm55>
 8000736:	6078      	str	r0, [r7, #4]
			//myprintf("Worked: (%i)\r\n", worked);
			counter++;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3301      	adds	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
			//myprintf("Count: (%x)\r\n", count);
			if(worked==1){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d102      	bne.n	800074a <configure_sd+0x252>
				myprintf("yay!\r\n");
 8000744:	482d      	ldr	r0, [pc, #180]	@ (80007fc <configure_sd+0x304>)
 8000746:	f7ff fda3 	bl	8000290 <myprintf>
	while(worked == 0 && counter<20){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <configure_sd+0x25e>
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b13      	cmp	r3, #19
 8000754:	dded      	ble.n	8000732 <configure_sd+0x23a>
			}
	}
	myprintf("Count: %i\r\n", counter);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	4829      	ldr	r0, [pc, #164]	@ (8000800 <configure_sd+0x308>)
 800075a:	f7ff fd99 	bl	8000290 <myprintf>
	myprintf("Worked: %i\r\n", worked);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	4828      	ldr	r0, [pc, #160]	@ (8000804 <configure_sd+0x30c>)
 8000762:	f7ff fd95 	bl	8000290 <myprintf>
	if(counter==20){
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b14      	cmp	r3, #20
 800076a:	d103      	bne.n	8000774 <configure_sd+0x27c>
		myprintf("Timeout\r\n");
 800076c:	4826      	ldr	r0, [pc, #152]	@ (8000808 <configure_sd+0x310>)
 800076e:	f7ff fd8f 	bl	8000290 <myprintf>
		return;
 8000772:	e01b      	b.n	80007ac <configure_sd+0x2b4>
	}

	myprintf("End of Start Up\r\n");
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <configure_sd+0x314>)
 8000776:	f7ff fd8b 	bl	8000290 <myprintf>
	if(ok_notok == HAL_OK){
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <configure_sd+0x2c8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <configure_sd+0x296>
	  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2120      	movs	r1, #32
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f002 f829 	bl	80027e0 <HAL_GPIO_WritePin>
	}
	HAL_Delay(1000);
 800078e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000792:	f001 fa3d 	bl	8001c10 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f002 f81f 	bl	80027e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2102      	movs	r1, #2
 80007a6:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <configure_sd+0x2bc>)
 80007a8:	f002 f81a 	bl	80027e0 <HAL_GPIO_WritePin>
}
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	48000400 	.word	0x48000400
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	200000ec 	.word	0x200000ec
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000260 	.word	0x20000260
 80007cc:	20000274 	.word	0x20000274
 80007d0:	080095e8 	.word	0x080095e8
 80007d4:	080095fc 	.word	0x080095fc
 80007d8:	08009608 	.word	0x08009608
 80007dc:	080095b4 	.word	0x080095b4
 80007e0:	080095bc 	.word	0x080095bc
 80007e4:	20000030 	.word	0x20000030
 80007e8:	20000018 	.word	0x20000018
 80007ec:	20000264 	.word	0x20000264
 80007f0:	08009610 	.word	0x08009610
 80007f4:	08009624 	.word	0x08009624
 80007f8:	0800962c 	.word	0x0800962c
 80007fc:	0800963c 	.word	0x0800963c
 8000800:	08009644 	.word	0x08009644
 8000804:	08009650 	.word	0x08009650
 8000808:	08009660 	.word	0x08009660
 800080c:	0800966c 	.word	0x0800966c

08000810 <process_line>:

struct msg_type med;
struct msg_type fast;
struct msg_type stat;

int process_line(char* msg, struct can_msg* msg_table, int counter) {
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	@ 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    struct can_msg M = { 0 };
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	811a      	strh	r2, [r3, #8]
    M.id = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	82bb      	strh	r3, [r7, #20]
    M.id |= msg[0] << 8;
 800082c:	8abb      	ldrh	r3, [r7, #20]
 800082e:	b21a      	sxth	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	82bb      	strh	r3, [r7, #20]
    M.id |= msg[1];
 8000840:	8abb      	ldrh	r3, [r7, #20]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	3201      	adds	r2, #1
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	4313      	orrs	r3, r2
 800084a:	b29b      	uxth	r3, r3
 800084c:	82bb      	strh	r3, [r7, #20]
    M.pkt = msg[2];
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3302      	adds	r3, #2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	75bb      	strb	r3, [r7, #22]
    M.start = msg[3];
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3303      	adds	r3, #3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	75fb      	strb	r3, [r7, #23]
    M.len = msg[4];
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3304      	adds	r3, #4
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	763b      	strb	r3, [r7, #24]
    M.bits[0] = msg[5];
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3305      	adds	r3, #5
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	767b      	strb	r3, [r7, #25]
    M.bits[1] = msg[6];
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3306      	adds	r3, #6
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	76bb      	strb	r3, [r7, #26]
    M.bits[2] = msg[7];
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3307      	adds	r3, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	76fb      	strb	r3, [r7, #27]
    M.lts = msg[8];
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3308      	adds	r3, #8
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	773b      	strb	r3, [r7, #28]
    M.idx = msg[9];
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3309      	adds	r3, #9
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	777b      	strb	r3, [r7, #29]
    msg_table[counter] = M;
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	461a      	mov	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4413      	add	r3, r2
 800089e:	461a      	mov	r2, r3
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	cb03      	ldmia	r3!, {r0, r1}
 80008a6:	6010      	str	r0, [r2, #0]
 80008a8:	6051      	str	r1, [r2, #4]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	8113      	strh	r3, [r2, #8]
    return counter++;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3724      	adds	r7, #36	@ 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <get_msg_type_details>:

void get_msg_type_details(char* buffer) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    uint8_t s;

    //Get the details for the medium speed message
    med.id = buffer[1];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3301      	adds	r3, #1
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b59      	ldr	r3, [pc, #356]	@ (8000a34 <get_msg_type_details+0x174>)
 80008d0:	701a      	strb	r2, [r3, #0]
    med.data_len = buffer[2];
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3302      	adds	r3, #2
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b56      	ldr	r3, [pc, #344]	@ (8000a34 <get_msg_type_details+0x174>)
 80008da:	705a      	strb	r2, [r3, #1]
    s = buffer[3];
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3303      	adds	r3, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	73fb      	strb	r3, [r7, #15]
    med.speed = 10 * (int)s;
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b50      	ldr	r3, [pc, #320]	@ (8000a34 <get_msg_type_details+0x174>)
 80008f2:	605a      	str	r2, [r3, #4]
    med.num_messages = buffer[4];
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3304      	adds	r3, #4
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000a34 <get_msg_type_details+0x174>)
 80008fc:	721a      	strb	r2, [r3, #8]
    med.len = med.data_len + 3;
 80008fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000a34 <get_msg_type_details+0x174>)
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	3303      	adds	r3, #3
 8000904:	4a4b      	ldr	r2, [pc, #300]	@ (8000a34 <get_msg_type_details+0x174>)
 8000906:	60d3      	str	r3, [r2, #12]

    myprintf("Med\r\n");
 8000908:	484b      	ldr	r0, [pc, #300]	@ (8000a38 <get_msg_type_details+0x178>)
 800090a:	f7ff fcc1 	bl	8000290 <myprintf>
    myprintf("id: %c\r\n", med.id);
 800090e:	4b49      	ldr	r3, [pc, #292]	@ (8000a34 <get_msg_type_details+0x174>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4849      	ldr	r0, [pc, #292]	@ (8000a3c <get_msg_type_details+0x17c>)
 8000916:	f7ff fcbb 	bl	8000290 <myprintf>
    myprintf("data_len: %u\r\n", med.data_len);
 800091a:	4b46      	ldr	r3, [pc, #280]	@ (8000a34 <get_msg_type_details+0x174>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	4619      	mov	r1, r3
 8000920:	4847      	ldr	r0, [pc, #284]	@ (8000a40 <get_msg_type_details+0x180>)
 8000922:	f7ff fcb5 	bl	8000290 <myprintf>
    myprintf("speed: %i\r\n", med.speed);
 8000926:	4b43      	ldr	r3, [pc, #268]	@ (8000a34 <get_msg_type_details+0x174>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4619      	mov	r1, r3
 800092c:	4845      	ldr	r0, [pc, #276]	@ (8000a44 <get_msg_type_details+0x184>)
 800092e:	f7ff fcaf 	bl	8000290 <myprintf>
    myprintf("num_messages: %u\r\n", med.num_messages);
 8000932:	4b40      	ldr	r3, [pc, #256]	@ (8000a34 <get_msg_type_details+0x174>)
 8000934:	7a1b      	ldrb	r3, [r3, #8]
 8000936:	4619      	mov	r1, r3
 8000938:	4843      	ldr	r0, [pc, #268]	@ (8000a48 <get_msg_type_details+0x188>)
 800093a:	f7ff fca9 	bl	8000290 <myprintf>

    //Get the details for the fast speed message
    fast.id = buffer[5];
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3305      	adds	r3, #5
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000946:	701a      	strb	r2, [r3, #0]
    fast.data_len = buffer[6];
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3306      	adds	r3, #6
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000950:	705a      	strb	r2, [r3, #1]
    s = buffer[7];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3307      	adds	r3, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	73fb      	strb	r3, [r7, #15]
    fast.speed = 10 * (int)s;
 800095a:	7bfa      	ldrb	r2, [r7, #15]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	461a      	mov	r2, r3
 8000966:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000968:	605a      	str	r2, [r3, #4]
    fast.num_messages = buffer[8];
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3308      	adds	r3, #8
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000972:	721a      	strb	r2, [r3, #8]
    fast.len = fast.data_len + 3;
 8000974:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	3303      	adds	r3, #3
 800097a:	4a34      	ldr	r2, [pc, #208]	@ (8000a4c <get_msg_type_details+0x18c>)
 800097c:	60d3      	str	r3, [r2, #12]

    myprintf("Fast\r\n");
 800097e:	4834      	ldr	r0, [pc, #208]	@ (8000a50 <get_msg_type_details+0x190>)
 8000980:	f7ff fc86 	bl	8000290 <myprintf>
    myprintf("id: %c\r\n", fast.id);
 8000984:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <get_msg_type_details+0x17c>)
 800098c:	f7ff fc80 	bl	8000290 <myprintf>
    myprintf("data_len: %u\r\n", fast.data_len);
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	4619      	mov	r1, r3
 8000996:	482a      	ldr	r0, [pc, #168]	@ (8000a40 <get_msg_type_details+0x180>)
 8000998:	f7ff fc7a 	bl	8000290 <myprintf>
    myprintf("speed: %i\r\n", fast.speed);
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <get_msg_type_details+0x18c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4828      	ldr	r0, [pc, #160]	@ (8000a44 <get_msg_type_details+0x184>)
 80009a4:	f7ff fc74 	bl	8000290 <myprintf>
    myprintf("num_messages: %u\r\n", fast.num_messages);
 80009a8:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <get_msg_type_details+0x18c>)
 80009aa:	7a1b      	ldrb	r3, [r3, #8]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	@ (8000a48 <get_msg_type_details+0x188>)
 80009b0:	f7ff fc6e 	bl	8000290 <myprintf>

    //Get the details for the stat speed message
    stat.id = buffer[9];
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3309      	adds	r3, #9
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <get_msg_type_details+0x194>)
 80009bc:	701a      	strb	r2, [r3, #0]
    stat.data_len = buffer[10];
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	330a      	adds	r3, #10
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <get_msg_type_details+0x194>)
 80009c6:	705a      	strb	r2, [r3, #1]
    s = buffer[11];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	330b      	adds	r3, #11
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	73fb      	strb	r3, [r7, #15]
    stat.speed = 10 * (int)s;
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	461a      	mov	r2, r3
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <get_msg_type_details+0x194>)
 80009de:	605a      	str	r2, [r3, #4]
    stat.num_messages = buffer[12];
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	330c      	adds	r3, #12
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <get_msg_type_details+0x194>)
 80009e8:	721a      	strb	r2, [r3, #8]
    stat.len = stat.data_len + 3;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <get_msg_type_details+0x194>)
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	3303      	adds	r3, #3
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <get_msg_type_details+0x194>)
 80009f2:	60d3      	str	r3, [r2, #12]

    myprintf("Stat\r\n");
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <get_msg_type_details+0x198>)
 80009f6:	f7ff fc4b 	bl	8000290 <myprintf>
    myprintf("id: %c\r\n", stat.id);
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <get_msg_type_details+0x194>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	480e      	ldr	r0, [pc, #56]	@ (8000a3c <get_msg_type_details+0x17c>)
 8000a02:	f7ff fc45 	bl	8000290 <myprintf>
    myprintf("data_len: %u\r\n", stat.data_len);
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <get_msg_type_details+0x194>)
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <get_msg_type_details+0x180>)
 8000a0e:	f7ff fc3f 	bl	8000290 <myprintf>
    myprintf("speed: %i\r\n", stat.speed);
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <get_msg_type_details+0x194>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4619      	mov	r1, r3
 8000a18:	480a      	ldr	r0, [pc, #40]	@ (8000a44 <get_msg_type_details+0x184>)
 8000a1a:	f7ff fc39 	bl	8000290 <myprintf>
    myprintf("num_messages: %u\r\n", stat.num_messages);
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <get_msg_type_details+0x194>)
 8000a20:	7a1b      	ldrb	r3, [r3, #8]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <get_msg_type_details+0x188>)
 8000a26:	f7ff fc33 	bl	8000290 <myprintf>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000029c 	.word	0x2000029c
 8000a38:	08009680 	.word	0x08009680
 8000a3c:	08009688 	.word	0x08009688
 8000a40:	08009694 	.word	0x08009694
 8000a44:	080096a4 	.word	0x080096a4
 8000a48:	080096b0 	.word	0x080096b0
 8000a4c:	200002ac 	.word	0x200002ac
 8000a50:	080096c4 	.word	0x080096c4
 8000a54:	200002bc 	.word	0x200002bc
 8000a58:	080096cc 	.word	0x080096cc

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a60:	f2ad 6d5c 	subw	sp, sp, #1628	@ 0x65c
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f001 f86d 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 fcd5 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fe07 	bl	8001680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a72:	f000 fdd5 	bl	8001620 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000a76:	f000 fd2f 	bl	80014d8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000a7a:	f000 fda1 	bl	80015c0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000a7e:	f000 fd61 	bl	8001544 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000a82:	f004 ff6f 	bl	8005964 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ Starting LT~\r\n\r\n");
 8000a86:	48a6      	ldr	r0, [pc, #664]	@ (8000d20 <main+0x2c4>)
 8000a88:	f7ff fc02 	bl	8000290 <myprintf>
  configure_sd();
 8000a8c:	f7ff fd34 	bl	80004f8 <configure_sd>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a94:	f001 f8bc 	bl	8001c10 <HAL_Delay>
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Set Up CAN
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a98:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000a9c:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	6213      	str	r3, [r2, #32]
  canfilterconfig.FilterBank = 8;  // which filter bank to use from the assigned ones
 8000aa4:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000aa8:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000aac:	2308      	movs	r3, #8
 8000aae:	6153      	str	r3, [r2, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ab0:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000ab4:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000ab8:	2300      	movs	r3, #0
 8000aba:	6113      	str	r3, [r2, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 8000abc:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000ac0:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000ac4:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8000ac8:	6013      	str	r3, [r2, #0]
  canfilterconfig.FilterIdLow = 0;
 8000aca:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000ace:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	6053      	str	r3, [r2, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000ad6:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000ada:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6093      	str	r3, [r2, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ae2:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000ae6:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000aea:	2300      	movs	r3, #0
 8000aec:	60d3      	str	r3, [r2, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000aee:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000af2:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000af6:	2300      	movs	r3, #0
 8000af8:	6193      	str	r3, [r2, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000afa:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000afe:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000b02:	2301      	movs	r3, #1
 8000b04:	61d3      	str	r3, [r2, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000b06:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000b0a:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8000b0e:	230e      	movs	r3, #14
 8000b10:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000b12:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8000b16:	4619      	mov	r1, r3
 8000b18:	4882      	ldr	r0, [pc, #520]	@ (8000d24 <main+0x2c8>)
 8000b1a:	f001 f998 	bl	8001e4e <HAL_CAN_ConfigFilter>
  HAL_StatusTypeDef ret = HAL_CAN_Start(&hcan);
 8000b1e:	4881      	ldr	r0, [pc, #516]	@ (8000d24 <main+0x2c8>)
 8000b20:	f001 fa5f 	bl	8001fe2 <HAL_CAN_Start>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f887 3623 	strb.w	r3, [r7, #1571]	@ 0x623
  if(ret != HAL_OK){
 8000b2a:	f897 3623 	ldrb.w	r3, [r7, #1571]	@ 0x623
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <main+0xde>
  	  myprintf("\rinit error\r\n\r\n");
 8000b32:	487d      	ldr	r0, [pc, #500]	@ (8000d28 <main+0x2cc>)
 8000b34:	f7ff fbac 	bl	8000290 <myprintf>
 8000b38:	e002      	b.n	8000b40 <main+0xe4>
    }
    else
    {
  	  myprintf("\rinitialised\r\n\r\n");
 8000b3a:	487c      	ldr	r0, [pc, #496]	@ (8000d2c <main+0x2d0>)
 8000b3c:	f7ff fba8 	bl	8000290 <myprintf>
    }

  //Open the file system
  myprintf("\r\nInitialising SD CARD\r\n\r\n");
 8000b40:	487b      	ldr	r0, [pc, #492]	@ (8000d30 <main+0x2d4>)
 8000b42:	f7ff fba5 	bl	8000290 <myprintf>
  int init_tries = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000b4c:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000b50:	2201      	movs	r2, #1
 8000b52:	4978      	ldr	r1, [pc, #480]	@ (8000d34 <main+0x2d8>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fb03 	bl	8008160 <f_mount>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3657 	strb.w	r3, [r7, #1623]	@ 0x657
  while(fres != FR_OK && init_tries<5){
 8000b60:	e011      	b.n	8000b86 <main+0x12a>
	myprintf("Trying Again\r\n");
 8000b62:	4875      	ldr	r0, [pc, #468]	@ (8000d38 <main+0x2dc>)
 8000b64:	f7ff fb94 	bl	8000290 <myprintf>
	init_tries++;
 8000b68:	f8d7 3650 	ldr.w	r3, [r7, #1616]	@ 0x650
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000b72:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000b76:	2201      	movs	r2, #1
 8000b78:	496e      	ldr	r1, [pc, #440]	@ (8000d34 <main+0x2d8>)
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 faf0 	bl	8008160 <f_mount>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 3657 	strb.w	r3, [r7, #1623]	@ 0x657
  while(fres != FR_OK && init_tries<5){
 8000b86:	f897 3657 	ldrb.w	r3, [r7, #1623]	@ 0x657
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <main+0x13a>
 8000b8e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	@ 0x650
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	dde5      	ble.n	8000b62 <main+0x106>
  }
  if (fres != FR_OK) {
 8000b96:	f897 3657 	ldrb.w	r3, [r7, #1623]	@ 0x657
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d018      	beq.n	8000bd0 <main+0x174>
	myprintf("f_mount error (%i)\r\n", fres);
 8000b9e:	f897 3657 	ldrb.w	r3, [r7, #1623]	@ 0x657
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4865      	ldr	r0, [pc, #404]	@ (8000d3c <main+0x2e0>)
 8000ba6:	f7ff fb73 	bl	8000290 <myprintf>
	while(1){
		HAL_GPIO_TogglePin(GPIOA, Green_LED_Pin);
 8000baa:	2120      	movs	r1, #32
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f001 fe2e 	bl	8002810 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000bb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb8:	f001 f82a 	bl	8001c10 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, Green_LED_Pin);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f001 fe25 	bl	8002810 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000bc6:	2064      	movs	r0, #100	@ 0x64
 8000bc8:	f001 f822 	bl	8001c10 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, Green_LED_Pin);
 8000bcc:	bf00      	nop
 8000bce:	e7ec      	b.n	8000baa <main+0x14e>
	}
  }
  myprintf("\r\nSD CARD Initialised!\r\n\r\n");
 8000bd0:	485b      	ldr	r0, [pc, #364]	@ (8000d40 <main+0x2e4>)
 8000bd2:	f7ff fb5d 	bl	8000290 <myprintf>

  char buffer[255];
  char *filename = "settings.bin";
 8000bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d44 <main+0x2e8>)
 8000bd8:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c

  fres = f_open(&fil, filename, FA_READ);
 8000bdc:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000be0:	2201      	movs	r2, #1
 8000be2:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fb02 	bl	80081f0 <f_open>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 3657 	strb.w	r3, [r7, #1623]	@ 0x657
  if (fres != FR_OK) {
 8000bf2:	f897 3657 	ldrb.w	r3, [r7, #1623]	@ 0x657
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d009      	beq.n	8000c0e <main+0x1b2>
	myprintf("f_open error (%i)\r\n", fres);
 8000bfa:	f897 3657 	ldrb.w	r3, [r7, #1623]	@ 0x657
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4851      	ldr	r0, [pc, #324]	@ (8000d48 <main+0x2ec>)
 8000c02:	f7ff fb45 	bl	8000290 <myprintf>
	myprintf("unable to open file");
 8000c06:	4851      	ldr	r0, [pc, #324]	@ (8000d4c <main+0x2f0>)
 8000c08:	f7ff fb42 	bl	8000290 <myprintf>
 8000c0c:	e002      	b.n	8000c14 <main+0x1b8>
  }
  else{
	myprintf("Settings File opened!\r\n");
 8000c0e:	4850      	ldr	r0, [pc, #320]	@ (8000d50 <main+0x2f4>)
 8000c10:	f7ff fb3e 	bl	8000290 <myprintf>
  }

  //get number of messages
  UINT bytes_read;
  fres = f_read(&fil, buffer, 13, &bytes_read);
 8000c14:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c18:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000c1c:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8000c20:	220d      	movs	r2, #13
 8000c22:	f007 fd5a 	bl	80086da <f_read>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 3657 	strb.w	r3, [r7, #1623]	@ 0x657
  if(bytes_read == 0) {
 8000c2c:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000c30:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d105      	bne.n	8000c46 <main+0x1ea>
	myprintf("f_read error (%i)\r\n", fres);
 8000c3a:	f897 3657 	ldrb.w	r3, [r7, #1623]	@ 0x657
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4844      	ldr	r0, [pc, #272]	@ (8000d54 <main+0x2f8>)
 8000c42:	f7ff fb25 	bl	8000290 <myprintf>
  }
  uint8_t num_msgs = buffer[0];
 8000c46:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000c4a:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f887 361b 	strb.w	r3, [r7, #1563]	@ 0x61b
  myprintf("num messages: %u\r\n", num_msgs);
 8000c54:	f897 361b 	ldrb.w	r3, [r7, #1563]	@ 0x61b
 8000c58:	4619      	mov	r1, r3
 8000c5a:	483f      	ldr	r0, [pc, #252]	@ (8000d58 <main+0x2fc>)
 8000c5c:	f7ff fb18 	bl	8000290 <myprintf>

  struct can_msg table[num_msgs];
 8000c60:	f897 661b 	ldrb.w	r6, [r7, #1563]	@ 0x61b
 8000c64:	4633      	mov	r3, r6
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8000c6c:	b2f3      	uxtb	r3, r6
 8000c6e:	2200      	movs	r2, #0
 8000c70:	469a      	mov	sl, r3
 8000c72:	4693      	mov	fp, r2
 8000c74:	4652      	mov	r2, sl
 8000c76:	465b      	mov	r3, fp
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	f04f 0100 	mov.w	r1, #0
 8000c80:	0099      	lsls	r1, r3, #2
 8000c82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c86:	0090      	lsls	r0, r2, #2
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	eb12 040a 	adds.w	r4, r2, sl
 8000c90:	eb43 050b 	adc.w	r5, r3, fp
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	012b      	lsls	r3, r5, #4
 8000c9e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ca2:	0122      	lsls	r2, r4, #4
 8000ca4:	b2f3      	uxtb	r3, r6
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000caa:	647a      	str	r2, [r7, #68]	@ 0x44
 8000cac:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	462b      	mov	r3, r5
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	f04f 0100 	mov.w	r1, #0
 8000cbc:	0099      	lsls	r1, r3, #2
 8000cbe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000cc2:	0090      	lsls	r0, r2, #2
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4621      	mov	r1, r4
 8000cca:	eb12 0801 	adds.w	r8, r2, r1
 8000cce:	4629      	mov	r1, r5
 8000cd0:	eb43 0901 	adc.w	r9, r3, r1
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000ce0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000ce4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000ce8:	4632      	mov	r2, r6
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	3307      	adds	r3, #7
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfc:	466b      	mov	r3, sp
 8000cfe:	3301      	adds	r3, #1
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	f8c7 3610 	str.w	r3, [r7, #1552]	@ 0x610
  //Get message types
  get_msg_type_details(buffer);
 8000d08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fdd7 	bl	80008c0 <get_msg_type_details>

  //get individual message details
  myprintf("Getting individual msg details\r\n");
 8000d12:	4812      	ldr	r0, [pc, #72]	@ (8000d5c <main+0x300>)
 8000d14:	f7ff fabc 	bl	8000290 <myprintf>
  for (int counter = 0; counter < num_msgs; counter++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8000d1e:	e036      	b.n	8000d8e <main+0x332>
 8000d20:	080096d4 	.word	0x080096d4
 8000d24:	200000c4 	.word	0x200000c4
 8000d28:	080096ec 	.word	0x080096ec
 8000d2c:	080096fc 	.word	0x080096fc
 8000d30:	08009710 	.word	0x08009710
 8000d34:	0800972c 	.word	0x0800972c
 8000d38:	08009730 	.word	0x08009730
 8000d3c:	08009740 	.word	0x08009740
 8000d40:	08009758 	.word	0x08009758
 8000d44:	08009774 	.word	0x08009774
 8000d48:	08009784 	.word	0x08009784
 8000d4c:	08009798 	.word	0x08009798
 8000d50:	080097ac 	.word	0x080097ac
 8000d54:	080097c4 	.word	0x080097c4
 8000d58:	080097d8 	.word	0x080097d8
 8000d5c:	080097ec 	.word	0x080097ec
      f_read(&fil, buffer, 10, &bytes_read);
 8000d60:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d64:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000d68:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	f007 fcb4 	bl	80086da <f_read>
      process_line(buffer, table, counter);
 8000d72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d76:	f8d7 264c 	ldr.w	r2, [r7, #1612]	@ 0x64c
 8000d7a:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd46 	bl	8000810 <process_line>
  for (int counter = 0; counter < num_msgs; counter++) {
 8000d84:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8000d8e:	f897 261b 	ldrb.w	r2, [r7, #1563]	@ 0x61b
 8000d92:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 8000d96:	4293      	cmp	r3, r2
 8000d98:	dbe2      	blt.n	8000d60 <main+0x304>
  }
  f_close(&fil);
 8000d9a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 fec0 	bl	8008b24 <f_close>

  myprintf("\r\nMessage Information Loaded\r\n");
 8000da4:	48ce      	ldr	r0, [pc, #824]	@ (80010e0 <main+0x684>)
 8000da6:	f7ff fa73 	bl	8000290 <myprintf>
//    myprintf("num messages: %u\r\n", num_csv_msgs);

    //int msg_ctr = 0;
    struct can_msg msg_type;
    struct can_msg null_msg;
    null_msg.id = 0;
 8000daa:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000dae:	f5a3 62c2 	sub.w	r2, r3, #1552	@ 0x610
 8000db2:	2300      	movs	r3, #0
 8000db4:	8013      	strh	r3, [r2, #0]
    uint32_t fill_level = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c

    uint32_t stat_last_time = HAL_GetTick();
 8000dbc:	f000 ff1c 	bl	8001bf8 <HAL_GetTick>
 8000dc0:	f8c7 0648 	str.w	r0, [r7, #1608]	@ 0x648
    uint32_t fast_last_time = HAL_GetTick();
 8000dc4:	f000 ff18 	bl	8001bf8 <HAL_GetTick>
 8000dc8:	f8c7 0644 	str.w	r0, [r7, #1604]	@ 0x644
    uint32_t med_last_time = HAL_GetTick();
 8000dcc:	f000 ff14 	bl	8001bf8 <HAL_GetTick>
 8000dd0:	f8c7 0640 	str.w	r0, [r7, #1600]	@ 0x640
    uint32_t curr_time;

    uint8_t stat_pkt[stat.data_len+3];
 8000dd4:	4bc3      	ldr	r3, [pc, #780]	@ (80010e4 <main+0x688>)
 8000dd6:	785b      	ldrb	r3, [r3, #1]
 8000dd8:	1cd9      	adds	r1, r3, #3
 8000dda:	1e4b      	subs	r3, r1, #1
 8000ddc:	f8c7 3608 	str.w	r3, [r7, #1544]	@ 0x608
 8000de0:	460a      	mov	r2, r1
 8000de2:	2300      	movs	r3, #0
 8000de4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000df4:	4628      	mov	r0, r5
 8000df6:	00c3      	lsls	r3, r0, #3
 8000df8:	4620      	mov	r0, r4
 8000dfa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000dfe:	4620      	mov	r0, r4
 8000e00:	00c2      	lsls	r2, r0, #3
 8000e02:	460a      	mov	r2, r1
 8000e04:	2300      	movs	r3, #0
 8000e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000e16:	4628      	mov	r0, r5
 8000e18:	00c3      	lsls	r3, r0, #3
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e20:	4620      	mov	r0, r4
 8000e22:	00c2      	lsls	r2, r0, #3
 8000e24:	460b      	mov	r3, r1
 8000e26:	3307      	adds	r3, #7
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e30:	466b      	mov	r3, sp
 8000e32:	3300      	adds	r3, #0
 8000e34:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
    uint8_t stat_pkt_last[stat.data_len+3];
 8000e38:	4baa      	ldr	r3, [pc, #680]	@ (80010e4 <main+0x688>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	1cd9      	adds	r1, r3, #3
 8000e3e:	1e4b      	subs	r3, r1, #1
 8000e40:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8000e44:	460a      	mov	r2, r1
 8000e46:	2300      	movs	r3, #0
 8000e48:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000e58:	4628      	mov	r0, r5
 8000e5a:	00c3      	lsls	r3, r0, #3
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e62:	4620      	mov	r0, r4
 8000e64:	00c2      	lsls	r2, r0, #3
 8000e66:	460a      	mov	r2, r1
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623a      	str	r2, [r7, #32]
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	00c3      	lsls	r3, r0, #3
 8000e7e:	4620      	mov	r0, r4
 8000e80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e84:	4620      	mov	r0, r4
 8000e86:	00c2      	lsls	r2, r0, #3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	3307      	adds	r3, #7
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	ebad 0d03 	sub.w	sp, sp, r3
 8000e94:	466b      	mov	r3, sp
 8000e96:	3300      	adds	r3, #0
 8000e98:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
    stat_pkt[0] = stat.id;
 8000e9c:	4b91      	ldr	r3, [pc, #580]	@ (80010e4 <main+0x688>)
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000ea4:	701a      	strb	r2, [r3, #0]
    uint8_t med_pkt[med.data_len+3];
 8000ea6:	4b90      	ldr	r3, [pc, #576]	@ (80010e8 <main+0x68c>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	1cd9      	adds	r1, r3, #3
 8000eac:	1e4b      	subs	r3, r1, #1
 8000eae:	f8c7 35f8 	str.w	r3, [r7, #1528]	@ 0x5f8
 8000eb2:	460a      	mov	r2, r1
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61ba      	str	r2, [r7, #24]
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	00c3      	lsls	r3, r0, #3
 8000eca:	4620      	mov	r0, r4
 8000ecc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	00c2      	lsls	r2, r0, #3
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613a      	str	r2, [r7, #16]
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000ee8:	4628      	mov	r0, r5
 8000eea:	00c3      	lsls	r3, r0, #3
 8000eec:	4620      	mov	r0, r4
 8000eee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	00c2      	lsls	r2, r0, #3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	3307      	adds	r3, #7
 8000efa:	08db      	lsrs	r3, r3, #3
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	ebad 0d03 	sub.w	sp, sp, r3
 8000f02:	466b      	mov	r3, sp
 8000f04:	3300      	adds	r3, #0
 8000f06:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
    med_pkt[0] = med.id;
 8000f0a:	4b77      	ldr	r3, [pc, #476]	@ (80010e8 <main+0x68c>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000f12:	701a      	strb	r2, [r3, #0]
    uint8_t fast_pkt[fast.data_len+3];
 8000f14:	4b75      	ldr	r3, [pc, #468]	@ (80010ec <main+0x690>)
 8000f16:	785b      	ldrb	r3, [r3, #1]
 8000f18:	1cd9      	adds	r1, r3, #3
 8000f1a:	1e4b      	subs	r3, r1, #1
 8000f1c:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 8000f20:	460a      	mov	r2, r1
 8000f22:	2300      	movs	r3, #0
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f34:	4628      	mov	r0, r5
 8000f36:	00c3      	lsls	r3, r0, #3
 8000f38:	4620      	mov	r0, r4
 8000f3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f3e:	4620      	mov	r0, r4
 8000f40:	00c2      	lsls	r2, r0, #3
 8000f42:	460a      	mov	r2, r1
 8000f44:	2300      	movs	r3, #0
 8000f46:	603a      	str	r2, [r7, #0]
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000f56:	4628      	mov	r0, r5
 8000f58:	00c3      	lsls	r3, r0, #3
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f60:	4620      	mov	r0, r4
 8000f62:	00c2      	lsls	r2, r0, #3
 8000f64:	460b      	mov	r3, r1
 8000f66:	3307      	adds	r3, #7
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f70:	466b      	mov	r3, sp
 8000f72:	3300      	adds	r3, #0
 8000f74:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
    fast_pkt[0] = fast.id;
 8000f78:	4b5c      	ldr	r3, [pc, #368]	@ (80010ec <main+0x690>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000f80:	701a      	strb	r2, [r3, #0]

    uint8_t *curr_pkt;
    uint8_t send_stat = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 363b 	strb.w	r3, [r7, #1595]	@ 0x63b

    stat_pkt[1] = stat_pkt[2] = 0;
 8000f88:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	709a      	strb	r2, [r3, #2]
 8000f90:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000f94:	789a      	ldrb	r2, [r3, #2]
 8000f96:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000f9a:	705a      	strb	r2, [r3, #1]
    med_pkt[1] = med_pkt[2] = 0;
 8000f9c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	709a      	strb	r2, [r3, #2]
 8000fa4:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000fa8:	789a      	ldrb	r2, [r3, #2]
 8000faa:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000fae:	705a      	strb	r2, [r3, #1]
    fast_pkt[1] = fast_pkt[2] = 0;
 8000fb0:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	709a      	strb	r2, [r3, #2]
 8000fb8:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000fbc:	789a      	ldrb	r2, [r3, #2]
 8000fbe:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000fc2:	705a      	strb	r2, [r3, #1]
//	  for(int idx = 0; idx<RxHeader.DLC; idx++){
//		  myprintf("(%x)", RxData[idx]);
//	  	  }
//	  myprintf("\r\n");

	  fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	484a      	ldr	r0, [pc, #296]	@ (80010f0 <main+0x694>)
 8000fc8:	f001 f971 	bl	80022ae <HAL_CAN_GetRxFifoFillLevel>
 8000fcc:	f8c7 060c 	str.w	r0, [r7, #1548]	@ 0x60c
	  if(fill_level !=0){
 8000fd0:	f8d7 360c 	ldr.w	r3, [r7, #1548]	@ 0x60c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 8140 	beq.w	800125a <main+0x7fe>
		 if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000fda:	4b46      	ldr	r3, [pc, #280]	@ (80010f4 <main+0x698>)
 8000fdc:	4a46      	ldr	r2, [pc, #280]	@ (80010f8 <main+0x69c>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <main+0x694>)
 8000fe2:	f001 f842 	bl	800206a <HAL_CAN_GetRxMessage>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <main+0x598>
		 {
				 myprintf("No msg found\r\n\r\n");
 8000fec:	4843      	ldr	r0, [pc, #268]	@ (80010fc <main+0x6a0>)
 8000fee:	f7ff f94f 	bl	8000290 <myprintf>
 8000ff2:	e132      	b.n	800125a <main+0x7fe>
		  }else {

		  //Check which message was received
		  	  msg_type = null_msg;
 8000ff4:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8000ff8:	f2a3 6104 	subw	r1, r3, #1540	@ 0x604
 8000ffc:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001000:	f5a3 62c2 	sub.w	r2, r3, #1552	@ 0x610
 8001004:	460b      	mov	r3, r1
 8001006:	ca07      	ldmia	r2, {r0, r1, r2}
 8001008:	c303      	stmia	r3!, {r0, r1}
 800100a:	801a      	strh	r2, [r3, #0]
		  	  for(int idx =0; idx<num_msgs; idx++){
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8001012:	e026      	b.n	8001062 <main+0x606>
		  		  if(RxHeader.StdId == table[idx].id){
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <main+0x69c>)
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	f8d7 0610 	ldr.w	r0, [r7, #1552]	@ 0x610
 800101c:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4403      	add	r3, r0
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4299      	cmp	r1, r3
 800102e:	d113      	bne.n	8001058 <main+0x5fc>
		  			  msg_type = table[idx];
 8001030:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001034:	f2a3 6004 	subw	r0, r3, #1540	@ 0x604
 8001038:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 800103c:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	18ca      	adds	r2, r1, r3
 800104a:	4603      	mov	r3, r0
 800104c:	6810      	ldr	r0, [r2, #0]
 800104e:	6851      	ldr	r1, [r2, #4]
 8001050:	c303      	stmia	r3!, {r0, r1}
 8001052:	8912      	ldrh	r2, [r2, #8]
 8001054:	801a      	strh	r2, [r3, #0]
		  			  break;
 8001056:	e00a      	b.n	800106e <main+0x612>
		  	  for(int idx =0; idx<num_msgs; idx++){
 8001058:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 800105c:	3301      	adds	r3, #1
 800105e:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8001062:	f897 361b 	ldrb.w	r3, [r7, #1563]	@ 0x61b
 8001066:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 800106a:	429a      	cmp	r2, r3
 800106c:	dbd2      	blt.n	8001014 <main+0x5b8>
		  		  }
		  	  }

		  	  if(msg_type.id != 0)
 800106e:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001072:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00f      	beq.n	800109c <main+0x640>
		  	  {
		  		  myprintf("(%x) (%c)\r\n", msg_type.id, msg_type.pkt);
 800107c:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001080:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 800108c:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	461a      	mov	r2, r3
 8001094:	481a      	ldr	r0, [pc, #104]	@ (8001100 <main+0x6a4>)
 8001096:	f7ff f8fb 	bl	8000290 <myprintf>
 800109a:	e002      	b.n	80010a2 <main+0x646>
		  	  }
		  	  else{
		  		  myprintf("Corresponding message not found\r\n");
 800109c:	4819      	ldr	r0, [pc, #100]	@ (8001104 <main+0x6a8>)
 800109e:	f7ff f8f7 	bl	8000290 <myprintf>
		  	  }

		  	  curr_pkt = NULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c

		  	  //Sets the curr_pkt pointer to the correct packet
		  	  if(msg_type.pkt == fast.id)
 80010a8:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 80010ac:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80010b0:	789a      	ldrb	r2, [r3, #2]
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <main+0x690>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d104      	bne.n	80010c4 <main+0x668>
		  	  {
		  		  curr_pkt = fast_pkt;
 80010ba:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 80010be:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 80010c2:	e02e      	b.n	8001122 <main+0x6c6>
		  	  } else if(msg_type.pkt == med.id){
 80010c4:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 80010c8:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80010cc:	789a      	ldrb	r2, [r3, #2]
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <main+0x68c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d118      	bne.n	8001108 <main+0x6ac>
		  		  curr_pkt = med_pkt;
 80010d6:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80010da:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 80010de:	e020      	b.n	8001122 <main+0x6c6>
 80010e0:	08009810 	.word	0x08009810
 80010e4:	200002bc 	.word	0x200002bc
 80010e8:	2000029c 	.word	0x2000029c
 80010ec:	200002ac 	.word	0x200002ac
 80010f0:	200000c4 	.word	0x200000c4
 80010f4:	20000294 	.word	0x20000294
 80010f8:	20000278 	.word	0x20000278
 80010fc:	08009830 	.word	0x08009830
 8001100:	08009844 	.word	0x08009844
 8001104:	08009850 	.word	0x08009850
		  	  } else if(msg_type.pkt == stat.id){
 8001108:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 800110c:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8001110:	789a      	ldrb	r2, [r3, #2]
 8001112:	4bb5      	ldr	r3, [pc, #724]	@ (80013e8 <main+0x98c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d103      	bne.n	8001122 <main+0x6c6>
		  		  curr_pkt = stat_pkt;
 800111a:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 800111e:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
		  	  }

		  	  //Check if the stat_pkt has changed
		  	  if(msg_type.pkt == stat.id){
 8001122:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001126:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800112a:	789a      	ldrb	r2, [r3, #2]
 800112c:	4bae      	ldr	r3, [pc, #696]	@ (80013e8 <main+0x98c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d12e      	bne.n	8001192 <main+0x736>
		  		  for(int idx = 0; idx<msg_type.lts; idx++){
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 800113a:	e020      	b.n	800117e <main+0x722>
		  			  if(curr_pkt[msg_type.start+idx] != stat_pkt_last[idx])
 800113c:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001140:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	461a      	mov	r2, r3
 8001148:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 800114c:	4413      	add	r3, r2
 800114e:	461a      	mov	r2, r3
 8001150:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 8001154:	4413      	add	r3, r2
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	@ 0x5fc
 800115c:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 8001160:	440b      	add	r3, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d005      	beq.n	8001174 <main+0x718>
		  			  {
		  				  send_stat = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 363b 	strb.w	r3, [r7, #1595]	@ 0x63b
		  				  myprintf("Stat changed!!\r\n");
 800116e:	489f      	ldr	r0, [pc, #636]	@ (80013ec <main+0x990>)
 8001170:	f7ff f88e 	bl	8000290 <myprintf>
		  		  for(int idx = 0; idx<msg_type.lts; idx++){
 8001174:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 8001178:	3301      	adds	r3, #1
 800117a:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 800117e:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001182:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8001186:	7a1b      	ldrb	r3, [r3, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 800118e:	4293      	cmp	r3, r2
 8001190:	dbd4      	blt.n	800113c <main+0x6e0>
		  			  }
		  		  }
		  	  }

		  	  //Marks the set bit
		  	  if(curr_pkt != NULL && msg_type.idx < 8){
 8001192:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01c      	beq.n	80011d4 <main+0x778>
 800119a:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 800119e:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80011a2:	7a5b      	ldrb	r3, [r3, #9]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	d815      	bhi.n	80011d4 <main+0x778>
		  		  curr_pkt[1] |= 1U << (7-msg_type.idx);
 80011a8:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 80011ac:	3301      	adds	r3, #1
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 80011b4:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80011b8:	7a5b      	ldrb	r3, [r3, #9]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2201      	movs	r2, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 80011ca:	3301      	adds	r3, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e018      	b.n	8001206 <main+0x7aa>
		  		  //myprintf("1(%u)\r\n", curr_pkt[1]);
		  	  } else if (curr_pkt != NULL){
 80011d4:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d014      	beq.n	8001206 <main+0x7aa>
		  		  curr_pkt[2] |= 1U << (15-msg_type.idx);
 80011dc:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 80011e0:	3302      	adds	r3, #2
 80011e2:	7819      	ldrb	r1, [r3, #0]
 80011e4:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 80011e8:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 80011ec:	7a5b      	ldrb	r3, [r3, #9]
 80011ee:	f1c3 030f 	rsb	r3, r3, #15
 80011f2:	2201      	movs	r2, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 80011fe:	3302      	adds	r3, #2
 8001200:	430a      	orrs	r2, r1
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
		  		  //myprintf("2(%u)\r\n", curr_pkt[2]);
		  	  }

		  	  //Adds the message's data to the packet
		  	  if(curr_pkt != NULL){
 8001206:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d025      	beq.n	800125a <main+0x7fe>
		  		  for(int idx = 0; idx<msg_type.lts; idx++){
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8001214:	e017      	b.n	8001246 <main+0x7ea>
		  			  curr_pkt[msg_type.start+idx] = RxData[idx];
 8001216:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 800121a:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800121e:	78db      	ldrb	r3, [r3, #3]
 8001220:	461a      	mov	r2, r3
 8001222:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 8001226:	4413      	add	r3, r2
 8001228:	461a      	mov	r2, r3
 800122a:	f8d7 363c 	ldr.w	r3, [r7, #1596]	@ 0x63c
 800122e:	4413      	add	r3, r2
 8001230:	496f      	ldr	r1, [pc, #444]	@ (80013f0 <main+0x994>)
 8001232:	f8d7 262c 	ldr.w	r2, [r7, #1580]	@ 0x62c
 8001236:	440a      	add	r2, r1
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
		  		  for(int idx = 0; idx<msg_type.lts; idx++){
 800123c:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 8001240:	3301      	adds	r3, #1
 8001242:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8001246:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 800124a:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 800124e:	7a1b      	ldrb	r3, [r3, #8]
 8001250:	461a      	mov	r2, r3
 8001252:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 8001256:	4293      	cmp	r3, r2
 8001258:	dbdd      	blt.n	8001216 <main+0x7ba>
	  }



	  //Checks which messages to send
	  curr_time = HAL_GetTick();
 800125a:	f000 fccd 	bl	8001bf8 <HAL_GetTick>
 800125e:	f8c7 05e8 	str.w	r0, [r7, #1512]	@ 0x5e8
	  if(send_stat == 1 || curr_time - stat_last_time > stat.speed*100){
 8001262:	f897 363b 	ldrb.w	r3, [r7, #1595]	@ 0x63b
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00b      	beq.n	8001282 <main+0x826>
 800126a:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 800126e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	4a5c      	ldr	r2, [pc, #368]	@ (80013e8 <main+0x98c>)
 8001276:	6852      	ldr	r2, [r2, #4]
 8001278:	2164      	movs	r1, #100	@ 0x64
 800127a:	fb01 f202 	mul.w	r2, r1, r2
 800127e:	4293      	cmp	r3, r2
 8001280:	d943      	bls.n	800130a <main+0x8ae>
		  send_stat = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	f887 363b 	strb.w	r3, [r7, #1595]	@ 0x63b
		  ok_notok = HAL_UART_Transmit(&huart1, stat_pkt, stat.data_len+3, 100);
 8001288:	4b57      	ldr	r3, [pc, #348]	@ (80013e8 <main+0x98c>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	3303      	adds	r3, #3
 800128e:	b29a      	uxth	r2, r3
 8001290:	2364      	movs	r3, #100	@ 0x64
 8001292:	f8d7 1604 	ldr.w	r1, [r7, #1540]	@ 0x604
 8001296:	4857      	ldr	r0, [pc, #348]	@ (80013f4 <main+0x998>)
 8001298:	f003 feea 	bl	8005070 <HAL_UART_Transmit>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b55      	ldr	r3, [pc, #340]	@ (80013f8 <main+0x99c>)
 80012a2:	701a      	strb	r2, [r3, #0]
		  for(int idx = 0; idx<stat.data_len+3; idx++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 80012aa:	e00e      	b.n	80012ca <main+0x86e>
		  			  myprintf("%2x", stat_pkt[idx]);
 80012ac:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 80012b0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4850      	ldr	r0, [pc, #320]	@ (80013fc <main+0x9a0>)
 80012bc:	f7fe ffe8 	bl	8000290 <myprintf>
		  for(int idx = 0; idx<stat.data_len+3; idx++){
 80012c0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <main+0x98c>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	3302      	adds	r3, #2
 80012d0:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dde9      	ble.n	80012ac <main+0x850>
		  		  }
		  myprintf("\r\n");
 80012d8:	4849      	ldr	r0, [pc, #292]	@ (8001400 <main+0x9a4>)
 80012da:	f7fe ffd9 	bl	8000290 <myprintf>
		  myprintf("lts: (%i)\r\n", stat.data_len+3);
 80012de:	4b42      	ldr	r3, [pc, #264]	@ (80013e8 <main+0x98c>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	3303      	adds	r3, #3
 80012e4:	4619      	mov	r1, r3
 80012e6:	4847      	ldr	r0, [pc, #284]	@ (8001404 <main+0x9a8>)
 80012e8:	f7fe ffd2 	bl	8000290 <myprintf>
		  myprintf("Stat sent!!\r\n");
 80012ec:	4846      	ldr	r0, [pc, #280]	@ (8001408 <main+0x9ac>)
 80012ee:	f7fe ffcf 	bl	8000290 <myprintf>
		  stat_pkt[1] = 0;
 80012f2:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80012f6:	2200      	movs	r2, #0
 80012f8:	705a      	strb	r2, [r3, #1]
		  stat_pkt[2] = 0;
 80012fa:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80012fe:	2200      	movs	r2, #0
 8001300:	709a      	strb	r2, [r3, #2]
		  stat_last_time = curr_time;
 8001302:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 8001306:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
	  }

	  if(curr_time - fast_last_time > fast.speed*100){
 800130a:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 800130e:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4a3d      	ldr	r2, [pc, #244]	@ (800140c <main+0x9b0>)
 8001316:	6852      	ldr	r2, [r2, #4]
 8001318:	2164      	movs	r1, #100	@ 0x64
 800131a:	fb01 f202 	mul.w	r2, r1, r2
 800131e:	4293      	cmp	r3, r2
 8001320:	d939      	bls.n	8001396 <main+0x93a>
		  ok_notok = HAL_UART_Transmit(&huart1, fast_pkt, fast.data_len+3, 100);
 8001322:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <main+0x9b0>)
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	3303      	adds	r3, #3
 8001328:	b29a      	uxth	r2, r3
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	@ 0x5ec
 8001330:	4830      	ldr	r0, [pc, #192]	@ (80013f4 <main+0x998>)
 8001332:	f003 fe9d 	bl	8005070 <HAL_UART_Transmit>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <main+0x99c>)
 800133c:	701a      	strb	r2, [r3, #0]
		  for(int idx = 0; idx<fast.data_len+3; idx++){
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8001344:	e00e      	b.n	8001364 <main+0x908>
			  myprintf("%2x", fast_pkt[idx]);
 8001346:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	@ 0x5ec
 800134a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	4829      	ldr	r0, [pc, #164]	@ (80013fc <main+0x9a0>)
 8001356:	f7fe ff9b 	bl	8000290 <myprintf>
		  for(int idx = 0; idx<fast.data_len+3; idx++){
 800135a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8001364:	4b29      	ldr	r3, [pc, #164]	@ (800140c <main+0x9b0>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	3302      	adds	r3, #2
 800136a:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 800136e:	429a      	cmp	r2, r3
 8001370:	dde9      	ble.n	8001346 <main+0x8ea>
		  }
		  myprintf("\r\n");
 8001372:	4823      	ldr	r0, [pc, #140]	@ (8001400 <main+0x9a4>)
 8001374:	f7fe ff8c 	bl	8000290 <myprintf>
		  myprintf("Fast sent!!\r\n");
 8001378:	4825      	ldr	r0, [pc, #148]	@ (8001410 <main+0x9b4>)
 800137a:	f7fe ff89 	bl	8000290 <myprintf>
		  med_pkt[1] = 0;
 800137e:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8001382:	2200      	movs	r2, #0
 8001384:	705a      	strb	r2, [r3, #1]
		  med_pkt[2] = 0;
 8001386:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 800138a:	2200      	movs	r2, #0
 800138c:	709a      	strb	r2, [r3, #2]
		  fast_last_time = curr_time;
 800138e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 8001392:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
	  }

	  if(curr_time - med_last_time > med.speed*100){
 8001396:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 800139a:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <main+0x9b8>)
 80013a2:	6852      	ldr	r2, [r2, #4]
 80013a4:	2164      	movs	r1, #100	@ 0x64
 80013a6:	fb01 f202 	mul.w	r2, r1, r2
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f67f ae0a 	bls.w	8000fc4 <main+0x568>
		  ok_notok = HAL_UART_Transmit(&huart1, med_pkt, med.data_len+3, 100);
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <main+0x9b8>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	3303      	adds	r3, #3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	2364      	movs	r3, #100	@ 0x64
 80013ba:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	@ 0x5f4
 80013be:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <main+0x998>)
 80013c0:	f003 fe56 	bl	8005070 <HAL_UART_Transmit>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <main+0x99c>)
 80013ca:	701a      	strb	r2, [r3, #0]
		  med_pkt[1] = 0;
 80013cc:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80013d0:	2200      	movs	r2, #0
 80013d2:	705a      	strb	r2, [r3, #1]
		  med_pkt[2] = 0;
 80013d4:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80013d8:	2200      	movs	r2, #0
 80013da:	709a      	strb	r2, [r3, #2]
		  med_last_time = curr_time;
 80013dc:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80013e0:	f8c7 3640 	str.w	r3, [r7, #1600]	@ 0x640
	  fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0);
 80013e4:	e5ee      	b.n	8000fc4 <main+0x568>
 80013e6:	bf00      	nop
 80013e8:	200002bc 	.word	0x200002bc
 80013ec:	08009874 	.word	0x08009874
 80013f0:	20000294 	.word	0x20000294
 80013f4:	20000150 	.word	0x20000150
 80013f8:	20000000 	.word	0x20000000
 80013fc:	08009888 	.word	0x08009888
 8001400:	080095bc 	.word	0x080095bc
 8001404:	0800988c 	.word	0x0800988c
 8001408:	08009898 	.word	0x08009898
 800140c:	200002ac 	.word	0x200002ac
 8001410:	080098a8 	.word	0x080098a8
 8001414:	2000029c 	.word	0x2000029c

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a6      	sub	sp, #152	@ 0x98
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001422:	2228      	movs	r2, #40	@ 0x28
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f007 fc38 	bl	8008c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2258      	movs	r2, #88	@ 0x58
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f007 fc2a 	bl	8008c9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	2301      	movs	r3, #1
 800144e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001450:	2310      	movs	r3, #16
 8001452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800145c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001464:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f9e4 	bl	8002844 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001482:	f000 f979 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2302      	movs	r3, #2
 800148c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001496:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014a0:	2102      	movs	r1, #2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fa22 	bl	80038ec <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ae:	f000 f963 	bl	8001778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80014b2:	2303      	movs	r3, #3
 80014b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fc33 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80014cc:	f000 f954 	bl	8001778 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3798      	adds	r7, #152	@ 0x98
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_CAN_Init+0x64>)
 80014de:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <MX_CAN_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_CAN_Init+0x64>)
 80014e4:	2209      	movs	r2, #9
 80014e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_CAN_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_CAN_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_CAN_Init+0x64>)
 80014f6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80014fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_CAN_Init+0x64>)
 80014fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001502:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <MX_CAN_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_CAN_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_CAN_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_CAN_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_CAN_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_CAN_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_CAN_Init+0x64>)
 800152a:	f000 fb95 	bl	8001c58 <HAL_CAN_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001534:	f000 f920 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000c4 	.word	0x200000c4
 8001540:	40006400 	.word	0x40006400

08001544 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_SPI2_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <MX_SPI2_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001550:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <MX_SPI2_Init+0x74>)
 800155e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001562:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_SPI2_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001576:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_SPI2_Init+0x74>)
 800157a:	2230      	movs	r2, #48	@ 0x30
 800157c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_SPI2_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001592:	2207      	movs	r2, #7
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_SPI2_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_SPI2_Init+0x74>)
 800159e:	2208      	movs	r2, #8
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_SPI2_Init+0x74>)
 80015a4:	f002 fde0 	bl	8004168 <HAL_SPI_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f8e3 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000ec 	.word	0x200000ec
 80015bc:	40003800 	.word	0x40003800

080015c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015c6:	4a15      	ldr	r2, [pc, #84]	@ (800161c <MX_USART1_UART_Init+0x5c>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 8001606:	f003 fce5 	bl	8004fd4 <HAL_UART_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001610:	f000 f8b2 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000150 	.word	0x20000150
 800161c:	40013800 	.word	0x40013800

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <MX_USART2_UART_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001664:	f003 fcb6 	bl	8004fd4 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 f883 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200001d8 	.word	0x200001d8
 800167c:	40004400 	.word	0x40004400

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b35      	ldr	r3, [pc, #212]	@ (800176c <MX_GPIO_Init+0xec>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a34      	ldr	r2, [pc, #208]	@ (800176c <MX_GPIO_Init+0xec>)
 800169c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b32      	ldr	r3, [pc, #200]	@ (800176c <MX_GPIO_Init+0xec>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <MX_GPIO_Init+0xec>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a2e      	ldr	r2, [pc, #184]	@ (800176c <MX_GPIO_Init+0xec>)
 80016b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <MX_GPIO_Init+0xec>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b29      	ldr	r3, [pc, #164]	@ (800176c <MX_GPIO_Init+0xec>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a28      	ldr	r2, [pc, #160]	@ (800176c <MX_GPIO_Init+0xec>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <MX_GPIO_Init+0xec>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <MX_GPIO_Init+0xec>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a22      	ldr	r2, [pc, #136]	@ (800176c <MX_GPIO_Init+0xec>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <MX_GPIO_Init+0xec>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2120      	movs	r1, #32
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fe:	f001 f86f 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2102      	movs	r1, #2
 8001706:	481a      	ldr	r0, [pc, #104]	@ (8001770 <MX_GPIO_Init+0xf0>)
 8001708:	f001 f86a 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001712:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4814      	ldr	r0, [pc, #80]	@ (8001774 <MX_GPIO_Init+0xf4>)
 8001724:	f000 fed2 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 8001728:	2320      	movs	r3, #32
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001742:	f000 fec3 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001746:	2302      	movs	r3, #2
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4804      	ldr	r0, [pc, #16]	@ (8001770 <MX_GPIO_Init+0xf0>)
 800175e:	f000 feb5 	bl	80024cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	48000400 	.word	0x48000400
 8001774:	48000800 	.word	0x48000800

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x44>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x44>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x44>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x44>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ba:	2007      	movs	r0, #7
 80017bc:	f000 fe52 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_CAN_MspInit+0x7c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d128      	bne.n	8001840 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_CAN_MspInit+0x80>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a16      	ldr	r2, [pc, #88]	@ (800184c <HAL_CAN_MspInit+0x80>)
 80017f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_CAN_MspInit+0x80>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_CAN_MspInit+0x80>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_CAN_MspInit+0x80>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001810:	6153      	str	r3, [r2, #20]
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_CAN_MspInit+0x80>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800181e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001830:	2309      	movs	r3, #9
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <HAL_CAN_MspInit+0x84>)
 800183c:	f000 fe46 	bl	80024cc <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	@ 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40006400 	.word	0x40006400
 800184c:	40021000 	.word	0x40021000
 8001850:	48000400 	.word	0x48000400

08001854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <HAL_SPI_MspInit+0x7c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d128      	bne.n	80018c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_SPI_MspInit+0x80>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <HAL_SPI_MspInit+0x80>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_SPI_MspInit+0x80>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_SPI_MspInit+0x80>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4a10      	ldr	r2, [pc, #64]	@ (80018d4 <HAL_SPI_MspInit+0x80>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001898:	6153      	str	r3, [r2, #20]
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_SPI_MspInit+0x80>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b8:	2305      	movs	r3, #5
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <HAL_SPI_MspInit+0x84>)
 80018c4:	f000 fe02 	bl	80024cc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40003800 	.word	0x40003800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000400 	.word	0x48000400

080018dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	@ 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3d      	ldr	r2, [pc, #244]	@ (80019f0 <HAL_UART_MspInit+0x114>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d146      	bne.n	800198c <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fe:	4b3d      	ldr	r3, [pc, #244]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a3c      	ldr	r2, [pc, #240]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b3a      	ldr	r3, [pc, #232]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b37      	ldr	r3, [pc, #220]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a36      	ldr	r2, [pc, #216]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 800191c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001946:	2330      	movs	r3, #48	@ 0x30
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001956:	2307      	movs	r3, #7
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4825      	ldr	r0, [pc, #148]	@ (80019f8 <HAL_UART_MspInit+0x11c>)
 8001962:	f000 fdb3 	bl	80024cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001966:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001978:	2307      	movs	r3, #7
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001986:	f000 fda1 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198a:	e02d      	b.n	80019e8 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1a      	ldr	r2, [pc, #104]	@ (80019fc <HAL_UART_MspInit+0x120>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d128      	bne.n	80019e8 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	6153      	str	r3, [r2, #20]
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_UART_MspInit+0x118>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019c6:	230c      	movs	r3, #12
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d6:	2307      	movs	r3, #7
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e4:	f000 fd72 	bl	80024cc <HAL_GPIO_Init>
}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	@ 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800
 80019fc:	40004400 	.word	0x40004400

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <NMI_Handler+0x4>

08001a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <MemManage_Handler+0x4>

08001a18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f000 f8bb 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f007 f90c 	bl	8008cac <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20010000 	.word	0x20010000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200003cc 	.word	0x200003cc
 8001ac8:	20000560 	.word	0x20000560

08001acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af4:	f7ff ffea 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	@ (8001b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <LoopForever+0xe>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	@ (8001b3c <LoopForever+0x16>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f007 f8cb 	bl	8008cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7fe ff9b 	bl	8000a5c <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001b34:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 8001b38:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001b3c:	2000055c 	.word	0x2000055c

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_Init+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_Init+0x28>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 fc85 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fe10 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fc8f 	bl	80024b2 <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 fc65 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000034 	.word	0x20000034
 8001bc8:	2000003c 	.word	0x2000003c
 8001bcc:	20000038 	.word	0x20000038

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000003c 	.word	0x2000003c
 8001bf4:	200003d0 	.word	0x200003d0

08001bf8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001bfc:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200003d0 	.word	0x200003d0

08001c10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000003c 	.word	0x2000003c

08001c58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0ed      	b.n	8001e46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fda8 	bl	80017cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c8c:	f7ff ffb4 	bl	8001bf8 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c92:	e012      	b.n	8001cba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c94:	f7ff ffb0 	bl	8001bf8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b0a      	cmp	r3, #10
 8001ca0:	d90b      	bls.n	8001cba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0c5      	b.n	8001e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0e5      	beq.n	8001c94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0202 	bic.w	r2, r2, #2
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd8:	f7ff ff8e 	bl	8001bf8 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cde:	e012      	b.n	8001d06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce0:	f7ff ff8a 	bl	8001bf8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b0a      	cmp	r3, #10
 8001cec:	d90b      	bls.n	8001d06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e09f      	b.n	8001e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e5      	bne.n	8001ce0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e1b      	ldrb	r3, [r3, #24]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7e5b      	ldrb	r3, [r3, #25]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e007      	b.n	8001d68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e9b      	ldrb	r3, [r3, #26]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0220 	orr.w	r2, r2, #32
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0220 	bic.w	r2, r2, #32
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7edb      	ldrb	r3, [r3, #27]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0210 	bic.w	r2, r2, #16
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e007      	b.n	8001dbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0210 	orr.w	r2, r2, #16
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d108      	bne.n	8001dd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0208 	bic.w	r2, r2, #8
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7f5b      	ldrb	r3, [r3, #29]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d108      	bne.n	8001e00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0204 	orr.w	r2, r2, #4
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0204 	bic.w	r2, r2, #4
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	ea42 0103 	orr.w	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b087      	sub	sp, #28
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_ConfigFilter+0x26>
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 80aa 	bne.w	8001fc8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d123      	bne.n	8001ef6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ed0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3248      	adds	r2, #72	@ 0x48
 8001ed6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eec:	6979      	ldr	r1, [r7, #20]
 8001eee:	3348      	adds	r3, #72	@ 0x48
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d122      	bne.n	8001f44 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3248      	adds	r2, #72	@ 0x48
 8001f24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f3a:	6979      	ldr	r1, [r7, #20]
 8001f3c:	3348      	adds	r3, #72	@ 0x48
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f5e:	e007      	b.n	8001f70 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f8a:	e007      	b.n	8001f9c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fba:	f023 0201 	bic.w	r2, r3, #1
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e006      	b.n	8001fd6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d12e      	bne.n	8002054 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800200e:	f7ff fdf3 	bl	8001bf8 <HAL_GetTick>
 8002012:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002014:	e012      	b.n	800203c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002016:	f7ff fdef 	bl	8001bf8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b0a      	cmp	r3, #10
 8002022:	d90b      	bls.n	800203c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2205      	movs	r2, #5
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e012      	b.n	8002062 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e5      	bne.n	8002016 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e006      	b.n	8002062 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800206a:	b480      	push	{r7}
 800206c:	b087      	sub	sp, #28
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d003      	beq.n	800208e <HAL_CAN_GetRxMessage+0x24>
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 8103 	bne.w	8002294 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10e      	bne.n	80020b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0f7      	b.n	80022a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0e8      	b.n	80022a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	331b      	adds	r3, #27
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0204 	and.w	r2, r3, #4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	331b      	adds	r3, #27
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4413      	add	r3, r2
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0d5b      	lsrs	r3, r3, #21
 80020fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00b      	b.n	8002120 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	331b      	adds	r3, #27
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	331b      	adds	r3, #27
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0202 	and.w	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	331b      	adds	r3, #27
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2208      	movs	r2, #8
 8002152:	611a      	str	r2, [r3, #16]
 8002154:	e00b      	b.n	800216e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	331b      	adds	r3, #27
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 020f 	and.w	r2, r3, #15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	331b      	adds	r3, #27
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b2da      	uxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	331b      	adds	r3, #27
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4413      	add	r3, r2
 80021be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0a1a      	lsrs	r2, r3, #8
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0c1a      	lsrs	r2, r3, #16
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3302      	adds	r3, #2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e1a      	lsrs	r2, r3, #24
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3303      	adds	r3, #3
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	3304      	adds	r3, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0a1a      	lsrs	r2, r3, #8
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	3305      	adds	r3, #5
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0c1a      	lsrs	r2, r3, #16
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3306      	adds	r3, #6
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0e1a      	lsrs	r2, r3, #24
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	3307      	adds	r3, #7
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0220 	orr.w	r2, r2, #32
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	e007      	b.n	8002290 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e006      	b.n	80022a2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d002      	beq.n	80022d0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d10f      	bne.n	80022f0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e005      	b.n	80022f0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff47 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff5c 	bl	8002348 <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffb0 	bl	8002420 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	e160      	b.n	800279e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8152 	beq.w	8002798 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d005      	beq.n	800250c <HAL_GPIO_Init+0x40>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d130      	bne.n	800256e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002542:	2201      	movs	r2, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0201 	and.w	r2, r3, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b03      	cmp	r3, #3
 8002578:	d017      	beq.n	80025aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d123      	bne.n	80025fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	08da      	lsrs	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3208      	adds	r2, #8
 80025f8:	6939      	ldr	r1, [r7, #16]
 80025fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80ac 	beq.w	8002798 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002640:	4b5e      	ldr	r3, [pc, #376]	@ (80027bc <HAL_GPIO_Init+0x2f0>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a5d      	ldr	r2, [pc, #372]	@ (80027bc <HAL_GPIO_Init+0x2f0>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b5b      	ldr	r3, [pc, #364]	@ (80027bc <HAL_GPIO_Init+0x2f0>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002658:	4a59      	ldr	r2, [pc, #356]	@ (80027c0 <HAL_GPIO_Init+0x2f4>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002682:	d025      	beq.n	80026d0 <HAL_GPIO_Init+0x204>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a4f      	ldr	r2, [pc, #316]	@ (80027c4 <HAL_GPIO_Init+0x2f8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d01f      	beq.n	80026cc <HAL_GPIO_Init+0x200>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a4e      	ldr	r2, [pc, #312]	@ (80027c8 <HAL_GPIO_Init+0x2fc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d019      	beq.n	80026c8 <HAL_GPIO_Init+0x1fc>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a4d      	ldr	r2, [pc, #308]	@ (80027cc <HAL_GPIO_Init+0x300>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_GPIO_Init+0x1f8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a4c      	ldr	r2, [pc, #304]	@ (80027d0 <HAL_GPIO_Init+0x304>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00d      	beq.n	80026c0 <HAL_GPIO_Init+0x1f4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a4b      	ldr	r2, [pc, #300]	@ (80027d4 <HAL_GPIO_Init+0x308>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0x1f0>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a4a      	ldr	r2, [pc, #296]	@ (80027d8 <HAL_GPIO_Init+0x30c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_GPIO_Init+0x1ec>
 80026b4:	2306      	movs	r3, #6
 80026b6:	e00c      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026b8:	2307      	movs	r3, #7
 80026ba:	e00a      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026bc:	2305      	movs	r3, #5
 80026be:	e008      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e006      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026c4:	2303      	movs	r3, #3
 80026c6:	e004      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e002      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_GPIO_Init+0x206>
 80026d0:	2300      	movs	r3, #0
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	f002 0203 	and.w	r2, r2, #3
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	4093      	lsls	r3, r2
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e2:	4937      	ldr	r1, [pc, #220]	@ (80027c0 <HAL_GPIO_Init+0x2f4>)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f0:	4b3a      	ldr	r3, [pc, #232]	@ (80027dc <HAL_GPIO_Init+0x310>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002714:	4a31      	ldr	r2, [pc, #196]	@ (80027dc <HAL_GPIO_Init+0x310>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271a:	4b30      	ldr	r3, [pc, #192]	@ (80027dc <HAL_GPIO_Init+0x310>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800273e:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <HAL_GPIO_Init+0x310>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002744:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <HAL_GPIO_Init+0x310>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002768:	4a1c      	ldr	r2, [pc, #112]	@ (80027dc <HAL_GPIO_Init+0x310>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_GPIO_Init+0x310>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002792:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <HAL_GPIO_Init+0x310>)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f ae97 	bne.w	80024dc <HAL_GPIO_Init+0x10>
  }
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010000 	.word	0x40010000
 80027c4:	48000400 	.word	0x48000400
 80027c8:	48000800 	.word	0x48000800
 80027cc:	48000c00 	.word	0x48000c00
 80027d0:	48001000 	.word	0x48001000
 80027d4:	48001400 	.word	0x48001400
 80027d8:	48001800 	.word	0x48001800
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43d9      	mvns	r1, r3
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	400b      	ands	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800284a:	af00      	add	r7, sp, #0
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002854:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f001 b83a 	b.w	80038de <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 816f 	beq.w	8002b5e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002880:	4bb5      	ldr	r3, [pc, #724]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b04      	cmp	r3, #4
 800288a:	d00c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800288c:	4bb2      	ldr	r3, [pc, #712]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d15c      	bne.n	8002952 <HAL_RCC_OscConfig+0x10e>
 8002898:	4baf      	ldr	r3, [pc, #700]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d155      	bne.n	8002952 <HAL_RCC_OscConfig+0x10e>
 80028a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_OscConfig+0x94>
 80028d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e015      	b.n	8002904 <HAL_RCC_OscConfig+0xc0>
 80028d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028dc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80028ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028f0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002900:	4b95      	ldr	r3, [pc, #596]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002908:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800290c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002910:	fa92 f2a2 	rbit	r2, r2
 8002914:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002918:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8111 	beq.w	8002b5c <HAL_RCC_OscConfig+0x318>
 800293a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 8108 	bne.w	8002b5c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f000 bfc6 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002956:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x12e>
 8002964:	4b7c      	ldr	r3, [pc, #496]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a7b      	ldr	r2, [pc, #492]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e036      	b.n	80029e0 <HAL_RCC_OscConfig+0x19c>
 8002972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002976:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x158>
 8002982:	4b75      	ldr	r3, [pc, #468]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a74      	ldr	r2, [pc, #464]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b72      	ldr	r3, [pc, #456]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a71      	ldr	r2, [pc, #452]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002994:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e021      	b.n	80029e0 <HAL_RCC_OscConfig+0x19c>
 800299c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x184>
 80029ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a69      	ldr	r2, [pc, #420]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b67      	ldr	r3, [pc, #412]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a66      	ldr	r2, [pc, #408]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x19c>
 80029c8:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a62      	ldr	r2, [pc, #392]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b60      	ldr	r3, [pc, #384]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029de:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d059      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7ff f902 	bl	8001bf8 <HAL_GetTick>
 80029f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029fa:	f7ff f8fd 	bl	8001bf8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d902      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	f000 bf67 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
 8002a10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a14:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002a24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_OscConfig+0x1fe>
 8002a3c:	4b46      	ldr	r3, [pc, #280]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x22a>
 8002a42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a46:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a72:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002a76:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002a82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ab      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b6>
 8002aa2:	e05c      	b.n	8002b5e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff f8a8 	bl	8001bf8 <HAL_GetTick>
 8002aa8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aae:	f7ff f8a3 	bl	8001bf8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d902      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f000 bf0d 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
 8002ac4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002ad8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2b2>
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x2de>
 8002af6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002afa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002b0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b0e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002b12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_RCC_OscConfig+0x314>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b26:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002b2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002b2e:	fa92 f2a2 	rbit	r2, r2
 8002b32:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002b36:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f042 0220 	orr.w	r2, r2, #32
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f002 021f 	and.w	r2, r2, #31
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ab      	bne.n	8002aae <HAL_RCC_OscConfig+0x26a>
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_OscConfig+0x31a>
 8002b58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 817f 	beq.w	8002e72 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b74:	4ba7      	ldr	r3, [pc, #668]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b80:	4ba4      	ldr	r3, [pc, #656]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d173      	bne.n	8002c74 <HAL_RCC_OscConfig+0x430>
 8002b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b98:	d16c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x430>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002bac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0x386>
 8002bc4:	4b93      	ldr	r3, [pc, #588]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e013      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3ae>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002be2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bee:	4b89      	ldr	r3, [pc, #548]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002bf8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002c04:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0220 	orr.w	r2, r2, #32
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3f6>
 8002c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d002      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f000 be52 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	21f8      	movs	r1, #248	@ 0xf8
 8002c50:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002c58:	fa91 f1a1 	rbit	r1, r1
 8002c5c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002c60:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c64:	fab1 f181 	clz	r1, r1
 8002c68:	b2c9      	uxtb	r1, r1
 8002c6a:	408b      	lsls	r3, r1
 8002c6c:	4969      	ldr	r1, [pc, #420]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e0fe      	b.n	8002e72 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8088 	beq.w	8002d96 <HAL_RCC_OscConfig+0x552>
 8002c86:	2301      	movs	r3, #1
 8002c88:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002c98:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ca6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	461a      	mov	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe ffa1 	bl	8001bf8 <HAL_GetTick>
 8002cb6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe ff9c 	bl	8001bf8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	f000 be06 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002ce4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_OscConfig+0x4be>
 8002cfc:	4b45      	ldr	r3, [pc, #276]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	e013      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e6>
 8002d02:	2302      	movs	r3, #2
 8002d04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002d14:	2302      	movs	r3, #2
 8002d16:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002d1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d26:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002d30:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002d34:	fa92 f2a2 	rbit	r2, r2
 8002d38:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002d3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0af      	beq.n	8002cbc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	21f8      	movs	r1, #248	@ 0xf8
 8002d72:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002d7a:	fa91 f1a1 	rbit	r1, r1
 8002d7e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002d82:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d86:	fab1 f181 	clz	r1, r1
 8002d8a:	b2c9      	uxtb	r1, r1
 8002d8c:	408b      	lsls	r3, r1
 8002d8e:	4921      	ldr	r1, [pc, #132]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e06d      	b.n	8002e72 <HAL_RCC_OscConfig+0x62e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002da8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002db6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ff19 	bl	8001bf8 <HAL_GetTick>
 8002dc6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fe ff14 	bl	8001bf8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d902      	bls.n	8002de2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	f000 bd7e 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5d4>
 8002e0c:	4b01      	ldr	r3, [pc, #4]	@ (8002e14 <HAL_RCC_OscConfig+0x5d0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	e016      	b.n	8002e40 <HAL_RCC_OscConfig+0x5fc>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002e3c:	4bbf      	ldr	r3, [pc, #764]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2202      	movs	r2, #2
 8002e42:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002e46:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002e4a:	fa92 f2a2 	rbit	r2, r2
 8002e4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002e52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ac      	bne.n	8002dcc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8113 	beq.w	80030ae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x74e>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8003140 <HAL_RCC_OscConfig+0x8fc>)
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fe99 	bl	8001bf8 <HAL_GetTick>
 8002ec6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fe94 	bl	8001bf8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d902      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	f000 bcfe 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f02:	2202      	movs	r2, #2
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	fa93 f2a3 	rbit	r2, r3
 8002f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b7e      	ldr	r3, [pc, #504]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 8002f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f4e:	2102      	movs	r1, #2
 8002f50:	6019      	str	r1, [r3, #0]
 8002f52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	fa93 f1a3 	rbit	r1, r3
 8002f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f68:	6019      	str	r1, [r3, #0]
  return result;
 8002f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d09d      	beq.n	8002ecc <HAL_RCC_OscConfig+0x688>
 8002f90:	e08d      	b.n	80030ae <HAL_RCC_OscConfig+0x86a>
 8002f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fb4:	601a      	str	r2, [r3, #0]
  return result;
 8002fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fbe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b5d      	ldr	r3, [pc, #372]	@ (8003140 <HAL_RCC_OscConfig+0x8fc>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fe10 	bl	8001bf8 <HAL_GetTick>
 8002fd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe fe0b 	bl	8001bf8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f000 bc75 	b.w	80038de <HAL_RCC_OscConfig+0x109a>
 8002ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003004:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003012:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003020:	2202      	movs	r2, #2
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003028:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003036:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003040:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003044:	2202      	movs	r2, #2
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800305a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800305e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b36      	ldr	r3, [pc, #216]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 8003062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003068:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800306c:	2102      	movs	r1, #2
 800306e:	6019      	str	r1, [r3, #0]
 8003070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003074:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f1a3 	rbit	r1, r3
 800307e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003082:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003086:	6019      	str	r1, [r3, #0]
  return result;
 8003088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d197      	bne.n	8002fde <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 81a5 	beq.w	800340e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	4b19      	ldr	r3, [pc, #100]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a18      	ldr	r2, [pc, #96]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b16      	ldr	r3, [pc, #88]	@ (800313c <HAL_RCC_OscConfig+0x8f8>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	4b0f      	ldr	r3, [pc, #60]	@ (8003144 <HAL_RCC_OscConfig+0x900>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d121      	bne.n	8003154 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <HAL_RCC_OscConfig+0x900>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0b      	ldr	r2, [pc, #44]	@ (8003144 <HAL_RCC_OscConfig+0x900>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311c:	f7fe fd6c 	bl	8001bf8 <HAL_GetTick>
 8003120:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e010      	b.n	8003148 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7fe fd67 	bl	8001bf8 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d908      	bls.n	8003148 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e3d1      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	10908120 	.word	0x10908120
 8003144:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b8d      	ldr	r3, [pc, #564]	@ (8003380 <HAL_RCC_OscConfig+0xb3c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0e8      	beq.n	8003126 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003158:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x92e>
 8003164:	4b87      	ldr	r3, [pc, #540]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a86      	ldr	r2, [pc, #536]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e035      	b.n	80031de <HAL_RCC_OscConfig+0x99a>
 8003172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003176:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x958>
 8003182:	4b80      	ldr	r3, [pc, #512]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4a7f      	ldr	r2, [pc, #508]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6213      	str	r3, [r2, #32]
 800318e:	4b7d      	ldr	r3, [pc, #500]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4a7c      	ldr	r2, [pc, #496]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 8003194:	f023 0304 	bic.w	r3, r3, #4
 8003198:	6213      	str	r3, [r2, #32]
 800319a:	e020      	b.n	80031de <HAL_RCC_OscConfig+0x99a>
 800319c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x982>
 80031ac:	4b75      	ldr	r3, [pc, #468]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a74      	ldr	r2, [pc, #464]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b72      	ldr	r3, [pc, #456]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a71      	ldr	r2, [pc, #452]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x99a>
 80031c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8081 	beq.w	80032f2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fd02 	bl	8001bf8 <HAL_GetTick>
 80031f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe fcfd 	bl	8001bf8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e365      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
 8003212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003216:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800321a:	2202      	movs	r2, #2
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003222:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003230:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003262:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0xa3a>
 8003278:	4b42      	ldr	r3, [pc, #264]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	e013      	b.n	80032a6 <HAL_RCC_OscConfig+0xa62>
 800327e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003282:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003286:	2202      	movs	r2, #2
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800328e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	4b38      	ldr	r3, [pc, #224]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032ae:	2102      	movs	r1, #2
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032b6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	fa92 f1a2 	rbit	r1, r2
 80032c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032c4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80032c8:	6011      	str	r1, [r2, #0]
  return result;
 80032ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ce:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fab2 f282 	clz	r2, r2
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f002 021f 	and.w	r2, r2, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d084      	beq.n	80031fa <HAL_RCC_OscConfig+0x9b6>
 80032f0:	e083      	b.n	80033fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fe fc81 	bl	8001bf8 <HAL_GetTick>
 80032f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe fc7c 	bl	8001bf8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e2e4      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
 8003314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003318:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800331c:	2202      	movs	r2, #2
 800331e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003324:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	fa93 f2a3 	rbit	r2, r3
 800332e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003332:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003340:	2202      	movs	r2, #2
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003348:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003356:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800335a:	601a      	str	r2, [r3, #0]
  return result;
 800335c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003360:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003364:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0xb44>
 800337a:	4b02      	ldr	r3, [pc, #8]	@ (8003384 <HAL_RCC_OscConfig+0xb40>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	e017      	b.n	80033b0 <HAL_RCC_OscConfig+0xb6c>
 8003380:	40007000 	.word	0x40007000
 8003384:	40021000 	.word	0x40021000
 8003388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003390:	2202      	movs	r2, #2
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003398:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	4bb3      	ldr	r3, [pc, #716]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033b8:	2102      	movs	r1, #2
 80033ba:	6011      	str	r1, [r2, #0]
 80033bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	fa92 f1a2 	rbit	r1, r2
 80033ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033ce:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80033d2:	6011      	str	r1, [r2, #0]
  return result;
 80033d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033d8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d180      	bne.n	80032fc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033fa:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003402:	4b9e      	ldr	r3, [pc, #632]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4a9d      	ldr	r2, [pc, #628]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 8003408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800340c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003412:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 825e 	beq.w	80038dc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003420:	4b96      	ldr	r3, [pc, #600]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	f000 821f 	beq.w	800386c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003432:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b02      	cmp	r3, #2
 800343c:	f040 8170 	bne.w	8003720 <HAL_RCC_OscConfig+0xedc>
 8003440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003444:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800344c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003452:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003460:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003464:	601a      	str	r2, [r3, #0]
  return result;
 8003466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800346a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800346e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800347a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	461a      	mov	r2, r3
 8003482:	2300      	movs	r3, #0
 8003484:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe fbb7 	bl	8001bf8 <HAL_GetTick>
 800348a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	e009      	b.n	80034a4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fbb2 	bl	8001bf8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e21c      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
 80034a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0xcaa>
 80034e8:	4b64      	ldr	r3, [pc, #400]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e027      	b.n	800353e <HAL_RCC_OscConfig+0xcfa>
 80034ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003500:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	fa93 f2a3 	rbit	r2, r3
 800350a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003518:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800351c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003526:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003534:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	4b50      	ldr	r3, [pc, #320]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003542:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003546:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003550:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	fa92 f1a2 	rbit	r1, r2
 800355a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800355e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003562:	6011      	str	r1, [r2, #0]
  return result;
 8003564:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003568:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f042 0220 	orr.w	r2, r2, #32
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f002 021f 	and.w	r2, r2, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d182      	bne.n	8003490 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358a:	4b3c      	ldr	r3, [pc, #240]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003596:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	4937      	ldr	r1, [pc, #220]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80035a4:	4b35      	ldr	r3, [pc, #212]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80035ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a19      	ldr	r1, [r3, #32]
 80035b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	492d      	ldr	r1, [pc, #180]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fa93 f2a3 	rbit	r2, r3
 80035e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035f0:	601a      	str	r2, [r3, #0]
  return result;
 80035f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003606:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	461a      	mov	r2, r3
 800360e:	2301      	movs	r3, #1
 8003610:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe faf1 	bl	8001bf8 <HAL_GetTick>
 8003616:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800361a:	e009      	b.n	8003630 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe faec 	bl	8001bf8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e156      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
 8003630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003634:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003638:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003642:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003650:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003654:	601a      	str	r2, [r3, #0]
  return result;
 8003656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800365e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0xe3c>
 8003674:	4b01      	ldr	r3, [pc, #4]	@ (800367c <HAL_RCC_OscConfig+0xe38>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e02a      	b.n	80036d0 <HAL_RCC_OscConfig+0xe8c>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003684:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003688:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800368c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003692:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80036ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	4b86      	ldr	r3, [pc, #536]	@ (80038e8 <HAL_RCC_OscConfig+0x10a4>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	fa92 f1a2 	rbit	r1, r2
 80036ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036f0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80036f4:	6011      	str	r1, [r2, #0]
  return result;
 80036f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036fa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	f43f af7f 	beq.w	800361c <HAL_RCC_OscConfig+0xdd8>
 800371e:	e0dd      	b.n	80038dc <HAL_RCC_OscConfig+0x1098>
 8003720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003724:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800372c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003732:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	fa93 f2a3 	rbit	r2, r3
 800373c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003740:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003744:	601a      	str	r2, [r3, #0]
  return result;
 8003746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800374a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800374e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800375a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe fa47 	bl	8001bf8 <HAL_GetTick>
 800376a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376e:	e009      	b.n	8003784 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe fa42 	bl	8001bf8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ac      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
 8003784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003788:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800378c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003796:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	fa93 f2a3 	rbit	r2, r3
 80037a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80037a8:	601a      	str	r2, [r3, #0]
  return result;
 80037aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80037b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_OscConfig+0xf8a>
 80037c8:	4b47      	ldr	r3, [pc, #284]	@ (80038e8 <HAL_RCC_OscConfig+0x10a4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e027      	b.n	800381e <HAL_RCC_OscConfig+0xfda>
 80037ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80037d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fa93 f2a3 	rbit	r2, r3
 80037ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003806:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003814:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	4b33      	ldr	r3, [pc, #204]	@ (80038e8 <HAL_RCC_OscConfig+0x10a4>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003822:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003826:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800382a:	6011      	str	r1, [r2, #0]
 800382c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003830:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	fa92 f1a2 	rbit	r1, r2
 800383a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800383e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003842:	6011      	str	r1, [r2, #0]
  return result;
 8003844:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003848:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f042 0220 	orr.w	r2, r2, #32
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f002 021f 	and.w	r2, r2, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d182      	bne.n	8003770 <HAL_RCC_OscConfig+0xf2c>
 800386a:	e037      	b.n	80038dc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e02e      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <HAL_RCC_OscConfig+0x10a4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003888:	4b17      	ldr	r3, [pc, #92]	@ (80038e8 <HAL_RCC_OscConfig+0x10a4>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003890:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003894:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800389c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d117      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80038a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80038ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038bc:	429a      	cmp	r2, r3
 80038be:	d10b      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80038c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c4:	f003 020f 	and.w	r2, r3, #15
 80038c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000

080038ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b09e      	sub	sp, #120	@ 0x78
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e162      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b90      	ldr	r3, [pc, #576]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d910      	bls.n	8003934 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b8d      	ldr	r3, [pc, #564]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 0207 	bic.w	r2, r3, #7
 800391a:	498b      	ldr	r1, [pc, #556]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b89      	ldr	r3, [pc, #548]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e14a      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b82      	ldr	r3, [pc, #520]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	497f      	ldr	r1, [pc, #508]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80dc 	beq.w	8003b18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d13c      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xf6>
 8003968:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d102      	bne.n	8003992 <HAL_RCC_ClockConfig+0xa6>
 800398c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	e00f      	b.n	80039b2 <HAL_RCC_ClockConfig+0xc6>
 8003992:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003996:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	667b      	str	r3, [r7, #100]	@ 0x64
 80039a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ae:	4b67      	ldr	r3, [pc, #412]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ba:	fa92 f2a2 	rbit	r2, r2
 80039be:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80039c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039c2:	fab2 f282 	clz	r2, r2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f042 0220 	orr.w	r2, r2, #32
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f002 021f 	and.w	r2, r2, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d17b      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0f3      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d13c      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x178>
 80039ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x128>
 8003a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e00f      	b.n	8003a34 <HAL_RCC_ClockConfig+0x148>
 8003a14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a30:	4b46      	ldr	r3, [pc, #280]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a38:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a3c:	fa92 f2a2 	rbit	r2, r2
 8003a40:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a44:	fab2 f282 	clz	r2, r2
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f042 0220 	orr.w	r2, r2, #32
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	f002 021f 	and.w	r2, r2, #31
 8003a54:	2101      	movs	r1, #1
 8003a56:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d13a      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b2      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
 8003a64:	2302      	movs	r3, #2
 8003a66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x1a0>
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e00d      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1bc>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	2302      	movs	r3, #2
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	4b29      	ldr	r3, [pc, #164]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	61ba      	str	r2, [r7, #24]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	fa92 f2a2 	rbit	r2, r2
 8003ab2:	617a      	str	r2, [r7, #20]
  return result;
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	fab2 f282 	clz	r2, r2
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	f042 0220 	orr.w	r2, r2, #32
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	f002 021f 	and.w	r2, r2, #31
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e079      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	491a      	ldr	r1, [pc, #104]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7fe f886 	bl	8001bf8 <HAL_GetTick>
 8003aec:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7fe f882 	bl	8001bf8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e061      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <HAL_RCC_ClockConfig+0x260>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 020c 	and.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1eb      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d214      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4906      	ldr	r1, [pc, #24]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <HAL_RCC_ClockConfig+0x25c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e040      	b.n	8003bca <HAL_RCC_ClockConfig+0x2de>
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	491a      	ldr	r1, [pc, #104]	@ (8003bd4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4912      	ldr	r1, [pc, #72]	@ (8003bd4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b8e:	f000 f829 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b9c:	22f0      	movs	r2, #240	@ 0xf0
 8003b9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	fa92 f2a2 	rbit	r2, r2
 8003ba6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	fab2 f282 	clz	r2, r2
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	40d3      	lsrs	r3, r2
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_ClockConfig+0x2ec>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bba:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <HAL_RCC_ClockConfig+0x2f0>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bbe:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <HAL_RCC_ClockConfig+0x2f4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd ffd4 	bl	8001b70 <HAL_InitTick>
  
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3778      	adds	r7, #120	@ 0x78
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	080098fc 	.word	0x080098fc
 8003bdc:	20000034 	.word	0x20000034
 8003be0:	20000038 	.word	0x20000038

08003be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d002      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x30>
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0x36>
 8003c12:	e029      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c14:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c16:	613b      	str	r3, [r7, #16]
      break;
 8003c18:	e029      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	0c9b      	lsrs	r3, r3, #18
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c32:	5cd3      	ldrb	r3, [r2, r3]
 8003c34:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c40:	4a0f      	ldr	r2, [pc, #60]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e007      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c52:	4a0b      	ldr	r2, [pc, #44]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	613b      	str	r3, [r7, #16]
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	693b      	ldr	r3, [r7, #16]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	007a1200 	.word	0x007a1200
 8003c84:	08009914 	.word	0x08009914
 8003c88:	08009924 	.word	0x08009924

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	@ (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000034 	.word	0x20000034

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003caa:	f7ff ffef 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cae:	4601      	mov	r1, r0
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cb8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	fa92 f2a2 	rbit	r2, r2
 8003cc4:	603a      	str	r2, [r7, #0]
  return result;
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	fab2 f282 	clz	r2, r2
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	40d3      	lsrs	r3, r2
 8003cd0:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	0800990c 	.word	0x0800990c

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003cee:	f7ff ffcd 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003cfc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003d00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	fa92 f2a2 	rbit	r2, r2
 8003d08:	603a      	str	r2, [r7, #0]
  return result;
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	40d3      	lsrs	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	0800990c 	.word	0x0800990c

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b092      	sub	sp, #72	@ 0x48
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80d4 	beq.w	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d50:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10e      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4a4a      	ldr	r2, [pc, #296]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	61d3      	str	r3, [r2, #28]
 8003d68:	4b48      	ldr	r3, [pc, #288]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b42      	ldr	r3, [pc, #264]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a41      	ldr	r2, [pc, #260]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd ff31 	bl	8001bf8 <HAL_GetTick>
 8003d96:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd ff2d 	bl	8001bf8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b64      	cmp	r3, #100	@ 0x64
 8003da6:	d901      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e1d6      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db8:	4b34      	ldr	r3, [pc, #208]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8084 	beq.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d07c      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	461a      	mov	r2, r3
 8003e02:	2301      	movs	r3, #1
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	461a      	mov	r2, r3
 8003e26:	2300      	movs	r3, #0
 8003e28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d04b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fedd 	bl	8001bf8 <HAL_GetTick>
 8003e3e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fd fed9 	bl	8001bf8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e180      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8003e70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d108      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e86:	4b01      	ldr	r3, [pc, #4]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	e00d      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
 8003e94:	10908100 	.word	0x10908100
 8003e98:	2302      	movs	r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	613a      	str	r2, [r7, #16]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	fa92 f2a2 	rbit	r2, r2
 8003eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	fab2 f282 	clz	r2, r2
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f002 021f 	and.w	r2, r2, #31
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0b7      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	498c      	ldr	r1, [pc, #560]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b88      	ldr	r3, [pc, #544]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4a87      	ldr	r2, [pc, #540]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f04:	4b82      	ldr	r3, [pc, #520]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	497f      	ldr	r1, [pc, #508]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f22:	4b7b      	ldr	r3, [pc, #492]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4978      	ldr	r1, [pc, #480]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f40:	4b73      	ldr	r3, [pc, #460]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4970      	ldr	r1, [pc, #448]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f023 0210 	bic.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4969      	ldr	r1, [pc, #420]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f7c:	4b64      	ldr	r3, [pc, #400]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f88:	4961      	ldr	r1, [pc, #388]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f023 0220 	bic.w	r2, r3, #32
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	495a      	ldr	r1, [pc, #360]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb8:	4b55      	ldr	r3, [pc, #340]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	4952      	ldr	r1, [pc, #328]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	494b      	ldr	r1, [pc, #300]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ff4:	4b46      	ldr	r3, [pc, #280]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	4943      	ldr	r1, [pc, #268]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004012:	4b3f      	ldr	r3, [pc, #252]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	493c      	ldr	r1, [pc, #240]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004030:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	4934      	ldr	r1, [pc, #208]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800404e:	4b30      	ldr	r3, [pc, #192]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	492d      	ldr	r1, [pc, #180]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004078:	4925      	ldr	r1, [pc, #148]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800408a:	4b21      	ldr	r3, [pc, #132]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	491e      	ldr	r1, [pc, #120]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b4:	4916      	ldr	r1, [pc, #88]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80040c6:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	490f      	ldr	r1, [pc, #60]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f0:	4907      	ldr	r1, [pc, #28]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004102:	4b03      	ldr	r3, [pc, #12]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004116:	4913      	ldr	r1, [pc, #76]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004118:	4313      	orrs	r3, r2
 800411a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004128:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004134:	490b      	ldr	r1, [pc, #44]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004136:	4313      	orrs	r3, r2
 8004138:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004152:	4904      	ldr	r1, [pc, #16]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004154:	4313      	orrs	r3, r2
 8004156:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3748      	adds	r7, #72	@ 0x48
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e09d      	b.n	80042b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d108      	bne.n	8004194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800418a:	d009      	beq.n	80041a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	61da      	str	r2, [r3, #28]
 8004192:	e005      	b.n	80041a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fb4a 	bl	8001854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e0:	d902      	bls.n	80041e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e002      	b.n	80041ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80041f6:	d007      	beq.n	8004208 <HAL_SPI_Init+0xa0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	ea42 0103 	orr.w	r1, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	f003 0204 	and.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004284:	ea42 0103 	orr.w	r1, r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b088      	sub	sp, #32
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_SPI_Transmit+0x22>
 80042dc:	2302      	movs	r3, #2
 80042de:	e15f      	b.n	80045a0 <HAL_SPI_Transmit+0x2e2>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e8:	f7fd fc86 	bl	8001bf8 <HAL_GetTick>
 80042ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d002      	beq.n	8004304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
 8004300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004302:	e148      	b.n	8004596 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Transmit+0x52>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004314:	e13f      	b.n	8004596 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2203      	movs	r2, #3
 800431a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004360:	d10f      	bne.n	8004382 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d007      	beq.n	80043a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043a8:	d94f      	bls.n	800444a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_Transmit+0xfa>
 80043b2:	8afb      	ldrh	r3, [r7, #22]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d142      	bne.n	800443e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043dc:	e02f      	b.n	800443e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d112      	bne.n	8004412 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	881a      	ldrh	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	1c9a      	adds	r2, r3, #2
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004410:	e015      	b.n	800443e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004412:	f7fd fbf1 	bl	8001bf8 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d803      	bhi.n	800442a <HAL_SPI_Transmit+0x16c>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d102      	bne.n	8004430 <HAL_SPI_Transmit+0x172>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800443c:	e0ab      	b.n	8004596 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ca      	bne.n	80043de <HAL_SPI_Transmit+0x120>
 8004448:	e080      	b.n	800454c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Transmit+0x19a>
 8004452:	8afb      	ldrh	r3, [r7, #22]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d174      	bne.n	8004542 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d912      	bls.n	8004488 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b02      	subs	r3, #2
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004486:	e05c      	b.n	8004542 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044ae:	e048      	b.n	8004542 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d12b      	bne.n	8004516 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d912      	bls.n	80044ee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b02      	subs	r3, #2
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044ec:	e029      	b.n	8004542 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004514:	e015      	b.n	8004542 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004516:	f7fd fb6f 	bl	8001bf8 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d803      	bhi.n	800452e <HAL_SPI_Transmit+0x270>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d102      	bne.n	8004534 <HAL_SPI_Transmit+0x276>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004540:	e029      	b.n	8004596 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1b1      	bne.n	80044b0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fcf9 	bl	8004f48 <SPI_EndRxTxTransaction>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e003      	b.n	8004596 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800459e:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045cc:	e11a      	b.n	8004804 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d6:	d112      	bne.n	80045fe <HAL_SPI_Receive+0x56>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10e      	bne.n	80045fe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2204      	movs	r2, #4
 80045e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f90e 	bl	8004816 <HAL_SPI_TransmitReceive>
 80045fa:	4603      	mov	r3, r0
 80045fc:	e107      	b.n	800480e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_SPI_Receive+0x64>
 8004608:	2302      	movs	r3, #2
 800460a:	e100      	b.n	800480e <HAL_SPI_Receive+0x266>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004614:	f7fd faf0 	bl	8001bf8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_SPI_Receive+0x7e>
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462a:	e0eb      	b.n	8004804 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2204      	movs	r2, #4
 8004630:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004676:	d908      	bls.n	800468a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	e007      	b.n	800469a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004698:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a2:	d10f      	bne.n	80046c4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b40      	cmp	r3, #64	@ 0x40
 80046d0:	d007      	beq.n	80046e2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046ea:	d86f      	bhi.n	80047cc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046ec:	e034      	b.n	8004758 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d117      	bne.n	800472c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f103 020c 	add.w	r2, r3, #12
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800472a:	e015      	b.n	8004758 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472c:	f7fd fa64 	bl	8001bf8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d803      	bhi.n	8004744 <HAL_SPI_Receive+0x19c>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <HAL_SPI_Receive+0x1a2>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004756:	e055      	b.n	8004804 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1c4      	bne.n	80046ee <HAL_SPI_Receive+0x146>
 8004764:	e038      	b.n	80047d8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d115      	bne.n	80047a0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	b292      	uxth	r2, r2
 8004780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800479e:	e015      	b.n	80047cc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a0:	f7fd fa2a 	bl	8001bf8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d803      	bhi.n	80047b8 <HAL_SPI_Receive+0x210>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d102      	bne.n	80047be <HAL_SPI_Receive+0x216>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80047ca:	e01b      	b.n	8004804 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1c6      	bne.n	8004766 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fb5b 	bl	8004e98 <SPI_EndRxTransaction>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
 80047fa:	e003      	b.n	8004804 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800480c:	7dfb      	ldrb	r3, [r7, #23]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08a      	sub	sp, #40	@ 0x28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_SPI_TransmitReceive+0x26>
 8004838:	2302      	movs	r3, #2
 800483a:	e20a      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x43c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004844:	f7fd f9d8 	bl	8001bf8 <HAL_GetTick>
 8004848:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004850:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800485c:	887b      	ldrh	r3, [r7, #2]
 800485e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004860:	7efb      	ldrb	r3, [r7, #27]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d00e      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x6e>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800486c:	d106      	bne.n	800487c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_SPI_TransmitReceive+0x66>
 8004876:	7efb      	ldrb	r3, [r7, #27]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d003      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800487c:	2302      	movs	r3, #2
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004882:	e1e0      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x80>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x80>
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800489c:	e1d3      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d003      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2205      	movs	r2, #5
 80048ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	887a      	ldrh	r2, [r7, #2]
 80048c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	887a      	ldrh	r2, [r7, #2]
 80048ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	887a      	ldrh	r2, [r7, #2]
 80048de:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048f4:	d802      	bhi.n	80048fc <HAL_SPI_TransmitReceive+0xe6>
 80048f6:	8a3b      	ldrh	r3, [r7, #16]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d908      	bls.n	800490e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	e007      	b.n	800491e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800491c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d007      	beq.n	800493c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004944:	f240 8081 	bls.w	8004a4a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x140>
 8004950:	8a7b      	ldrh	r3, [r7, #18]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d16d      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	1c9a      	adds	r2, r3, #2
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497a:	e05a      	b.n	8004a32 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d11b      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x1ac>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d016      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0x1ac>
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	2b01      	cmp	r3, #1
 8004998:	d113      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11c      	bne.n	8004a0a <HAL_SPI_TransmitReceive+0x1f4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d016      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	b292      	uxth	r2, r2
 80049e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a06:	2301      	movs	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a0a:	f7fd f8f5 	bl	8001bf8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d80b      	bhi.n	8004a32 <HAL_SPI_TransmitReceive+0x21c>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d007      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004a30:	e109      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d19f      	bne.n	800497c <HAL_SPI_TransmitReceive+0x166>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d199      	bne.n	800497c <HAL_SPI_TransmitReceive+0x166>
 8004a48:	e0e3      	b.n	8004c12 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x244>
 8004a52:	8a7b      	ldrh	r3, [r7, #18]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 80cf 	bne.w	8004bf8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d912      	bls.n	8004a8a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b02      	subs	r3, #2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a88:	e0b6      	b.n	8004bf8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab0:	e0a2      	b.n	8004bf8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d134      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x314>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02f      	beq.n	8004b2a <HAL_SPI_TransmitReceive+0x314>
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d12c      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d912      	bls.n	8004b00 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b02      	subs	r3, #2
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004afe:	e012      	b.n	8004b26 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d148      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x3b4>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d042      	beq.n	8004bca <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d923      	bls.n	8004b98 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	b292      	uxth	r2, r2
 8004b5c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b02      	subs	r3, #2
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d81f      	bhi.n	8004bc6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	e016      	b.n	8004bc6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f103 020c 	add.w	r2, r3, #12
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bca:	f7fd f815 	bl	8001bf8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d803      	bhi.n	8004be2 <HAL_SPI_TransmitReceive+0x3cc>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d102      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x3d2>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004bf6:	e026      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f47f af57 	bne.w	8004ab2 <HAL_SPI_TransmitReceive+0x29c>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f47f af50 	bne.w	8004ab2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f996 	bl	8004f48 <SPI_EndRxTxTransaction>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3c:	e003      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3728      	adds	r7, #40	@ 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c6c:	f7fc ffc4 	bl	8001bf8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c7c:	f7fc ffbc 	bl	8001bf8 <HAL_GetTick>
 8004c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c82:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	015b      	lsls	r3, r3, #5
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c92:	e054      	b.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d050      	beq.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c9c:	f7fc ffac 	bl	8001bf8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d902      	bls.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d13d      	bne.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cca:	d111      	bne.n	8004cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd4:	d004      	beq.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d107      	bne.n	8004cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf8:	d10f      	bne.n	8004d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e017      	b.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d19b      	bne.n	8004c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000034 	.word	0x20000034

08004d6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d7e:	f7fc ff3b 	bl	8001bf8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d8e:	f7fc ff33 	bl	8001bf8 <HAL_GetTick>
 8004d92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	00da      	lsls	r2, r3, #3
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	0d1b      	lsrs	r3, r3, #20
 8004dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004db4:	e060      	b.n	8004e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004dbc:	d107      	bne.n	8004dce <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d050      	beq.n	8004e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dd6:	f7fc ff0f 	bl	8001bf8 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d902      	bls.n	8004dec <SPI_WaitFifoStateUntilTimeout+0x80>
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d13d      	bne.n	8004e68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e04:	d111      	bne.n	8004e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0e:	d004      	beq.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e18:	d107      	bne.n	8004e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e32:	d10f      	bne.n	8004e54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e010      	b.n	8004e8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d196      	bne.n	8004db6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3728      	adds	r7, #40	@ 0x28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000034 	.word	0x20000034

08004e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eac:	d111      	bne.n	8004ed2 <SPI_EndRxTransaction+0x3a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb6:	d004      	beq.n	8004ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec0:	d107      	bne.n	8004ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2180      	movs	r1, #128	@ 0x80
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff febd 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e023      	b.n	8004f40 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f00:	d11d      	bne.n	8004f3e <SPI_EndRxTransaction+0xa6>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0a:	d004      	beq.n	8004f16 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f14:	d113      	bne.n	8004f3e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff ff22 	bl	8004d6c <SPI_WaitFifoStateUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e000      	b.n	8004f40 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff ff03 	bl	8004d6c <SPI_WaitFifoStateUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e027      	b.n	8004fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2200      	movs	r2, #0
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff fe68 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d007      	beq.n	8004fa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f96:	f043 0220 	orr.w	r2, r3, #32
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e014      	b.n	8004fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff fedc 	bl	8004d6c <SPI_WaitFifoStateUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e000      	b.n	8004fcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e040      	b.n	8005068 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fc70 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	@ 0x24
 8005000:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa86 	bl	800552c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f8af 	bl	8005184 <UART_SetConfig>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01b      	b.n	8005068 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800503e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800504e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb05 	bl	8005670 <UART_CheckIdleState>
 8005066:	4603      	mov	r3, r0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	@ 0x28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005084:	2b20      	cmp	r3, #32
 8005086:	d177      	bne.n	8005178 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Transmit+0x24>
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e070      	b.n	800517a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2221      	movs	r2, #33	@ 0x21
 80050a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a6:	f7fc fda7 	bl	8001bf8 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c4:	d108      	bne.n	80050d8 <HAL_UART_Transmit+0x68>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e003      	b.n	80050e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e0:	e02f      	b.n	8005142 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fb67 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e03b      	b.n	800517a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005114:	b292      	uxth	r2, r2
 8005116:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	3302      	adds	r3, #2
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e007      	b.n	8005130 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3301      	adds	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1c9      	bne.n	80050e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2200      	movs	r2, #0
 8005156:	2140      	movs	r1, #64	@ 0x40
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fb31 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e005      	b.n	800517a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <UART_SetConfig+0x274>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a80      	ldr	r2, [pc, #512]	@ (80053fc <UART_SetConfig+0x278>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d120      	bne.n	8005242 <UART_SetConfig+0xbe>
 8005200:	4b7f      	ldr	r3, [pc, #508]	@ (8005400 <UART_SetConfig+0x27c>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b03      	cmp	r3, #3
 800520a:	d817      	bhi.n	800523c <UART_SetConfig+0xb8>
 800520c:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <UART_SetConfig+0x90>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005225 	.word	0x08005225
 8005218:	08005231 	.word	0x08005231
 800521c:	08005237 	.word	0x08005237
 8005220:	0800522b 	.word	0x0800522b
 8005224:	2301      	movs	r3, #1
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	e0b5      	b.n	8005396 <UART_SetConfig+0x212>
 800522a:	2302      	movs	r3, #2
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e0b2      	b.n	8005396 <UART_SetConfig+0x212>
 8005230:	2304      	movs	r3, #4
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e0af      	b.n	8005396 <UART_SetConfig+0x212>
 8005236:	2308      	movs	r3, #8
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e0ac      	b.n	8005396 <UART_SetConfig+0x212>
 800523c:	2310      	movs	r3, #16
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e0a9      	b.n	8005396 <UART_SetConfig+0x212>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a6f      	ldr	r2, [pc, #444]	@ (8005404 <UART_SetConfig+0x280>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d124      	bne.n	8005296 <UART_SetConfig+0x112>
 800524c:	4b6c      	ldr	r3, [pc, #432]	@ (8005400 <UART_SetConfig+0x27c>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005254:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005258:	d011      	beq.n	800527e <UART_SetConfig+0xfa>
 800525a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800525e:	d817      	bhi.n	8005290 <UART_SetConfig+0x10c>
 8005260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005264:	d011      	beq.n	800528a <UART_SetConfig+0x106>
 8005266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800526a:	d811      	bhi.n	8005290 <UART_SetConfig+0x10c>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <UART_SetConfig+0xf4>
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005274:	d006      	beq.n	8005284 <UART_SetConfig+0x100>
 8005276:	e00b      	b.n	8005290 <UART_SetConfig+0x10c>
 8005278:	2300      	movs	r3, #0
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e08b      	b.n	8005396 <UART_SetConfig+0x212>
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e088      	b.n	8005396 <UART_SetConfig+0x212>
 8005284:	2304      	movs	r3, #4
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e085      	b.n	8005396 <UART_SetConfig+0x212>
 800528a:	2308      	movs	r3, #8
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e082      	b.n	8005396 <UART_SetConfig+0x212>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e07f      	b.n	8005396 <UART_SetConfig+0x212>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5b      	ldr	r2, [pc, #364]	@ (8005408 <UART_SetConfig+0x284>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d124      	bne.n	80052ea <UART_SetConfig+0x166>
 80052a0:	4b57      	ldr	r3, [pc, #348]	@ (8005400 <UART_SetConfig+0x27c>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80052a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052ac:	d011      	beq.n	80052d2 <UART_SetConfig+0x14e>
 80052ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052b2:	d817      	bhi.n	80052e4 <UART_SetConfig+0x160>
 80052b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052b8:	d011      	beq.n	80052de <UART_SetConfig+0x15a>
 80052ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052be:	d811      	bhi.n	80052e4 <UART_SetConfig+0x160>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <UART_SetConfig+0x148>
 80052c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052c8:	d006      	beq.n	80052d8 <UART_SetConfig+0x154>
 80052ca:	e00b      	b.n	80052e4 <UART_SetConfig+0x160>
 80052cc:	2300      	movs	r3, #0
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e061      	b.n	8005396 <UART_SetConfig+0x212>
 80052d2:	2302      	movs	r3, #2
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e05e      	b.n	8005396 <UART_SetConfig+0x212>
 80052d8:	2304      	movs	r3, #4
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e05b      	b.n	8005396 <UART_SetConfig+0x212>
 80052de:	2308      	movs	r3, #8
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e058      	b.n	8005396 <UART_SetConfig+0x212>
 80052e4:	2310      	movs	r3, #16
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e055      	b.n	8005396 <UART_SetConfig+0x212>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a47      	ldr	r2, [pc, #284]	@ (800540c <UART_SetConfig+0x288>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d124      	bne.n	800533e <UART_SetConfig+0x1ba>
 80052f4:	4b42      	ldr	r3, [pc, #264]	@ (8005400 <UART_SetConfig+0x27c>)
 80052f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80052fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005300:	d011      	beq.n	8005326 <UART_SetConfig+0x1a2>
 8005302:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005306:	d817      	bhi.n	8005338 <UART_SetConfig+0x1b4>
 8005308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800530c:	d011      	beq.n	8005332 <UART_SetConfig+0x1ae>
 800530e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005312:	d811      	bhi.n	8005338 <UART_SetConfig+0x1b4>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <UART_SetConfig+0x19c>
 8005318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800531c:	d006      	beq.n	800532c <UART_SetConfig+0x1a8>
 800531e:	e00b      	b.n	8005338 <UART_SetConfig+0x1b4>
 8005320:	2300      	movs	r3, #0
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e037      	b.n	8005396 <UART_SetConfig+0x212>
 8005326:	2302      	movs	r3, #2
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e034      	b.n	8005396 <UART_SetConfig+0x212>
 800532c:	2304      	movs	r3, #4
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e031      	b.n	8005396 <UART_SetConfig+0x212>
 8005332:	2308      	movs	r3, #8
 8005334:	77fb      	strb	r3, [r7, #31]
 8005336:	e02e      	b.n	8005396 <UART_SetConfig+0x212>
 8005338:	2310      	movs	r3, #16
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e02b      	b.n	8005396 <UART_SetConfig+0x212>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a33      	ldr	r2, [pc, #204]	@ (8005410 <UART_SetConfig+0x28c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d124      	bne.n	8005392 <UART_SetConfig+0x20e>
 8005348:	4b2d      	ldr	r3, [pc, #180]	@ (8005400 <UART_SetConfig+0x27c>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005350:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005354:	d011      	beq.n	800537a <UART_SetConfig+0x1f6>
 8005356:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800535a:	d817      	bhi.n	800538c <UART_SetConfig+0x208>
 800535c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005360:	d011      	beq.n	8005386 <UART_SetConfig+0x202>
 8005362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005366:	d811      	bhi.n	800538c <UART_SetConfig+0x208>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <UART_SetConfig+0x1f0>
 800536c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005370:	d006      	beq.n	8005380 <UART_SetConfig+0x1fc>
 8005372:	e00b      	b.n	800538c <UART_SetConfig+0x208>
 8005374:	2300      	movs	r3, #0
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e00d      	b.n	8005396 <UART_SetConfig+0x212>
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e00a      	b.n	8005396 <UART_SetConfig+0x212>
 8005380:	2304      	movs	r3, #4
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e007      	b.n	8005396 <UART_SetConfig+0x212>
 8005386:	2308      	movs	r3, #8
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e004      	b.n	8005396 <UART_SetConfig+0x212>
 800538c:	2310      	movs	r3, #16
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e001      	b.n	8005396 <UART_SetConfig+0x212>
 8005392:	2310      	movs	r3, #16
 8005394:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539e:	d16b      	bne.n	8005478 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80053a0:	7ffb      	ldrb	r3, [r7, #31]
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d838      	bhi.n	8005418 <UART_SetConfig+0x294>
 80053a6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x228>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	08005419 	.word	0x08005419
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005419 	.word	0x08005419
 80053cc:	080053ef 	.word	0x080053ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fe fc68 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80053d4:	61b8      	str	r0, [r7, #24]
        break;
 80053d6:	e024      	b.n	8005422 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d8:	f7fe fc86 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 80053dc:	61b8      	str	r0, [r7, #24]
        break;
 80053de:	e020      	b.n	8005422 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <UART_SetConfig+0x290>)
 80053e2:	61bb      	str	r3, [r7, #24]
        break;
 80053e4:	e01d      	b.n	8005422 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7fe fbfd 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 80053ea:	61b8      	str	r0, [r7, #24]
        break;
 80053ec:	e019      	b.n	8005422 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f2:	61bb      	str	r3, [r7, #24]
        break;
 80053f4:	e015      	b.n	8005422 <UART_SetConfig+0x29e>
 80053f6:	bf00      	nop
 80053f8:	efff69f3 	.word	0xefff69f3
 80053fc:	40013800 	.word	0x40013800
 8005400:	40021000 	.word	0x40021000
 8005404:	40004400 	.word	0x40004400
 8005408:	40004800 	.word	0x40004800
 800540c:	40004c00 	.word	0x40004c00
 8005410:	40005000 	.word	0x40005000
 8005414:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	77bb      	strb	r3, [r7, #30]
        break;
 8005420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d073      	beq.n	8005510 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	005a      	lsls	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	441a      	add	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d916      	bls.n	8005472 <UART_SetConfig+0x2ee>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544a:	d212      	bcs.n	8005472 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f023 030f 	bic.w	r3, r3, #15
 8005454:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	b29b      	uxth	r3, r3
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	b29a      	uxth	r2, r3
 8005462:	89fb      	ldrh	r3, [r7, #14]
 8005464:	4313      	orrs	r3, r2
 8005466:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	89fa      	ldrh	r2, [r7, #14]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e04e      	b.n	8005510 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	77bb      	strb	r3, [r7, #30]
 8005476:	e04b      	b.n	8005510 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005478:	7ffb      	ldrb	r3, [r7, #31]
 800547a:	2b08      	cmp	r3, #8
 800547c:	d827      	bhi.n	80054ce <UART_SetConfig+0x34a>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <UART_SetConfig+0x300>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054b9 	.word	0x080054b9
 8005490:	080054cf 	.word	0x080054cf
 8005494:	080054bf 	.word	0x080054bf
 8005498:	080054cf 	.word	0x080054cf
 800549c:	080054cf 	.word	0x080054cf
 80054a0:	080054cf 	.word	0x080054cf
 80054a4:	080054c7 	.word	0x080054c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a8:	f7fe fbfc 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80054ac:	61b8      	str	r0, [r7, #24]
        break;
 80054ae:	e013      	b.n	80054d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b0:	f7fe fc1a 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 80054b4:	61b8      	str	r0, [r7, #24]
        break;
 80054b6:	e00f      	b.n	80054d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005528 <UART_SetConfig+0x3a4>)
 80054ba:	61bb      	str	r3, [r7, #24]
        break;
 80054bc:	e00c      	b.n	80054d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054be:	f7fe fb91 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 80054c2:	61b8      	str	r0, [r7, #24]
        break;
 80054c4:	e008      	b.n	80054d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ca:	61bb      	str	r3, [r7, #24]
        break;
 80054cc:	e004      	b.n	80054d8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	77bb      	strb	r3, [r7, #30]
        break;
 80054d6:	bf00      	nop
    }

    if (pclk != 0U)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d018      	beq.n	8005510 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	085a      	lsrs	r2, r3, #1
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d909      	bls.n	800550c <UART_SetConfig+0x388>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054fe:	d205      	bcs.n	800550c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e001      	b.n	8005510 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800551c:	7fbb      	ldrb	r3, [r7, #30]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	007a1200 	.word	0x007a1200

0800552c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01a      	beq.n	8005642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562a:	d10a      	bne.n	8005642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b098      	sub	sp, #96	@ 0x60
 8005674:	af02      	add	r7, sp, #8
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005680:	f7fc faba 	bl	8001bf8 <HAL_GetTick>
 8005684:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d12e      	bne.n	80056f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569c:	2200      	movs	r2, #0
 800569e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f88c 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d021      	beq.n	80056f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e062      	b.n	80057b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d149      	bne.n	8005794 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f856 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d03c      	beq.n	8005794 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	623b      	str	r3, [r7, #32]
   return(result);
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800572e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005738:	633b      	str	r3, [r7, #48]	@ 0x30
 800573a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800573e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60fb      	str	r3, [r7, #12]
   return(result);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800576c:	61fa      	str	r2, [r7, #28]
 800576e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	617b      	str	r3, [r7, #20]
   return(result);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e011      	b.n	80057b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3758      	adds	r7, #88	@ 0x58
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d0:	e04f      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d04b      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fc fa0d 	bl	8001bf8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d302      	bcc.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e04e      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d037      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b80      	cmp	r3, #128	@ 0x80
 8005806:	d034      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d031      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d110      	bne.n	800583e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2208      	movs	r2, #8
 8005822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f838 	bl	800589a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2208      	movs	r2, #8
 800582e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e029      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584c:	d111      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f81e 	bl	800589a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e00f      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	429a      	cmp	r2, r3
 800588e:	d0a0      	beq.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589a:	b480      	push	{r7}
 800589c:	b095      	sub	sp, #84	@ 0x54
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e6      	bne.n	80058a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800590c:	2b01      	cmp	r3, #1
 800590e:	d118      	bne.n	8005942 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	60bb      	str	r3, [r7, #8]
   return(result);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 0310 	bic.w	r3, r3, #16
 8005924:	647b      	str	r3, [r7, #68]	@ 0x44
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6979      	ldr	r1, [r7, #20]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	613b      	str	r3, [r7, #16]
   return(result);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e6      	bne.n	8005910 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005956:	bf00      	nop
 8005958:	3754      	adds	r7, #84	@ 0x54
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005968:	4904      	ldr	r1, [pc, #16]	@ (800597c <MX_FATFS_Init+0x18>)
 800596a:	4805      	ldr	r0, [pc, #20]	@ (8005980 <MX_FATFS_Init+0x1c>)
 800596c:	f003 f94e 	bl	8008c0c <FATFS_LinkDriver>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	4b03      	ldr	r3, [pc, #12]	@ (8005984 <MX_FATFS_Init+0x20>)
 8005976:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005978:	bf00      	nop
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200003d8 	.word	0x200003d8
 8005980:	20000040 	.word	0x20000040
 8005984:	200003d4 	.word	0x200003d4

08005988 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800598c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 f9d9 	bl	8005d5c <USER_SPI_initialize>
 80059aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 facf 	bl	8005f64 <USER_SPI_status>
 80059c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80059e0:	7bf8      	ldrb	r0, [r7, #15]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	f000 fad2 	bl	8005f90 <USER_SPI_read>
 80059ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005a06:	7bf8      	ldrb	r0, [r7, #15]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	f000 fb25 	bl	800605c <USER_SPI_write>
 8005a12:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	603a      	str	r2, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005a2c:	79b9      	ldrb	r1, [r7, #6]
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fb8e 	bl	8006154 <USER_SPI_ioctl>
 8005a38:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005a4c:	f7fc f8d4 	bl	8001bf8 <HAL_GetTick>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4a04      	ldr	r2, [pc, #16]	@ (8005a64 <SPI_Timer_On+0x20>)
 8005a54:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005a56:	4a04      	ldr	r2, [pc, #16]	@ (8005a68 <SPI_Timer_On+0x24>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6013      	str	r3, [r2, #0]
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	200003e0 	.word	0x200003e0
 8005a68:	200003e4 	.word	0x200003e4

08005a6c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005a70:	f7fc f8c2 	bl	8001bf8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <SPI_Timer_Status+0x24>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	4b05      	ldr	r3, [pc, #20]	@ (8005a94 <SPI_Timer_Status+0x28>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	bf34      	ite	cc
 8005a84:	2301      	movcc	r3, #1
 8005a86:	2300      	movcs	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200003e0 	.word	0x200003e0
 8005a94:	200003e4 	.word	0x200003e4

08005a98 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005aa2:	f107 020f 	add.w	r2, r7, #15
 8005aa6:	1df9      	adds	r1, r7, #7
 8005aa8:	2332      	movs	r3, #50	@ 0x32
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2301      	movs	r3, #1
 8005aae:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <xchg_spi+0x28>)
 8005ab0:	f7fe feb1 	bl	8004816 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200000ec 	.word	0x200000ec

08005ac4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e00a      	b.n	8005aea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	18d4      	adds	r4, r2, r3
 8005ada:	20ff      	movs	r0, #255	@ 0xff
 8005adc:	f7ff ffdc 	bl	8005a98 <xchg_spi>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d3f0      	bcc.n	8005ad4 <rcvr_spi_multi+0x10>
	}
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd90      	pop	{r4, r7, pc}

08005afc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4803      	ldr	r0, [pc, #12]	@ (8005b20 <xmit_spi_multi+0x24>)
 8005b12:	f7fe fbd4 	bl	80042be <HAL_SPI_Transmit>
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200000ec 	.word	0x200000ec

08005b24 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005b2c:	f7fc f864 	bl	8001bf8 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005b36:	20ff      	movs	r0, #255	@ 0xff
 8005b38:	f7ff ffae 	bl	8005a98 <xchg_spi>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2bff      	cmp	r3, #255	@ 0xff
 8005b44:	d007      	beq.n	8005b56 <wait_ready+0x32>
 8005b46:	f7fc f857 	bl	8001bf8 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d8ef      	bhi.n	8005b36 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2bff      	cmp	r3, #255	@ 0xff
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005b70:	2201      	movs	r2, #1
 8005b72:	2102      	movs	r1, #2
 8005b74:	4803      	ldr	r0, [pc, #12]	@ (8005b84 <despiselect+0x18>)
 8005b76:	f7fc fe33 	bl	80027e0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005b7a:	20ff      	movs	r0, #255	@ 0xff
 8005b7c:	f7ff ff8c 	bl	8005a98 <xchg_spi>

}
 8005b80:	bf00      	nop
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	48000400 	.word	0x48000400

08005b88 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4809      	ldr	r0, [pc, #36]	@ (8005bb8 <spiselect+0x30>)
 8005b92:	f7fc fe25 	bl	80027e0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005b96:	20ff      	movs	r0, #255	@ 0xff
 8005b98:	f7ff ff7e 	bl	8005a98 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005b9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ba0:	f7ff ffc0 	bl	8005b24 <wait_ready>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <spiselect+0x26>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e002      	b.n	8005bb4 <spiselect+0x2c>

	despiselect();
 8005bae:	f7ff ffdd 	bl	8005b6c <despiselect>
	return 0;	/* Timeout */
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	48000400 	.word	0x48000400

08005bbc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005bc6:	20c8      	movs	r0, #200	@ 0xc8
 8005bc8:	f7ff ff3c 	bl	8005a44 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005bcc:	20ff      	movs	r0, #255	@ 0xff
 8005bce:	f7ff ff63 	bl	8005a98 <xchg_spi>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2bff      	cmp	r3, #255	@ 0xff
 8005bda:	d104      	bne.n	8005be6 <rcvr_datablock+0x2a>
 8005bdc:	f7ff ff46 	bl	8005a6c <SPI_Timer_Status>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f2      	bne.n	8005bcc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2bfe      	cmp	r3, #254	@ 0xfe
 8005bea:	d001      	beq.n	8005bf0 <rcvr_datablock+0x34>
 8005bec:	2300      	movs	r3, #0
 8005bee:	e00a      	b.n	8005c06 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ff66 	bl	8005ac4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005bf8:	20ff      	movs	r0, #255	@ 0xff
 8005bfa:	f7ff ff4d 	bl	8005a98 <xchg_spi>
 8005bfe:	20ff      	movs	r0, #255	@ 0xff
 8005c00:	f7ff ff4a 	bl	8005a98 <xchg_spi>

	return 1;						/* Function succeeded */
 8005c04:	2301      	movs	r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005c1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005c1e:	f7ff ff81 	bl	8005b24 <wait_ready>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <xmit_datablock+0x1e>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e01e      	b.n	8005c6a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff32 	bl	8005a98 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	2bfd      	cmp	r3, #253	@ 0xfd
 8005c38:	d016      	beq.n	8005c68 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005c3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff5c 	bl	8005afc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005c44:	20ff      	movs	r0, #255	@ 0xff
 8005c46:	f7ff ff27 	bl	8005a98 <xchg_spi>
 8005c4a:	20ff      	movs	r0, #255	@ 0xff
 8005c4c:	f7ff ff24 	bl	8005a98 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005c50:	20ff      	movs	r0, #255	@ 0xff
 8005c52:	f7ff ff21 	bl	8005a98 <xchg_spi>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2b05      	cmp	r3, #5
 8005c62:	d001      	beq.n	8005c68 <xmit_datablock+0x5a>
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <xmit_datablock+0x5c>
	}
	return 1;
 8005c68:	2301      	movs	r3, #1
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	4603      	mov	r3, r0
 8005c7a:	6039      	str	r1, [r7, #0]
 8005c7c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	xchg_spi(0xFF);
 8005c7e:	20ff      	movs	r0, #255	@ 0xff
 8005c80:	f7ff ff0a 	bl	8005a98 <xchg_spi>
	xchg_spi(0xFF);
 8005c84:	20ff      	movs	r0, #255	@ 0xff
 8005c86:	f7ff ff07 	bl	8005a98 <xchg_spi>
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da0e      	bge.n	8005cb0 <send_cmd+0x3e>
		cmd &= 0x7F;
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c98:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	2037      	movs	r0, #55	@ 0x37
 8005c9e:	f7ff ffe8 	bl	8005c72 <send_cmd>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d901      	bls.n	8005cb0 <send_cmd+0x3e>
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	e051      	b.n	8005d54 <send_cmd+0xe2>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d008      	beq.n	8005cc8 <send_cmd+0x56>
		despiselect();
 8005cb6:	f7ff ff59 	bl	8005b6c <despiselect>
		if (!spiselect()) return 0xFF;
 8005cba:	f7ff ff65 	bl	8005b88 <spiselect>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <send_cmd+0x56>
 8005cc4:	23ff      	movs	r3, #255	@ 0xff
 8005cc6:	e045      	b.n	8005d54 <send_cmd+0xe2>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fee1 	bl	8005a98 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	0e1b      	lsrs	r3, r3, #24
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fedb 	bl	8005a98 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fed5 	bl	8005a98 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fecf 	bl	8005a98 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff feca 	bl	8005a98 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <send_cmd+0xa0>
 8005d0e:	2395      	movs	r3, #149	@ 0x95
 8005d10:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d101      	bne.n	8005d1c <send_cmd+0xaa>
 8005d18:	2387      	movs	r3, #135	@ 0x87
 8005d1a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff feba 	bl	8005a98 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d102      	bne.n	8005d30 <send_cmd+0xbe>
 8005d2a:	20ff      	movs	r0, #255	@ 0xff
 8005d2c:	f7ff feb4 	bl	8005a98 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005d30:	230a      	movs	r3, #10
 8005d32:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005d34:	20ff      	movs	r0, #255	@ 0xff
 8005d36:	f7ff feaf 	bl	8005a98 <xchg_spi>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da05      	bge.n	8005d52 <send_cmd+0xe0>
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <send_cmd+0xc2>

	return res;							/* Return received response */
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005d5c:	b590      	push	{r4, r7, lr}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4], init;

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <USER_SPI_initialize+0x14>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0ee      	b.n	8005f4e <USER_SPI_initialize+0x1f2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005d70:	4b79      	ldr	r3, [pc, #484]	@ (8005f58 <USER_SPI_initialize+0x1fc>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <USER_SPI_initialize+0x2a>
 8005d7e:	4b76      	ldr	r3, [pc, #472]	@ (8005f58 <USER_SPI_initialize+0x1fc>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	e0e3      	b.n	8005f4e <USER_SPI_initialize+0x1f2>

	FCLK_SLOW();
 8005d86:	4b75      	ldr	r3, [pc, #468]	@ (8005f5c <USER_SPI_initialize+0x200>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005d90:	4b72      	ldr	r3, [pc, #456]	@ (8005f5c <USER_SPI_initialize+0x200>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005d98:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	75fb      	strb	r3, [r7, #23]
 8005d9e:	e005      	b.n	8005dac <USER_SPI_initialize+0x50>
 8005da0:	20ff      	movs	r0, #255	@ 0xff
 8005da2:	f7ff fe79 	bl	8005a98 <xchg_spi>
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f6      	bne.n	8005da0 <USER_SPI_initialize+0x44>

	ty = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	757b      	strb	r3, [r7, #21]
	int counter = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
	init = send_cmd(CMD0, 0);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f7ff ff58 	bl	8005c72 <send_cmd>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	753b      	strb	r3, [r7, #20]
	while(init!=1 && counter < 100)
 8005dc6:	e008      	b.n	8005dda <USER_SPI_initialize+0x7e>
	{
		counter++;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
		init = send_cmd(CMD0, 0);
 8005dce:	2100      	movs	r1, #0
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f7ff ff4e 	bl	8005c72 <send_cmd>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	753b      	strb	r3, [r7, #20]
	while(init!=1 && counter < 100)
 8005dda:	7d3b      	ldrb	r3, [r7, #20]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d002      	beq.n	8005de6 <USER_SPI_initialize+0x8a>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b63      	cmp	r3, #99	@ 0x63
 8005de4:	ddf0      	ble.n	8005dc8 <USER_SPI_initialize+0x6c>
		//myprintf("(%i)\r\n", init);
	}
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005de6:	2100      	movs	r1, #0
 8005de8:	2000      	movs	r0, #0
 8005dea:	f7ff ff42 	bl	8005c72 <send_cmd>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 808b 	bne.w	8005f0c <USER_SPI_initialize+0x1b0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dfa:	f7ff fe23 	bl	8005a44 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005dfe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005e02:	2008      	movs	r0, #8
 8005e04:	f7ff ff35 	bl	8005c72 <send_cmd>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d151      	bne.n	8005eb2 <USER_SPI_initialize+0x156>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]
 8005e12:	e00d      	b.n	8005e30 <USER_SPI_initialize+0xd4>
 8005e14:	7dfc      	ldrb	r4, [r7, #23]
 8005e16:	20ff      	movs	r0, #255	@ 0xff
 8005e18:	f7ff fe3e 	bl	8005a98 <xchg_spi>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f104 0318 	add.w	r3, r4, #24
 8005e24:	443b      	add	r3, r7
 8005e26:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d9ee      	bls.n	8005e14 <USER_SPI_initialize+0xb8>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d167      	bne.n	8005f0c <USER_SPI_initialize+0x1b0>
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2baa      	cmp	r3, #170	@ 0xaa
 8005e40:	d164      	bne.n	8005f0c <USER_SPI_initialize+0x1b0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005e42:	bf00      	nop
 8005e44:	f7ff fe12 	bl	8005a6c <SPI_Timer_Status>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <USER_SPI_initialize+0x102>
 8005e4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005e52:	20a9      	movs	r0, #169	@ 0xa9
 8005e54:	f7ff ff0d 	bl	8005c72 <send_cmd>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f2      	bne.n	8005e44 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005e5e:	f7ff fe05 	bl	8005a6c <SPI_Timer_Status>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d051      	beq.n	8005f0c <USER_SPI_initialize+0x1b0>
 8005e68:	2100      	movs	r1, #0
 8005e6a:	203a      	movs	r0, #58	@ 0x3a
 8005e6c:	f7ff ff01 	bl	8005c72 <send_cmd>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d14a      	bne.n	8005f0c <USER_SPI_initialize+0x1b0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
 8005e7a:	e00d      	b.n	8005e98 <USER_SPI_initialize+0x13c>
 8005e7c:	7dfc      	ldrb	r4, [r7, #23]
 8005e7e:	20ff      	movs	r0, #255	@ 0xff
 8005e80:	f7ff fe0a 	bl	8005a98 <xchg_spi>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	f104 0318 	add.w	r3, r4, #24
 8005e8c:	443b      	add	r3, r7
 8005e8e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	3301      	adds	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d9ee      	bls.n	8005e7c <USER_SPI_initialize+0x120>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005e9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <USER_SPI_initialize+0x150>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	e000      	b.n	8005eae <USER_SPI_initialize+0x152>
 8005eac:	2304      	movs	r3, #4
 8005eae:	757b      	strb	r3, [r7, #21]
 8005eb0:	e02c      	b.n	8005f0c <USER_SPI_initialize+0x1b0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	20a9      	movs	r0, #169	@ 0xa9
 8005eb6:	f7ff fedc 	bl	8005c72 <send_cmd>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d804      	bhi.n	8005eca <USER_SPI_initialize+0x16e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	757b      	strb	r3, [r7, #21]
 8005ec4:	23a9      	movs	r3, #169	@ 0xa9
 8005ec6:	75bb      	strb	r3, [r7, #22]
 8005ec8:	e003      	b.n	8005ed2 <USER_SPI_initialize+0x176>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005eca:	2301      	movs	r3, #1
 8005ecc:	757b      	strb	r3, [r7, #21]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	75bb      	strb	r3, [r7, #22]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005ed2:	bf00      	nop
 8005ed4:	f7ff fdca 	bl	8005a6c <SPI_Timer_Status>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <USER_SPI_initialize+0x192>
 8005ede:	7dbb      	ldrb	r3, [r7, #22]
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fec5 	bl	8005c72 <send_cmd>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f2      	bne.n	8005ed4 <USER_SPI_initialize+0x178>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005eee:	f7ff fdbd 	bl	8005a6c <SPI_Timer_Status>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <USER_SPI_initialize+0x1ac>
 8005ef8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005efc:	2010      	movs	r0, #16
 8005efe:	f7ff feb8 	bl	8005c72 <send_cmd>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <USER_SPI_initialize+0x1b0>
				ty = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	757b      	strb	r3, [r7, #21]
		}
	}
	CardType = ty;	/* Card type */
 8005f0c:	4a14      	ldr	r2, [pc, #80]	@ (8005f60 <USER_SPI_initialize+0x204>)
 8005f0e:	7d7b      	ldrb	r3, [r7, #21]
 8005f10:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005f12:	f7ff fe2b 	bl	8005b6c <despiselect>

	if (ty) {			/* OK */
 8005f16:	7d7b      	ldrb	r3, [r7, #21]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <USER_SPI_initialize+0x1e6>
		FCLK_FAST();			/* Set fast clock */
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <USER_SPI_initialize+0x200>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <USER_SPI_initialize+0x200>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0210 	orr.w	r2, r2, #16
 8005f2e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005f30:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <USER_SPI_initialize+0x1fc>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <USER_SPI_initialize+0x1fc>)
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e002      	b.n	8005f48 <USER_SPI_initialize+0x1ec>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005f42:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <USER_SPI_initialize+0x1fc>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005f48:	4b03      	ldr	r3, [pc, #12]	@ (8005f58 <USER_SPI_initialize+0x1fc>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b2db      	uxtb	r3, r3
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000054 	.word	0x20000054
 8005f5c:	200000ec 	.word	0x200000ec
 8005f60:	200003dc 	.word	0x200003dc

08005f64 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USER_SPI_status+0x14>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e002      	b.n	8005f7e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005f78:	4b04      	ldr	r3, [pc, #16]	@ (8005f8c <USER_SPI_status+0x28>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b2db      	uxtb	r3, r3
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000054 	.word	0x20000054

08005f90 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <USER_SPI_read+0x1c>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <USER_SPI_read+0x20>
 8005fac:	2304      	movs	r3, #4
 8005fae:	e04d      	b.n	800604c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005fb0:	4b28      	ldr	r3, [pc, #160]	@ (8006054 <USER_SPI_read+0xc4>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <USER_SPI_read+0x32>
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e044      	b.n	800604c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005fc2:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <USER_SPI_read+0xc8>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <USER_SPI_read+0x44>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	025b      	lsls	r3, r3, #9
 8005fd2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d111      	bne.n	8005ffe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	2011      	movs	r0, #17
 8005fde:	f7ff fe48 	bl	8005c72 <send_cmd>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d129      	bne.n	800603c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005fe8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005fec:	68b8      	ldr	r0, [r7, #8]
 8005fee:	f7ff fde5 	bl	8005bbc <rcvr_datablock>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d021      	beq.n	800603c <USER_SPI_read+0xac>
			count = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	e01e      	b.n	800603c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	2012      	movs	r0, #18
 8006002:	f7ff fe36 	bl	8005c72 <send_cmd>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d117      	bne.n	800603c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800600c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006010:	68b8      	ldr	r0, [r7, #8]
 8006012:	f7ff fdd3 	bl	8005bbc <rcvr_datablock>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <USER_SPI_read+0xa2>
				buff += 512;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006022:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	603b      	str	r3, [r7, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ed      	bne.n	800600c <USER_SPI_read+0x7c>
 8006030:	e000      	b.n	8006034 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006032:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006034:	2100      	movs	r1, #0
 8006036:	200c      	movs	r0, #12
 8006038:	f7ff fe1b 	bl	8005c72 <send_cmd>
		}
	}
	despiselect();
 800603c:	f7ff fd96 	bl	8005b6c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000054 	.word	0x20000054
 8006058:	200003dc 	.word	0x200003dc

0800605c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	607a      	str	r2, [r7, #4]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <USER_SPI_write+0x1c>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <USER_SPI_write+0x20>
 8006078:	2304      	movs	r3, #4
 800607a:	e063      	b.n	8006144 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800607c:	4b33      	ldr	r3, [pc, #204]	@ (800614c <USER_SPI_write+0xf0>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <USER_SPI_write+0x32>
 800608a:	2303      	movs	r3, #3
 800608c:	e05a      	b.n	8006144 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800608e:	4b2f      	ldr	r3, [pc, #188]	@ (800614c <USER_SPI_write+0xf0>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <USER_SPI_write+0x44>
 800609c:	2302      	movs	r3, #2
 800609e:	e051      	b.n	8006144 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80060a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006150 <USER_SPI_write+0xf4>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <USER_SPI_write+0x56>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	025b      	lsls	r3, r3, #9
 80060b0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d110      	bne.n	80060da <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	2018      	movs	r0, #24
 80060bc:	f7ff fdd9 	bl	8005c72 <send_cmd>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d136      	bne.n	8006134 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80060c6:	21fe      	movs	r1, #254	@ 0xfe
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f7ff fda0 	bl	8005c0e <xmit_datablock>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02f      	beq.n	8006134 <USER_SPI_write+0xd8>
			count = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	e02c      	b.n	8006134 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80060da:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <USER_SPI_write+0xf4>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 0306 	and.w	r3, r3, #6
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <USER_SPI_write+0x92>
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	2097      	movs	r0, #151	@ 0x97
 80060ea:	f7ff fdc2 	bl	8005c72 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	2019      	movs	r0, #25
 80060f2:	f7ff fdbe 	bl	8005c72 <send_cmd>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d11b      	bne.n	8006134 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80060fc:	21fc      	movs	r1, #252	@ 0xfc
 80060fe:	68b8      	ldr	r0, [r7, #8]
 8006100:	f7ff fd85 	bl	8005c0e <xmit_datablock>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <USER_SPI_write+0xc4>
				buff += 512;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006110:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	3b01      	subs	r3, #1
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1ee      	bne.n	80060fc <USER_SPI_write+0xa0>
 800611e:	e000      	b.n	8006122 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006120:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006122:	21fd      	movs	r1, #253	@ 0xfd
 8006124:	2000      	movs	r0, #0
 8006126:	f7ff fd72 	bl	8005c0e <xmit_datablock>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <USER_SPI_write+0xd8>
 8006130:	2301      	movs	r3, #1
 8006132:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006134:	f7ff fd1a 	bl	8005b6c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000054 	.word	0x20000054
 8006150:	200003dc 	.word	0x200003dc

08006154 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	@ 0x30
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	603a      	str	r2, [r7, #0]
 800615e:	71fb      	strb	r3, [r7, #7]
 8006160:	460b      	mov	r3, r1
 8006162:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <USER_SPI_ioctl+0x1a>
 800616a:	2304      	movs	r3, #4
 800616c:	e15a      	b.n	8006424 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800616e:	4baf      	ldr	r3, [pc, #700]	@ (800642c <USER_SPI_ioctl+0x2d8>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <USER_SPI_ioctl+0x2c>
 800617c:	2303      	movs	r3, #3
 800617e:	e151      	b.n	8006424 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006186:	79bb      	ldrb	r3, [r7, #6]
 8006188:	2b04      	cmp	r3, #4
 800618a:	f200 8136 	bhi.w	80063fa <USER_SPI_ioctl+0x2a6>
 800618e:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <USER_SPI_ioctl+0x40>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a9 	.word	0x080061a9
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080063fb 	.word	0x080063fb
 80061a0:	08006269 	.word	0x08006269
 80061a4:	0800635f 	.word	0x0800635f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80061a8:	f7ff fcee 	bl	8005b88 <spiselect>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8127 	beq.w	8006402 <USER_SPI_ioctl+0x2ae>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80061ba:	e122      	b.n	8006402 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80061bc:	2100      	movs	r1, #0
 80061be:	2009      	movs	r0, #9
 80061c0:	f7ff fd57 	bl	8005c72 <send_cmd>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 811d 	bne.w	8006406 <USER_SPI_ioctl+0x2b2>
 80061cc:	f107 030c 	add.w	r3, r7, #12
 80061d0:	2110      	movs	r1, #16
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fcf2 	bl	8005bbc <rcvr_datablock>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8113 	beq.w	8006406 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80061e0:	7b3b      	ldrb	r3, [r7, #12]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d111      	bne.n	800620e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80061ea:	7d7b      	ldrb	r3, [r7, #21]
 80061ec:	461a      	mov	r2, r3
 80061ee:	7d3b      	ldrb	r3, [r7, #20]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	4413      	add	r3, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80061fe:	4413      	add	r3, r2
 8006200:	3301      	adds	r3, #1
 8006202:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	029a      	lsls	r2, r3, #10
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e028      	b.n	8006260 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800620e:	7c7b      	ldrb	r3, [r7, #17]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	b2da      	uxtb	r2, r3
 8006216:	7dbb      	ldrb	r3, [r7, #22]
 8006218:	09db      	lsrs	r3, r3, #7
 800621a:	b2db      	uxtb	r3, r3
 800621c:	4413      	add	r3, r2
 800621e:	b2da      	uxtb	r2, r3
 8006220:	7d7b      	ldrb	r3, [r7, #21]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0306 	and.w	r3, r3, #6
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4413      	add	r3, r2
 800622e:	b2db      	uxtb	r3, r3
 8006230:	3302      	adds	r3, #2
 8006232:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006236:	7d3b      	ldrb	r3, [r7, #20]
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	b2db      	uxtb	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	7cfb      	ldrb	r3, [r7, #19]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	441a      	add	r2, r3
 8006244:	7cbb      	ldrb	r3, [r7, #18]
 8006246:	029b      	lsls	r3, r3, #10
 8006248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800624c:	4413      	add	r3, r2
 800624e:	3301      	adds	r3, #1
 8006250:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006252:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006256:	3b09      	subs	r3, #9
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	409a      	lsls	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006266:	e0ce      	b.n	8006406 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006268:	4b71      	ldr	r3, [pc, #452]	@ (8006430 <USER_SPI_ioctl+0x2dc>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d031      	beq.n	80062d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006274:	2100      	movs	r1, #0
 8006276:	208d      	movs	r0, #141	@ 0x8d
 8006278:	f7ff fcfb 	bl	8005c72 <send_cmd>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	f040 80c3 	bne.w	800640a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006284:	20ff      	movs	r0, #255	@ 0xff
 8006286:	f7ff fc07 	bl	8005a98 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	2110      	movs	r1, #16
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fc93 	bl	8005bbc <rcvr_datablock>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80b6 	beq.w	800640a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800629e:	2330      	movs	r3, #48	@ 0x30
 80062a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80062a4:	e007      	b.n	80062b6 <USER_SPI_ioctl+0x162>
 80062a6:	20ff      	movs	r0, #255	@ 0xff
 80062a8:	f7ff fbf6 	bl	8005a98 <xchg_spi>
 80062ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062b0:	3b01      	subs	r3, #1
 80062b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80062b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f3      	bne.n	80062a6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80062be:	7dbb      	ldrb	r3, [r7, #22]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	2310      	movs	r3, #16
 80062c8:	fa03 f202 	lsl.w	r2, r3, r2
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80062d6:	e098      	b.n	800640a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80062d8:	2100      	movs	r1, #0
 80062da:	2009      	movs	r0, #9
 80062dc:	f7ff fcc9 	bl	8005c72 <send_cmd>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 8091 	bne.w	800640a <USER_SPI_ioctl+0x2b6>
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	2110      	movs	r1, #16
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fc64 	bl	8005bbc <rcvr_datablock>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8087 	beq.w	800640a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80062fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006430 <USER_SPI_ioctl+0x2dc>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006308:	7dbb      	ldrb	r3, [r7, #22]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006310:	7dfa      	ldrb	r2, [r7, #23]
 8006312:	09d2      	lsrs	r2, r2, #7
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	4413      	add	r3, r2
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	7e7b      	ldrb	r3, [r7, #25]
 800631c:	099b      	lsrs	r3, r3, #6
 800631e:	b2db      	uxtb	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	461a      	mov	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e013      	b.n	8006356 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800632e:	7dbb      	ldrb	r3, [r7, #22]
 8006330:	109b      	asrs	r3, r3, #2
 8006332:	b29b      	uxth	r3, r3
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	3301      	adds	r3, #1
 800633a:	7dfa      	ldrb	r2, [r7, #23]
 800633c:	00d2      	lsls	r2, r2, #3
 800633e:	f002 0218 	and.w	r2, r2, #24
 8006342:	7df9      	ldrb	r1, [r7, #23]
 8006344:	0949      	lsrs	r1, r1, #5
 8006346:	b2c9      	uxtb	r1, r1
 8006348:	440a      	add	r2, r1
 800634a:	3201      	adds	r2, #1
 800634c:	fb02 f303 	mul.w	r3, r2, r3
 8006350:	461a      	mov	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800635c:	e055      	b.n	800640a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800635e:	4b34      	ldr	r3, [pc, #208]	@ (8006430 <USER_SPI_ioctl+0x2dc>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	2b00      	cmp	r3, #0
 8006368:	d051      	beq.n	800640e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800636a:	f107 020c 	add.w	r2, r7, #12
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	210b      	movs	r1, #11
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff feee 	bl	8006154 <USER_SPI_ioctl>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d149      	bne.n	8006412 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800637e:	7b3b      	ldrb	r3, [r7, #12]
 8006380:	099b      	lsrs	r3, r3, #6
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <USER_SPI_ioctl+0x23e>
 8006388:	7dbb      	ldrb	r3, [r7, #22]
 800638a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d041      	beq.n	8006416 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80063a2:	4b23      	ldr	r3, [pc, #140]	@ (8006430 <USER_SPI_ioctl+0x2dc>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	025b      	lsls	r3, r3, #9
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80063ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063bc:	2020      	movs	r0, #32
 80063be:	f7ff fc58 	bl	8005c72 <send_cmd>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d128      	bne.n	800641a <USER_SPI_ioctl+0x2c6>
 80063c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063ca:	2021      	movs	r0, #33	@ 0x21
 80063cc:	f7ff fc51 	bl	8005c72 <send_cmd>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d121      	bne.n	800641a <USER_SPI_ioctl+0x2c6>
 80063d6:	2100      	movs	r1, #0
 80063d8:	2026      	movs	r0, #38	@ 0x26
 80063da:	f7ff fc4a 	bl	8005c72 <send_cmd>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11a      	bne.n	800641a <USER_SPI_ioctl+0x2c6>
 80063e4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80063e8:	f7ff fb9c 	bl	8005b24 <wait_ready>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d013      	beq.n	800641a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80063f8:	e00f      	b.n	800641a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80063fa:	2304      	movs	r3, #4
 80063fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006400:	e00c      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		break;
 8006402:	bf00      	nop
 8006404:	e00a      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		break;
 8006406:	bf00      	nop
 8006408:	e008      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		break;
 800640a:	bf00      	nop
 800640c:	e006      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <USER_SPI_ioctl+0x2c8>
		break;
 800641a:	bf00      	nop
	}

	despiselect();
 800641c:	f7ff fba6 	bl	8005b6c <despiselect>

	return res;
 8006420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006424:	4618      	mov	r0, r3
 8006426:	3730      	adds	r7, #48	@ 0x30
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000054 	.word	0x20000054
 8006430:	200003dc 	.word	0x200003dc

08006434 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <disk_status+0x30>)
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	79fa      	ldrb	r2, [r7, #7]
 800644c:	4905      	ldr	r1, [pc, #20]	@ (8006464 <disk_status+0x30>)
 800644e:	440a      	add	r2, r1
 8006450:	7a12      	ldrb	r2, [r2, #8]
 8006452:	4610      	mov	r0, r2
 8006454:	4798      	blx	r3
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]
  return stat;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000408 	.word	0x20000408

08006468 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <disk_initialize+0x48>)
 800647a:	5cd3      	ldrb	r3, [r2, r3]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d111      	bne.n	80064a4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	4a0b      	ldr	r2, [pc, #44]	@ (80064b0 <disk_initialize+0x48>)
 8006484:	2101      	movs	r1, #1
 8006486:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <disk_initialize+0x48>)
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	79fa      	ldrb	r2, [r7, #7]
 8006496:	4906      	ldr	r1, [pc, #24]	@ (80064b0 <disk_initialize+0x48>)
 8006498:	440a      	add	r2, r1
 800649a:	7a12      	ldrb	r2, [r2, #8]
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000408 	.word	0x20000408

080064b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064b4:	b590      	push	{r4, r7, lr}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4a0a      	ldr	r2, [pc, #40]	@ (80064f0 <disk_read+0x3c>)
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	689c      	ldr	r4, [r3, #8]
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	4a07      	ldr	r2, [pc, #28]	@ (80064f0 <disk_read+0x3c>)
 80064d4:	4413      	add	r3, r2
 80064d6:	7a18      	ldrb	r0, [r3, #8]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	47a0      	blx	r4
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd90      	pop	{r4, r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000408 	.word	0x20000408

080064f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	4a0a      	ldr	r2, [pc, #40]	@ (8006530 <disk_write+0x3c>)
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68dc      	ldr	r4, [r3, #12]
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <disk_write+0x3c>)
 8006514:	4413      	add	r3, r2
 8006516:	7a18      	ldrb	r0, [r3, #8]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	47a0      	blx	r4
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]
  return res;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}
 800652e:	bf00      	nop
 8006530:	20000408 	.word	0x20000408

08006534 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	603a      	str	r2, [r7, #0]
 800653e:	71fb      	strb	r3, [r7, #7]
 8006540:	460b      	mov	r3, r1
 8006542:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	4a09      	ldr	r2, [pc, #36]	@ (800656c <disk_ioctl+0x38>)
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	79fa      	ldrb	r2, [r7, #7]
 8006552:	4906      	ldr	r1, [pc, #24]	@ (800656c <disk_ioctl+0x38>)
 8006554:	440a      	add	r2, r1
 8006556:	7a10      	ldrb	r0, [r2, #8]
 8006558:	79b9      	ldrb	r1, [r7, #6]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4798      	blx	r3
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]
  return res;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000408 	.word	0x20000408

08006570 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006584:	e007      	b.n	8006596 <mem_cpy+0x26>
		*d++ = *s++;
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	1c53      	adds	r3, r2, #1
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1c59      	adds	r1, r3, #1
 8006590:	6179      	str	r1, [r7, #20]
 8006592:	7812      	ldrb	r2, [r2, #0]
 8006594:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f2      	bne.n	8006586 <mem_cpy+0x16>
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80065ae:	b480      	push	{r7}
 80065b0:	b087      	sub	sp, #28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80065be:	e005      	b.n	80065cc <mem_set+0x1e>
		*d++ = (BYTE)val;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	617a      	str	r2, [r7, #20]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f4      	bne.n	80065c0 <mem_set+0x12>
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80065e4:	b480      	push	{r7}
 80065e6:	b089      	sub	sp, #36	@ 0x24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80065fc:	bf00      	nop
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00d      	beq.n	8006624 <mem_cmp+0x40>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	61fa      	str	r2, [r7, #28]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	61ba      	str	r2, [r7, #24]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	1acb      	subs	r3, r1, r3
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0ec      	beq.n	80065fe <mem_cmp+0x1a>
	return r;
 8006624:	697b      	ldr	r3, [r7, #20]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3724      	adds	r7, #36	@ 0x24
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800663c:	e002      	b.n	8006644 <chk_chr+0x12>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3301      	adds	r3, #1
 8006642:	607b      	str	r3, [r7, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <chk_chr+0x26>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	4293      	cmp	r3, r2
 8006656:	d1f2      	bne.n	800663e <chk_chr+0xc>
	return *str;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	781b      	ldrb	r3, [r3, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e038      	b.n	80066ee <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800667c:	4930      	ldr	r1, [pc, #192]	@ (8006740 <chk_lock+0xd8>)
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d029      	beq.n	80066e4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006690:	492b      	ldr	r1, [pc, #172]	@ (8006740 <chk_lock+0xd8>)
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d11e      	bne.n	80066e8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80066aa:	4925      	ldr	r1, [pc, #148]	@ (8006740 <chk_lock+0xd8>)
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4613      	mov	r3, r2
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	3304      	adds	r3, #4
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d110      	bne.n	80066e8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80066c6:	491e      	ldr	r1, [pc, #120]	@ (8006740 <chk_lock+0xd8>)
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3308      	adds	r3, #8
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 80066de:	429a      	cmp	r2, r3
 80066e0:	d102      	bne.n	80066e8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80066e2:	e007      	b.n	80066f4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d9c3      	bls.n	800667c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d109      	bne.n	800670e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <chk_lock+0x9e>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d101      	bne.n	800670a <chk_lock+0xa2>
 8006706:	2300      	movs	r3, #0
 8006708:	e013      	b.n	8006732 <chk_lock+0xca>
 800670a:	2312      	movs	r3, #18
 800670c:	e011      	b.n	8006732 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <chk_lock+0xc4>
 8006714:	490a      	ldr	r1, [pc, #40]	@ (8006740 <chk_lock+0xd8>)
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	330a      	adds	r3, #10
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800672a:	d101      	bne.n	8006730 <chk_lock+0xc8>
 800672c:	2310      	movs	r3, #16
 800672e:	e000      	b.n	8006732 <chk_lock+0xca>
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	200003f0 	.word	0x200003f0

08006744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800674a:	2300      	movs	r3, #0
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	e002      	b.n	8006756 <enq_lock+0x12>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3301      	adds	r3, #1
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d809      	bhi.n	8006770 <enq_lock+0x2c>
 800675c:	490a      	ldr	r1, [pc, #40]	@ (8006788 <enq_lock+0x44>)
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1ef      	bne.n	8006750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	bf14      	ite	ne
 8006776:	2301      	movne	r3, #1
 8006778:	2300      	moveq	r3, #0
 800677a:	b2db      	uxtb	r3, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	200003f0 	.word	0x200003f0

0800678c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e02b      	b.n	80067f4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800679c:	4956      	ldr	r1, [pc, #344]	@ (80068f8 <inc_lock+0x16c>)
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4613      	mov	r3, r2
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d11b      	bne.n	80067ee <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80067b6:	4950      	ldr	r1, [pc, #320]	@ (80068f8 <inc_lock+0x16c>)
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3304      	adds	r3, #4
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d10d      	bne.n	80067ee <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80067d2:	4949      	ldr	r1, [pc, #292]	@ (80068f8 <inc_lock+0x16c>)
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4613      	mov	r3, r2
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	3308      	adds	r3, #8
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d006      	beq.n	80067fc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d9d0      	bls.n	800679c <inc_lock+0x10>
 80067fa:	e000      	b.n	80067fe <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80067fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d145      	bne.n	8006890 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e002      	b.n	8006810 <inc_lock+0x84>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d809      	bhi.n	800682a <inc_lock+0x9e>
 8006816:	4938      	ldr	r1, [pc, #224]	@ (80068f8 <inc_lock+0x16c>)
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4613      	mov	r3, r2
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1ef      	bne.n	800680a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d101      	bne.n	8006834 <inc_lock+0xa8>
 8006830:	2300      	movs	r3, #0
 8006832:	e05a      	b.n	80068ea <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800683a:	482f      	ldr	r0, [pc, #188]	@ (80068f8 <inc_lock+0x16c>)
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4613      	mov	r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4403      	add	r3, r0
 8006848:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8006850:	4829      	ldr	r0, [pc, #164]	@ (80068f8 <inc_lock+0x16c>)
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4613      	mov	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4403      	add	r3, r0
 800685e:	3304      	adds	r3, #4
 8006860:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8006868:	4923      	ldr	r1, [pc, #140]	@ (80068f8 <inc_lock+0x16c>)
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4613      	mov	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	3308      	adds	r3, #8
 8006878:	4602      	mov	r2, r0
 800687a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800687c:	491e      	ldr	r1, [pc, #120]	@ (80068f8 <inc_lock+0x16c>)
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	330a      	adds	r3, #10
 800688c:	2200      	movs	r2, #0
 800688e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <inc_lock+0x124>
 8006896:	4918      	ldr	r1, [pc, #96]	@ (80068f8 <inc_lock+0x16c>)
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4613      	mov	r3, r2
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	330a      	adds	r3, #10
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <inc_lock+0x124>
 80068ac:	2300      	movs	r3, #0
 80068ae:	e01c      	b.n	80068ea <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <inc_lock+0x142>
 80068b6:	4910      	ldr	r1, [pc, #64]	@ (80068f8 <inc_lock+0x16c>)
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4613      	mov	r3, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	330a      	adds	r3, #10
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	b299      	uxth	r1, r3
 80068cc:	e001      	b.n	80068d2 <inc_lock+0x146>
 80068ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068d2:	4809      	ldr	r0, [pc, #36]	@ (80068f8 <inc_lock+0x16c>)
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4613      	mov	r3, r2
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4403      	add	r3, r0
 80068e0:	330a      	adds	r3, #10
 80068e2:	460a      	mov	r2, r1
 80068e4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	200003f0 	.word	0x200003f0

080068fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3b01      	subs	r3, #1
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d82e      	bhi.n	800696e <dec_lock+0x72>
		n = Files[i].ctr;
 8006910:	491b      	ldr	r1, [pc, #108]	@ (8006980 <dec_lock+0x84>)
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	330a      	adds	r3, #10
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006924:	89fb      	ldrh	r3, [r7, #14]
 8006926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692a:	d101      	bne.n	8006930 <dec_lock+0x34>
 800692c:	2300      	movs	r3, #0
 800692e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006930:	89fb      	ldrh	r3, [r7, #14]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <dec_lock+0x40>
 8006936:	89fb      	ldrh	r3, [r7, #14]
 8006938:	3b01      	subs	r3, #1
 800693a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800693c:	4910      	ldr	r1, [pc, #64]	@ (8006980 <dec_lock+0x84>)
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	330a      	adds	r3, #10
 800694c:	89fa      	ldrh	r2, [r7, #14]
 800694e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d108      	bne.n	8006968 <dec_lock+0x6c>
 8006956:	490a      	ldr	r1, [pc, #40]	@ (8006980 <dec_lock+0x84>)
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	737b      	strb	r3, [r7, #13]
 800696c:	e001      	b.n	8006972 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800696e:	2302      	movs	r3, #2
 8006970:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006972:	7b7b      	ldrb	r3, [r7, #13]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	200003f0 	.word	0x200003f0

08006984 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e016      	b.n	80069c0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006992:	4910      	ldr	r1, [pc, #64]	@ (80069d4 <clear_lock+0x50>)
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4613      	mov	r3, r2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d108      	bne.n	80069ba <clear_lock+0x36>
 80069a8:	490a      	ldr	r1, [pc, #40]	@ (80069d4 <clear_lock+0x50>)
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4613      	mov	r3, r2
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d9e5      	bls.n	8006992 <clear_lock+0xe>
	}
}
 80069c6:	bf00      	nop
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	200003f0 	.word	0x200003f0

080069d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d038      	beq.n	8006a60 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80069f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	2301      	movs	r3, #1
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	f7ff fd77 	bl	80064f4 <disk_write>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
 8006a10:	e026      	b.n	8006a60 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d218      	bcs.n	8006a60 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e010      	b.n	8006a5a <sync_window+0x82>
					wsect += fs->fsize;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4413      	add	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	f7ff fd50 	bl	80064f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d8eb      	bhi.n	8006a38 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d01b      	beq.n	8006abc <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ffa7 	bl	80069d8 <sync_window>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d113      	bne.n	8006abc <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	f7ff fd08 	bl	80064b4 <disk_read>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006aae:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff ff82 	bl	80069d8 <sync_window>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 809b 	bne.w	8006c16 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	f040 8088 	bne.w	8006bfc <sync_fs+0x136>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	f040 8082 	bne.w	8006bfc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fd54 	bl	80065ae <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2255      	movs	r2, #85	@ 0x55
 8006b0a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	22aa      	movs	r2, #170	@ 0xaa
 8006b12:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2252      	movs	r2, #82	@ 0x52
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2252      	movs	r2, #82	@ 0x52
 8006b20:	705a      	strb	r2, [r3, #1]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2261      	movs	r2, #97	@ 0x61
 8006b26:	709a      	strb	r2, [r3, #2]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2241      	movs	r2, #65	@ 0x41
 8006b2c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2272      	movs	r2, #114	@ 0x72
 8006b32:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2272      	movs	r2, #114	@ 0x72
 8006b3a:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2241      	movs	r2, #65	@ 0x41
 8006b42:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2261      	movs	r2, #97	@ 0x61
 8006b4a:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b76:	0c1b      	lsrs	r3, r3, #16
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b86:	0e1b      	lsrs	r3, r3, #24
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006bc8:	0e1b      	lsrs	r3, r3, #24
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f7ff fc80 	bl	80064f4 <disk_write>
			fs->fsi_flag = 0;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fc94 	bl	8006534 <disk_ioctl>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	3b02      	subs	r3, #2
 8006c2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c36:	3b02      	subs	r3, #2
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d301      	bcc.n	8006c42 <clust2sect+0x22>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e00a      	b.n	8006c58 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006c48:	461a      	mov	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	fb03 f202 	mul.w	r2, r3, r2
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8006c56:	4413      	add	r3, r2
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d905      	bls.n	8006c80 <get_fat+0x1c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <get_fat+0x22>
		val = 1;	/* Internal error */
 8006c80:	2301      	movs	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e0a2      	b.n	8006dcc <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d067      	beq.n	8006d66 <get_fat+0x102>
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	f300 808e 	bgt.w	8006db8 <get_fat+0x154>
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d002      	beq.n	8006ca6 <get_fat+0x42>
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d03f      	beq.n	8006d24 <get_fat+0xc0>
 8006ca4:	e088      	b.n	8006db8 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	0a5b      	lsrs	r3, r3, #9
 8006cbe:	4413      	add	r3, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fed1 	bl	8006a6a <move_window>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d177      	bne.n	8006dbe <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	60fa      	str	r2, [r7, #12]
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	5cd3      	ldrb	r3, [r2, r3]
 8006cdc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	0a5b      	lsrs	r3, r3, #9
 8006ce8:	4413      	add	r3, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff febc 	bl	8006a6a <move_window>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d164      	bne.n	8006dc2 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	5cd3      	ldrb	r3, [r2, r3]
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <get_fat+0xb6>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	091b      	lsrs	r3, r3, #4
 8006d18:	e002      	b.n	8006d20 <get_fat+0xbc>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d20:	617b      	str	r3, [r7, #20]
			break;
 8006d22:	e053      	b.n	8006dcc <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	4413      	add	r3, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fe99 	bl	8006a6a <move_window>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d143      	bne.n	8006dc6 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	b21a      	sxth	r2, r3
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b21b      	sxth	r3, r3
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	b21b      	sxth	r3, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	617b      	str	r3, [r7, #20]
			break;
 8006d64:	e032      	b.n	8006dcc <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	09db      	lsrs	r3, r3, #7
 8006d70:	4413      	add	r3, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fe78 	bl	8006a6a <move_window>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d124      	bne.n	8006dca <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3303      	adds	r3, #3
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	061a      	lsls	r2, r3, #24
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3302      	adds	r3, #2
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	3301      	adds	r3, #1
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	4313      	orrs	r3, r2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	7812      	ldrb	r2, [r2, #0]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006db4:	617b      	str	r3, [r7, #20]
			break;
 8006db6:	e009      	b.n	8006dcc <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 8006db8:	2301      	movs	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e006      	b.n	8006dcc <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dbe:	bf00      	nop
 8006dc0:	e004      	b.n	8006dcc <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006dca:	bf00      	nop
		}
	}

	return val;
 8006dcc:	697b      	ldr	r3, [r7, #20]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d905      	bls.n	8006df4 <put_fat+0x1e>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <put_fat+0x24>
		res = FR_INT_ERR;
 8006df4:	2302      	movs	r3, #2
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e0f6      	b.n	8006fe8 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	f000 809e 	beq.w	8006f42 <put_fat+0x16c>
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	f300 80e4 	bgt.w	8006fd4 <put_fat+0x1fe>
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d002      	beq.n	8006e16 <put_fat+0x40>
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d06f      	beq.n	8006ef4 <put_fat+0x11e>
 8006e14:	e0de      	b.n	8006fd4 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	0a5b      	lsrs	r3, r3, #9
 8006e2e:	4413      	add	r3, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fe19 	bl	8006a6a <move_window>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e3c:	7ffb      	ldrb	r3, [r7, #31]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 80cb 	bne.w	8006fda <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	617a      	str	r2, [r7, #20]
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <put_fat+0xa4>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	b25b      	sxtb	r3, r3
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	b25a      	sxtb	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	b25b      	sxtb	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b25b      	sxtb	r3, r3
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e001      	b.n	8006e7e <put_fat+0xa8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	0a5b      	lsrs	r3, r3, #9
 8006e94:	4413      	add	r3, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff fde6 	bl	8006a6a <move_window>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ea2:	7ffb      	ldrb	r3, [r7, #31]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f040 809a 	bne.w	8006fde <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <put_fat+0xf2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	091b      	lsrs	r3, r3, #4
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e00e      	b.n	8006ee6 <put_fat+0x110>
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b25b      	sxtb	r3, r3
 8006ece:	f023 030f 	bic.w	r3, r3, #15
 8006ed2:	b25a      	sxtb	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	b25b      	sxtb	r3, r3
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006ef2:	e079      	b.n	8006fe8 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	4413      	add	r3, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fdb1 	bl	8006a6a <move_window>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d167      	bne.n	8006fe2 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	3301      	adds	r3, #1
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006f40:	e052      	b.n	8006fe8 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	09db      	lsrs	r3, r3, #7
 8006f4c:	4413      	add	r3, r2
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fd8a 	bl	8006a6a <move_window>
 8006f56:	4603      	mov	r3, r0
 8006f58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f5a:	7ffb      	ldrb	r3, [r7, #31]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d142      	bne.n	8006fe6 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	3303      	adds	r3, #3
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	061a      	lsls	r2, r3, #24
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	3302      	adds	r3, #2
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	3301      	adds	r3, #1
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	0c1a      	lsrs	r2, r3, #16
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	3302      	adds	r3, #2
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0e1a      	lsrs	r2, r3, #24
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	3303      	adds	r3, #3
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006fd2:	e009      	b.n	8006fe8 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e006      	b.n	8006fe8 <put_fat+0x212>
			if (res != FR_OK) break;
 8006fda:	bf00      	nop
 8006fdc:	e004      	b.n	8006fe8 <put_fat+0x212>
			if (res != FR_OK) break;
 8006fde:	bf00      	nop
 8006fe0:	e002      	b.n	8006fe8 <put_fat+0x212>
			if (res != FR_OK) break;
 8006fe2:	bf00      	nop
 8006fe4:	e000      	b.n	8006fe8 <put_fat+0x212>
			if (res != FR_OK) break;
 8006fe6:	bf00      	nop
		}
	}

	return res;
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d905      	bls.n	800700e <remove_chain+0x1c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d302      	bcc.n	8007014 <remove_chain+0x22>
		res = FR_INT_ERR;
 800700e:	2302      	movs	r3, #2
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	e043      	b.n	800709c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007018:	e036      	b.n	8007088 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fe21 	bl	8006c64 <get_fat>
 8007022:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d035      	beq.n	8007096 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d102      	bne.n	8007036 <remove_chain+0x44>
 8007030:	2302      	movs	r3, #2
 8007032:	73fb      	strb	r3, [r7, #15]
 8007034:	e032      	b.n	800709c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d102      	bne.n	8007044 <remove_chain+0x52>
 800703e:	2301      	movs	r3, #1
 8007040:	73fb      	strb	r3, [r7, #15]
 8007042:	e02b      	b.n	800709c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007044:	2200      	movs	r2, #0
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff fec4 	bl	8006dd6 <put_fat>
 800704e:	4603      	mov	r3, r0
 8007050:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d120      	bne.n	800709a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007062:	d00f      	beq.n	8007084 <remove_chain+0x92>
				fs->free_clust++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d3c2      	bcc.n	800701a <remove_chain+0x28>
 8007094:	e002      	b.n	800709c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <remove_chain+0xaa>
			if (res != FR_OK) break;
 800709a:	bf00      	nop
		}
	}

	return res;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80070bc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <create_chain+0x2a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d31c      	bcc.n	800710a <create_chain+0x64>
 80070d0:	2301      	movs	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	e019      	b.n	800710a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fdc3 	bl	8006c64 <get_fat>
 80070de:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d801      	bhi.n	80070ea <create_chain+0x44>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e076      	b.n	80071d8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d101      	bne.n	80070f6 <create_chain+0x50>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	e070      	b.n	80071d8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d201      	bcs.n	8007106 <create_chain+0x60>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	e068      	b.n	80071d8 <create_chain+0x132>
		scl = clst;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	3301      	adds	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	429a      	cmp	r2, r3
 800711e:	d307      	bcc.n	8007130 <create_chain+0x8a>
			ncl = 2;
 8007120:	2302      	movs	r3, #2
 8007122:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d901      	bls.n	8007130 <create_chain+0x8a>
 800712c:	2300      	movs	r3, #0
 800712e:	e053      	b.n	80071d8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007130:	6979      	ldr	r1, [r7, #20]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fd96 	bl	8006c64 <get_fat>
 8007138:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d002      	beq.n	800714e <create_chain+0xa8>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <create_chain+0xac>
			return cs;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	e042      	b.n	80071d8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	429a      	cmp	r2, r3
 8007158:	d1d9      	bne.n	800710e <create_chain+0x68>
 800715a:	2300      	movs	r3, #0
 800715c:	e03c      	b.n	80071d8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800715e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007160:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8007164:	6979      	ldr	r1, [r7, #20]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff fe35 	bl	8006dd6 <put_fat>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <create_chain+0xe4>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d006      	beq.n	800718a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fe28 	bl	8006dd6 <put_fat>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d11a      	bne.n	80071c6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d018      	beq.n	80071d6 <create_chain+0x130>
			fs->free_clust--;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 80071c4:	e007      	b.n	80071d6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d102      	bne.n	80071d2 <create_chain+0x12c>
 80071cc:	f04f 33ff 	mov.w	r3, #4294967295
 80071d0:	e000      	b.n	80071d4 <create_chain+0x12e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80071d6:	697b      	ldr	r3, [r7, #20]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80071f0:	3304      	adds	r3, #4
 80071f2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	0a5b      	lsrs	r3, r3, #9
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80071fe:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007202:	fbb3 f3f2 	udiv	r3, r3, r2
 8007206:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1d1a      	adds	r2, r3, #4
 800720c:	613a      	str	r2, [r7, #16]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <clmt_clust+0x3c>
 8007218:	2300      	movs	r3, #0
 800721a:	e010      	b.n	800723e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	429a      	cmp	r2, r3
 8007222:	d307      	bcc.n	8007234 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	3304      	adds	r3, #4
 8007230:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007232:	e7e9      	b.n	8007208 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007234:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4413      	add	r3, r2
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007264:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d007      	beq.n	800727c <dir_sdi+0x32>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007272:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	429a      	cmp	r2, r3
 800727a:	d301      	bcc.n	8007280 <dir_sdi+0x36>
		return FR_INT_ERR;
 800727c:	2302      	movs	r3, #2
 800727e:	e074      	b.n	800736a <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10c      	bne.n	80072a0 <dir_sdi+0x56>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800728c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007290:	2b03      	cmp	r3, #3
 8007292:	d105      	bne.n	80072a0 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800729a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800729e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d111      	bne.n	80072ca <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80072ac:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80072b0:	461a      	mov	r2, r3
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d301      	bcc.n	80072bc <dir_sdi+0x72>
			return FR_INT_ERR;
 80072b8:	2302      	movs	r3, #2
 80072ba:	e056      	b.n	800736a <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80072c2:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	e032      	b.n	8007330 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80072d0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80072d8:	e01e      	b.n	8007318 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80072e0:	6979      	ldr	r1, [r7, #20]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fcbe 	bl	8006c64 <get_fat>
 80072e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d101      	bne.n	80072f6 <dir_sdi+0xac>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e039      	b.n	800736a <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d907      	bls.n	800730c <dir_sdi+0xc2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007302:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	429a      	cmp	r2, r3
 800730a:	d301      	bcc.n	8007310 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800730c:	2302      	movs	r3, #2
 800730e:	e02c      	b.n	800736a <dir_sdi+0x120>
			idx -= ic;
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	429a      	cmp	r2, r3
 800731e:	d2dc      	bcs.n	80072da <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff fc79 	bl	8006c20 <clust2sect>
 800732e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <dir_sdi+0xf8>
 800733e:	2302      	movs	r3, #2
 8007340:	e013      	b.n	800736a <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	091a      	lsrs	r2, r3, #4
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	441a      	add	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007356:	461a      	mov	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	015b      	lsls	r3, r3, #5
 8007360:	441a      	add	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007372:	b590      	push	{r4, r7, lr}
 8007374:	b087      	sub	sp, #28
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <dir_next+0x26>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <dir_next+0x2a>
		return FR_NO_FILE;
 8007398:	2304      	movs	r3, #4
 800739a:	e0dd      	b.n	8007558 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 80c6 	bne.w	8007534 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80073c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80073ca:	461a      	mov	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4293      	cmp	r3, r2
 80073d0:	f0c0 80b0 	bcc.w	8007534 <dir_next+0x1c2>
				return FR_NO_FILE;
 80073d4:	2304      	movs	r3, #4
 80073d6:	e0bf      	b.n	8007558 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	091b      	lsrs	r3, r3, #4
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80073e2:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80073e6:	3a01      	subs	r2, #1
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 80a2 	bne.w	8007534 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f7ff fc30 	bl	8006c64 <get_fat>
 8007404:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d801      	bhi.n	8007410 <dir_next+0x9e>
 800740c:	2302      	movs	r3, #2
 800740e:	e0a3      	b.n	8007558 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d101      	bne.n	800741c <dir_next+0xaa>
 8007418:	2301      	movs	r3, #1
 800741a:	e09d      	b.n	8007558 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007422:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	429a      	cmp	r2, r3
 800742a:	d374      	bcc.n	8007516 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <dir_next+0xc4>
 8007432:	2304      	movs	r3, #4
 8007434:	e090      	b.n	8007558 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7ff fe2e 	bl	80070a6 <create_chain>
 800744a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <dir_next+0xe4>
 8007452:	2307      	movs	r3, #7
 8007454:	e080      	b.n	8007558 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <dir_next+0xee>
 800745c:	2302      	movs	r3, #2
 800745e:	e07b      	b.n	8007558 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d101      	bne.n	800746c <dir_next+0xfa>
 8007468:	2301      	movs	r3, #1
 800746a:	e075      	b.n	8007558 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fab0 	bl	80069d8 <sync_window>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <dir_next+0x110>
 800747e:	2301      	movs	r3, #1
 8007480:	e06a      	b.n	8007558 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff f88d 	bl	80065ae <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 80074a0:	6979      	ldr	r1, [r7, #20]
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7ff fbbc 	bl	8006c20 <clust2sect>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e01b      	b.n	80074ec <dir_next+0x17a>
						dp->fs->wflag = 1;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fa86 	bl	80069d8 <sync_window>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <dir_next+0x164>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e040      	b.n	8007558 <dir_next+0x1e6>
						dp->fs->winsect++;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074dc:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80074e0:	3201      	adds	r2, #1
 80074e2:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074f2:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80074f6:	461a      	mov	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d3da      	bcc.n	80074b4 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007504:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	1a8a      	subs	r2, r1, r2
 8007512:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007524:	6979      	ldr	r1, [r7, #20]
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fb7a 	bl	8006c20 <clust2sect>
 800752c:	4602      	mov	r2, r0
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007544:	461a      	mov	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	015b      	lsls	r3, r3, #5
 800754e:	441a      	add	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd90      	pop	{r4, r7, pc}

08007560 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800756a:	2100      	movs	r1, #0
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff fe6c 	bl	800724a <dir_sdi>
 8007572:	4603      	mov	r3, r0
 8007574:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d131      	bne.n	80075e0 <dir_alloc+0x80>
		n = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7ff fa6b 	bl	8006a6a <move_window>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d11f      	bne.n	80075de <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2be5      	cmp	r3, #229	@ 0xe5
 80075a8:	d005      	beq.n	80075b6 <dir_alloc+0x56>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d102      	bne.n	80075ca <dir_alloc+0x6a>
 80075c4:	e00c      	b.n	80075e0 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fed0 	bl	8007372 <dir_next>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0d1      	beq.n	8007580 <dir_alloc+0x20>
 80075dc:	e000      	b.n	80075e0 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80075de:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d101      	bne.n	80075ea <dir_alloc+0x8a>
 80075e6:	2307      	movs	r3, #7
 80075e8:	73fb      	strb	r3, [r7, #15]
	return res;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	331b      	adds	r3, #27
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	021b      	lsls	r3, r3, #8
 8007606:	b21a      	sxth	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	331a      	adds	r3, #26
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b21b      	sxth	r3, r3
 8007610:	4313      	orrs	r3, r2
 8007612:	b21b      	sxth	r3, r3
 8007614:	b29b      	uxth	r3, r3
 8007616:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800761e:	2b03      	cmp	r3, #3
 8007620:	d10f      	bne.n	8007642 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	3315      	adds	r3, #21
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	b21a      	sxth	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b21b      	sxth	r3, r3
 8007634:	4313      	orrs	r3, r2
 8007636:	b21b      	sxth	r3, r3
 8007638:	b29b      	uxth	r3, r3
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

	return cl;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	331a      	adds	r3, #26
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	331b      	adds	r3, #27
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	0c1a      	lsrs	r2, r3, #16
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3314      	adds	r3, #20
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	0c1b      	lsrs	r3, r3, #16
 8007684:	b29b      	uxth	r3, r3
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3315      	adds	r3, #21
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	701a      	strb	r2, [r3, #0]
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80076a6:	2100      	movs	r1, #0
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff fdce 	bl	800724a <dir_sdi>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <dir_find+0x1e>
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	e03b      	b.n	8007734 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	f7ff f9cd 	bl	8006a6a <move_window>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d128      	bne.n	800772c <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80076e0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <dir_find+0x56>
 80076ee:	2304      	movs	r3, #4
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e01e      	b.n	8007732 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	330b      	adds	r3, #11
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <dir_find+0x7a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007708:	220b      	movs	r2, #11
 800770a:	4619      	mov	r1, r3
 800770c:	6938      	ldr	r0, [r7, #16]
 800770e:	f7fe ff69 	bl	80065e4 <mem_cmp>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fe29 	bl	8007372 <dir_next>
 8007720:	4603      	mov	r3, r0
 8007722:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0c8      	beq.n	80076bc <dir_find+0x1e>
 800772a:	e002      	b.n	8007732 <dir_find+0x94>
		if (res != FR_OK) break;
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <dir_find+0x94>
			break;
 8007730:	bf00      	nop

	return res;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff ff0a 	bl	8007560 <dir_alloc>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d126      	bne.n	80077a4 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7ff f980 	bl	8006a6a <move_window>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d117      	bne.n	80077a4 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800777a:	2220      	movs	r2, #32
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe ff15 	bl	80065ae <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007790:	220b      	movs	r2, #11
 8007792:	4619      	mov	r1, r3
 8007794:	f7fe feec 	bl	8006570 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e002      	b.n	80077c8 <create_name+0x18>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80077ce:	d0f8      	beq.n	80077c2 <create_name+0x12>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80077d6:	d0f4      	beq.n	80077c2 <create_name+0x12>
	sfn = dp->fn;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80077de:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80077e0:	220b      	movs	r2, #11
 80077e2:	2120      	movs	r1, #32
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	f7fe fee2 	bl	80065ae <mem_set>
	si = i = b = 0; ni = 8;
 80077ea:	2300      	movs	r3, #0
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	2308      	movs	r3, #8
 80077f8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	617a      	str	r2, [r7, #20]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007808:	7fbb      	ldrb	r3, [r7, #30]
 800780a:	2b20      	cmp	r3, #32
 800780c:	d953      	bls.n	80078b6 <create_name+0x106>
 800780e:	7fbb      	ldrb	r3, [r7, #30]
 8007810:	2b2f      	cmp	r3, #47	@ 0x2f
 8007812:	d050      	beq.n	80078b6 <create_name+0x106>
 8007814:	7fbb      	ldrb	r3, [r7, #30]
 8007816:	2b5c      	cmp	r3, #92	@ 0x5c
 8007818:	d04d      	beq.n	80078b6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800781a:	7fbb      	ldrb	r3, [r7, #30]
 800781c:	2b2e      	cmp	r3, #46	@ 0x2e
 800781e:	d003      	beq.n	8007828 <create_name+0x78>
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	429a      	cmp	r2, r3
 8007826:	d30f      	bcc.n	8007848 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b08      	cmp	r3, #8
 800782c:	d102      	bne.n	8007834 <create_name+0x84>
 800782e:	7fbb      	ldrb	r3, [r7, #30]
 8007830:	2b2e      	cmp	r3, #46	@ 0x2e
 8007832:	d001      	beq.n	8007838 <create_name+0x88>
 8007834:	2306      	movs	r3, #6
 8007836:	e073      	b.n	8007920 <create_name+0x170>
			i = 8; ni = 11;
 8007838:	2308      	movs	r3, #8
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	230b      	movs	r3, #11
 800783e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007840:	7ffb      	ldrb	r3, [r7, #31]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	77fb      	strb	r3, [r7, #31]
 8007846:	e035      	b.n	80078b4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007848:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800784c:	2b00      	cmp	r3, #0
 800784e:	da08      	bge.n	8007862 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8007850:	7ffb      	ldrb	r3, [r7, #31]
 8007852:	f043 0303 	orr.w	r3, r3, #3
 8007856:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007858:	7fbb      	ldrb	r3, [r7, #30]
 800785a:	3b80      	subs	r3, #128	@ 0x80
 800785c:	4a32      	ldr	r2, [pc, #200]	@ (8007928 <create_name+0x178>)
 800785e:	5cd3      	ldrb	r3, [r2, r3]
 8007860:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007862:	7fbb      	ldrb	r3, [r7, #30]
 8007864:	4619      	mov	r1, r3
 8007866:	4831      	ldr	r0, [pc, #196]	@ (800792c <create_name+0x17c>)
 8007868:	f7fe fee3 	bl	8006632 <chk_chr>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <create_name+0xc6>
				return FR_INVALID_NAME;
 8007872:	2306      	movs	r3, #6
 8007874:	e054      	b.n	8007920 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007876:	7fbb      	ldrb	r3, [r7, #30]
 8007878:	2b40      	cmp	r3, #64	@ 0x40
 800787a:	d907      	bls.n	800788c <create_name+0xdc>
 800787c:	7fbb      	ldrb	r3, [r7, #30]
 800787e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007880:	d804      	bhi.n	800788c <create_name+0xdc>
				b |= 2;
 8007882:	7ffb      	ldrb	r3, [r7, #31]
 8007884:	f043 0302 	orr.w	r3, r3, #2
 8007888:	77fb      	strb	r3, [r7, #31]
 800788a:	e00c      	b.n	80078a6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800788c:	7fbb      	ldrb	r3, [r7, #30]
 800788e:	2b60      	cmp	r3, #96	@ 0x60
 8007890:	d909      	bls.n	80078a6 <create_name+0xf6>
 8007892:	7fbb      	ldrb	r3, [r7, #30]
 8007894:	2b7a      	cmp	r3, #122	@ 0x7a
 8007896:	d806      	bhi.n	80078a6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8007898:	7ffb      	ldrb	r3, [r7, #31]
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	7fbb      	ldrb	r3, [r7, #30]
 80078a2:	3b20      	subs	r3, #32
 80078a4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	613a      	str	r2, [r7, #16]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	4413      	add	r3, r2
 80078b0:	7fba      	ldrb	r2, [r7, #30]
 80078b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80078b4:	e7a1      	b.n	80077fa <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	441a      	add	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80078c0:	7fbb      	ldrb	r3, [r7, #30]
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d801      	bhi.n	80078ca <create_name+0x11a>
 80078c6:	2304      	movs	r3, #4
 80078c8:	e000      	b.n	80078cc <create_name+0x11c>
 80078ca:	2300      	movs	r3, #0
 80078cc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <create_name+0x128>
 80078d4:	2306      	movs	r3, #6
 80078d6:	e023      	b.n	8007920 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2be5      	cmp	r3, #229	@ 0xe5
 80078de:	d102      	bne.n	80078e6 <create_name+0x136>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2205      	movs	r2, #5
 80078e4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d102      	bne.n	80078f2 <create_name+0x142>
 80078ec:	7ffb      	ldrb	r3, [r7, #31]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80078f2:	7ffb      	ldrb	r3, [r7, #31]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d103      	bne.n	8007904 <create_name+0x154>
 80078fc:	7fbb      	ldrb	r3, [r7, #30]
 80078fe:	f043 0310 	orr.w	r3, r3, #16
 8007902:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007904:	7ffb      	ldrb	r3, [r7, #31]
 8007906:	f003 030c 	and.w	r3, r3, #12
 800790a:	2b04      	cmp	r3, #4
 800790c:	d103      	bne.n	8007916 <create_name+0x166>
 800790e:	7fbb      	ldrb	r3, [r7, #30]
 8007910:	f043 0308 	orr.w	r3, r3, #8
 8007914:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	330b      	adds	r3, #11
 800791a:	7fba      	ldrb	r2, [r7, #30]
 800791c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800791e:	2300      	movs	r3, #0
#endif
}
 8007920:	4618      	mov	r0, r3
 8007922:	3720      	adds	r7, #32
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	08009934 	.word	0x08009934
 800792c:	080098b8 	.word	0x080098b8

08007930 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007940:	d003      	beq.n	800794a <follow_path+0x1a>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b5c      	cmp	r3, #92	@ 0x5c
 8007948:	d102      	bne.n	8007950 <follow_path+0x20>
		path++;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	3301      	adds	r3, #1
 800794e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b1f      	cmp	r3, #31
 800795e:	d80a      	bhi.n	8007976 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8007960:	2100      	movs	r1, #0
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fc71 	bl	800724a <dir_sdi>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8007974:	e045      	b.n	8007a02 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007976:	463b      	mov	r3, r7
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff ff18 	bl	80077b0 <create_name>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d136      	bne.n	80079f8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fe87 	bl	800769e <dir_find>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800799a:	7adb      	ldrb	r3, [r3, #11]
 800799c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d128      	bne.n	80079fc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d123      	bne.n	80079fc <follow_path+0xcc>
 80079b4:	2305      	movs	r3, #5
 80079b6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80079b8:	e020      	b.n	80079fc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11d      	bne.n	8007a00 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80079ca:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	330b      	adds	r3, #11
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80079da:	2305      	movs	r3, #5
 80079dc:	73fb      	strb	r3, [r7, #15]
 80079de:	e010      	b.n	8007a02 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fe03 	bl	80075f4 <ld_clust>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079f6:	e7be      	b.n	8007976 <follow_path+0x46>
			if (res != FR_OK) break;
 80079f8:	bf00      	nop
 80079fa:	e002      	b.n	8007a02 <follow_path+0xd2>
				break;
 80079fc:	bf00      	nop
 80079fe:	e000      	b.n	8007a02 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a00:	bf00      	nop
		}
	}

	return res;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295
 8007a18:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d031      	beq.n	8007a86 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e002      	b.n	8007a30 <get_ldnumber+0x24>
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d903      	bls.n	8007a40 <get_ldnumber+0x34>
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a3e:	d1f4      	bne.n	8007a2a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a46:	d11c      	bne.n	8007a82 <get_ldnumber+0x76>
			tp = *path;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	60fa      	str	r2, [r7, #12]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	3b30      	subs	r3, #48	@ 0x30
 8007a58:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d80e      	bhi.n	8007a7e <get_ldnumber+0x72>
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d10a      	bne.n	8007a7e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d107      	bne.n	8007a7e <get_ldnumber+0x72>
					vol = (int)i;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	3301      	adds	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	e002      	b.n	8007a88 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007a86:	693b      	ldr	r3, [r7, #16]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aac:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fe ffd9 	bl	8006a6a <move_window>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <check_fs+0x2e>
		return 3;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e04a      	b.n	8007b58 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ac8:	3301      	adds	r3, #1
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	b21a      	sxth	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007ad6:	b21b      	sxth	r3, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	4a20      	ldr	r2, [pc, #128]	@ (8007b60 <check_fs+0xcc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d001      	beq.n	8007ae6 <check_fs+0x52>
		return 2;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	e038      	b.n	8007b58 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3336      	adds	r3, #54	@ 0x36
 8007aea:	3303      	adds	r3, #3
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	061a      	lsls	r2, r3, #24
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3336      	adds	r3, #54	@ 0x36
 8007af4:	3302      	adds	r3, #2
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3336      	adds	r3, #54	@ 0x36
 8007b00:	3301      	adds	r3, #1
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007b14:	4a13      	ldr	r2, [pc, #76]	@ (8007b64 <check_fs+0xd0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d101      	bne.n	8007b1e <check_fs+0x8a>
		return 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e01c      	b.n	8007b58 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3352      	adds	r3, #82	@ 0x52
 8007b22:	3303      	adds	r3, #3
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	061a      	lsls	r2, r3, #24
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3352      	adds	r3, #82	@ 0x52
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3352      	adds	r3, #82	@ 0x52
 8007b38:	3301      	adds	r3, #1
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007b4c:	4a05      	ldr	r2, [pc, #20]	@ (8007b64 <check_fs+0xd0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d101      	bne.n	8007b56 <check_fs+0xc2>
		return 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <check_fs+0xc4>

	return 1;
 8007b56:	2301      	movs	r3, #1
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	ffffaa55 	.word	0xffffaa55
 8007b64:	00544146 	.word	0x00544146

08007b68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b096      	sub	sp, #88	@ 0x58
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4613      	mov	r3, r2
 8007b74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007b7c:	68b8      	ldr	r0, [r7, #8]
 8007b7e:	f7ff ff45 	bl	8007a0c <get_ldnumber>
 8007b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da01      	bge.n	8007b8e <find_volume+0x26>
 8007b8a:	230b      	movs	r3, #11
 8007b8c:	e2a8      	b.n	80080e0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b8e:	4a9d      	ldr	r2, [pc, #628]	@ (8007e04 <find_volume+0x29c>)
 8007b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b96:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <find_volume+0x3a>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	e29e      	b.n	80080e0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01b      	beq.n	8007bea <find_volume+0x82>
		stat = disk_status(fs->drv);
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fc3b 	bl	8006434 <disk_status>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10c      	bne.n	8007bea <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <find_volume+0x7e>
 8007bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8007be2:	230a      	movs	r3, #10
 8007be4:	e27c      	b.n	80080e0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8007be6:	2300      	movs	r3, #0
 8007be8:	e27a      	b.n	80080e0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fc30 	bl	8006468 <disk_initialize>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e260      	b.n	80080e0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <find_volume+0xcc>
 8007c24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007c30:	230a      	movs	r3, #10
 8007c32:	e255      	b.n	80080e0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007c38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c3c:	f7ff ff2a 	bl	8007a94 <check_fs>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007c46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d153      	bne.n	8007cf6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007c4e:	2300      	movs	r3, #0
 8007c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c52:	e028      	b.n	8007ca6 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007c5e:	4413      	add	r3, r2
 8007c60:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	3304      	adds	r3, #4
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d012      	beq.n	8007c92 <find_volume+0x12a>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	330b      	adds	r3, #11
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	061a      	lsls	r2, r3, #24
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	330a      	adds	r3, #10
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	3309      	adds	r3, #9
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	4313      	orrs	r3, r2
 8007c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8a:	3208      	adds	r2, #8
 8007c8c:	7812      	ldrb	r2, [r2, #0]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	e000      	b.n	8007c94 <find_volume+0x12c>
 8007c92:	2200      	movs	r2, #0
 8007c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	3358      	adds	r3, #88	@ 0x58
 8007c9a:	443b      	add	r3, r7
 8007c9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d9d3      	bls.n	8007c54 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007cac:	2300      	movs	r3, #0
 8007cae:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <find_volume+0x154>
 8007cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	3358      	adds	r3, #88	@ 0x58
 8007cc2:	443b      	add	r3, r7
 8007cc4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007cc8:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <find_volume+0x174>
 8007cd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007cd4:	f7ff fede 	bl	8007a94 <check_fs>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	e000      	b.n	8007cde <find_volume+0x176>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <find_volume+0x18e>
 8007cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cec:	3301      	adds	r3, #1
 8007cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d9e2      	bls.n	8007cbc <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007cf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d101      	bne.n	8007d02 <find_volume+0x19a>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e1ee      	b.n	80080e0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007d02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <find_volume+0x1a6>
 8007d0a:	230d      	movs	r3, #13
 8007d0c:	e1e8      	b.n	80080e0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	7b1b      	ldrb	r3, [r3, #12]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b21a      	sxth	r2, r3
 8007d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d18:	7adb      	ldrb	r3, [r3, #11]
 8007d1a:	b21b      	sxth	r3, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b21b      	sxth	r3, r3
 8007d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d24:	d001      	beq.n	8007d2a <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8007d26:	230d      	movs	r3, #13
 8007d28:	e1da      	b.n	80080e0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2c:	7ddb      	ldrb	r3, [r3, #23]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	b21a      	sxth	r2, r3
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	7d9b      	ldrb	r3, [r3, #22]
 8007d36:	b21b      	sxth	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d112      	bne.n	8007d6c <find_volume+0x204>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d48:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007d4c:	061a      	lsls	r2, r3, #24
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d50:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	431a      	orrs	r2, r3
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	4313      	orrs	r3, r2
 8007d62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d64:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d70:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	7c1a      	ldrb	r2, [r3, #16]
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d80:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d006      	beq.n	8007d96 <find_volume+0x22e>
 8007d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d001      	beq.n	8007d96 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8007d92:	230d      	movs	r3, #13
 8007d94:	e1a4      	b.n	80080e0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d98:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da0:	fb02 f303 	mul.w	r3, r2, r3
 8007da4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da8:	7b5a      	ldrb	r2, [r3, #13]
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dac:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <find_volume+0x268>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8007dd0:	230d      	movs	r3, #13
 8007dd2:	e185      	b.n	80080e0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	7c9b      	ldrb	r3, [r3, #18]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	b21a      	sxth	r2, r3
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	7c5b      	ldrb	r3, [r3, #17]
 8007de0:	b21b      	sxth	r3, r3
 8007de2:	4313      	orrs	r3, r2
 8007de4:	b21b      	sxth	r3, r3
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8007dfe:	230d      	movs	r3, #13
 8007e00:	e16e      	b.n	80080e0 <find_volume+0x578>
 8007e02:	bf00      	nop
 8007e04:	200003e8 	.word	0x200003e8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0a:	7d1b      	ldrb	r3, [r3, #20]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	b21a      	sxth	r2, r3
 8007e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e12:	7cdb      	ldrb	r3, [r3, #19]
 8007e14:	b21b      	sxth	r3, r3
 8007e16:	4313      	orrs	r3, r2
 8007e18:	b21b      	sxth	r3, r3
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d112      	bne.n	8007e4a <find_volume+0x2e2>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007e2a:	061a      	lsls	r2, r3, #24
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	431a      	orrs	r2, r3
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	7bdb      	ldrb	r3, [r3, #15]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	b21a      	sxth	r2, r3
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	7b9b      	ldrb	r3, [r3, #14]
 8007e56:	b21b      	sxth	r3, r3
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	b21b      	sxth	r3, r3
 8007e5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007e5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <find_volume+0x300>
 8007e64:	230d      	movs	r3, #13
 8007e66:	e13b      	b.n	80080e0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007e68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6c:	4413      	add	r3, r2
 8007e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e70:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8007e74:	0912      	lsrs	r2, r2, #4
 8007e76:	b292      	uxth	r2, r2
 8007e78:	4413      	add	r3, r2
 8007e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d201      	bcs.n	8007e88 <find_volume+0x320>
 8007e84:	230d      	movs	r3, #13
 8007e86:	e12b      	b.n	80080e0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e90:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <find_volume+0x33c>
 8007ea0:	230d      	movs	r3, #13
 8007ea2:	e11d      	b.n	80080e0 <find_volume+0x578>
	fmt = FS_FAT12;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d902      	bls.n	8007eba <find_volume+0x352>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d902      	bls.n	8007eca <find_volume+0x362>
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ed8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007edc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee0:	441a      	add	r2, r3
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007ee8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	441a      	add	r2, r3
 8007eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef0:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8007ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d121      	bne.n	8007f40 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efe:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <find_volume+0x3a2>
 8007f06:	230d      	movs	r3, #13
 8007f08:	e0ea      	b.n	80080e0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f10:	061a      	lsls	r2, r3, #24
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	4313      	orrs	r3, r2
 8007f26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f28:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f30:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f3e:	e025      	b.n	8007f8c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <find_volume+0x3e6>
 8007f4a:	230d      	movs	r3, #13
 8007f4c:	e0c8      	b.n	80080e0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8007f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f56:	441a      	add	r2, r3
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d104      	bne.n	8007f70 <find_volume+0x408>
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	e00c      	b.n	8007f8a <find_volume+0x422>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007f76:	4613      	mov	r3, r2
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	4413      	add	r3, r2
 8007f7c:	085a      	lsrs	r2, r3, #1
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007f8a:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f94:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007f98:	0a5b      	lsrs	r3, r3, #9
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d201      	bcs.n	8007fa2 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8007f9e:	230d      	movs	r3, #13
 8007fa0:	e09e      	b.n	80080e0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	2280      	movs	r2, #128	@ 0x80
 8007fbc:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d177      	bne.n	80080b8 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	b21a      	sxth	r2, r3
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007fd8:	b21b      	sxth	r3, r3
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	b21b      	sxth	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d16a      	bne.n	80080b8 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fea:	f7fe fd3e 	bl	8006a6a <move_window>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d161      	bne.n	80080b8 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	b21a      	sxth	r2, r3
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800800c:	b21b      	sxth	r3, r3
 800800e:	4313      	orrs	r3, r2
 8008010:	b21b      	sxth	r3, r3
 8008012:	4a35      	ldr	r2, [pc, #212]	@ (80080e8 <find_volume+0x580>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d14f      	bne.n	80080b8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	78db      	ldrb	r3, [r3, #3]
 800801c:	061a      	lsls	r2, r3, #24
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	789b      	ldrb	r3, [r3, #2]
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	431a      	orrs	r2, r3
 8008026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	4313      	orrs	r3, r2
 800802e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008030:	7812      	ldrb	r2, [r2, #0]
 8008032:	4313      	orrs	r3, r2
 8008034:	4a2d      	ldr	r2, [pc, #180]	@ (80080ec <find_volume+0x584>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d13e      	bne.n	80080b8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8008040:	061a      	lsls	r2, r3, #24
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	4313      	orrs	r3, r2
 8008056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008058:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800805c:	4313      	orrs	r3, r2
 800805e:	4a24      	ldr	r2, [pc, #144]	@ (80080f0 <find_volume+0x588>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d129      	bne.n	80080b8 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800806a:	061a      	lsls	r2, r3, #24
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	431a      	orrs	r2, r3
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800807c:	021b      	lsls	r3, r3, #8
 800807e:	4313      	orrs	r3, r2
 8008080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008082:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8008086:	431a      	orrs	r2, r3
 8008088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8008094:	061a      	lsls	r2, r3, #24
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	431a      	orrs	r2, r3
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	4313      	orrs	r3, r2
 80080aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ac:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80080b0:	431a      	orrs	r2, r3
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80080b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ba:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80080be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80080c2:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <find_volume+0x58c>)
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	4b0a      	ldr	r3, [pc, #40]	@ (80080f4 <find_volume+0x58c>)
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	4b09      	ldr	r3, [pc, #36]	@ (80080f4 <find_volume+0x58c>)
 80080d0:	881a      	ldrh	r2, [r3, #0]
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80080d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080da:	f7fe fc53 	bl	8006984 <clear_lock>
#endif

	return FR_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3758      	adds	r7, #88	@ 0x58
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	ffffaa55 	.word	0xffffaa55
 80080ec:	41615252 	.word	0x41615252
 80080f0:	61417272 	.word	0x61417272
 80080f4:	200003ec 	.word	0x200003ec

080080f8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d022      	beq.n	8008150 <validate+0x58>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01d      	beq.n	8008150 <validate+0x58>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800811a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800811e:	2b00      	cmp	r3, #0
 8008120:	d016      	beq.n	8008150 <validate+0x58>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008128:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8008132:	429a      	cmp	r2, r3
 8008134:	d10c      	bne.n	8008150 <validate+0x58>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800813c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe f977 	bl	8006434 <disk_status>
 8008146:	4603      	mov	r3, r0
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008150:	2309      	movs	r3, #9
 8008152:	e000      	b.n	8008156 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008172:	f107 0310 	add.w	r3, r7, #16
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fc48 	bl	8007a0c <get_ldnumber>
 800817c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	da01      	bge.n	8008188 <f_mount+0x28>
 8008184:	230b      	movs	r3, #11
 8008186:	e02d      	b.n	80081e4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008188:	4a18      	ldr	r2, [pc, #96]	@ (80081ec <f_mount+0x8c>)
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008190:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8008198:	69b8      	ldr	r0, [r7, #24]
 800819a:	f7fe fbf3 	bl	8006984 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	490d      	ldr	r1, [pc, #52]	@ (80081ec <f_mount+0x8c>)
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <f_mount+0x6a>
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d001      	beq.n	80081ce <f_mount+0x6e>
 80081ca:	2300      	movs	r3, #0
 80081cc:	e00a      	b.n	80081e4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80081ce:	f107 0108 	add.w	r1, r7, #8
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	2200      	movs	r2, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fcc5 	bl	8007b68 <find_volume>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	200003e8 	.word	0x200003e8

080081f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80081fc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008200:	6018      	str	r0, [r3, #0]
 8008202:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008206:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800820a:	6019      	str	r1, [r3, #0]
 800820c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008210:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008214:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008216:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800821a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <f_open+0x38>
 8008224:	2309      	movs	r3, #9
 8008226:	e253      	b.n	80086d0 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 8008228:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800822c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008238:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800823c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008240:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008244:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8008248:	7812      	ldrb	r2, [r2, #0]
 800824a:	f002 021f 	and.w	r2, r2, #31
 800824e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008250:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008254:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f023 0301 	bic.w	r3, r3, #1
 800825e:	b2da      	uxtb	r2, r3
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	f107 0320 	add.w	r3, r7, #32
 8008268:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fc7b 	bl	8007b68 <find_volume>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008278:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 8225 	bne.w	80086cc <f_open+0x4dc>
		INIT_BUF(dj);
 8008282:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008286:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800828a:	f107 0214 	add.w	r2, r7, #20
 800828e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008292:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008296:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	f107 0320 	add.w	r3, r7, #32
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fb44 	bl	8007930 <follow_path>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 80082ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082b2:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80082b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082ba:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082be:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d11b      	bne.n	80082fe <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 80082c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80082ce:	2306      	movs	r3, #6
 80082d0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80082d4:	e013      	b.n	80082fe <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082da:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	bf8c      	ite	hi
 80082e4:	2301      	movhi	r3, #1
 80082e6:	2300      	movls	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	f107 0320 	add.w	r3, r7, #32
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe f9b8 	bl	8006668 <chk_lock>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082fe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008302:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	f003 031c 	and.w	r3, r3, #28
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80e6 	beq.w	80084de <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 8008312:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008316:	2b00      	cmp	r3, #0
 8008318:	d027      	beq.n	800836a <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800831a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800831e:	2b04      	cmp	r3, #4
 8008320:	d10e      	bne.n	8008340 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008322:	f7fe fa0f 	bl	8006744 <enq_lock>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <f_open+0x14a>
 800832c:	f107 0320 	add.w	r3, r7, #32
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff fa03 	bl	800773c <dir_register>
 8008336:	4603      	mov	r3, r0
 8008338:	e000      	b.n	800833c <f_open+0x14c>
 800833a:	2312      	movs	r3, #18
 800833c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008340:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008344:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008348:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800834c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8008350:	7812      	ldrb	r2, [r2, #0]
 8008352:	f042 0208 	orr.w	r2, r2, #8
 8008356:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008358:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800835c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008360:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008364:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8008368:	e017      	b.n	800839a <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800836a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800836e:	330b      	adds	r3, #11
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0311 	and.w	r3, r3, #17
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <f_open+0x192>
					res = FR_DENIED;
 800837a:	2307      	movs	r3, #7
 800837c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8008380:	e00b      	b.n	800839a <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008382:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008386:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <f_open+0x1aa>
						res = FR_EXIST;
 8008394:	2308      	movs	r3, #8
 8008396:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800839a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 80c1 	bne.w	8008526 <f_open+0x336>
 80083a4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083a8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80b7 	beq.w	8008526 <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 80083b8:	f7fd fae6 	bl	8005988 <get_fattime>
 80083bc:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80083c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80083c4:	330e      	adds	r3, #14
 80083c6:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	0a1b      	lsrs	r3, r3, #8
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80083dc:	330f      	adds	r3, #15
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80083e6:	0c1a      	lsrs	r2, r3, #16
 80083e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80083ec:	3310      	adds	r3, #16
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80083f6:	0e1a      	lsrs	r2, r3, #24
 80083f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80083fc:	3311      	adds	r3, #17
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008402:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008406:	330b      	adds	r3, #11
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800840c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008410:	331c      	adds	r3, #28
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800841a:	331d      	adds	r3, #29
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]
 8008420:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008424:	331e      	adds	r3, #30
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800842e:	331f      	adds	r3, #31
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008434:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008438:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800843c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008440:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff f8d5 	bl	80075f4 <ld_clust>
 800844a:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800844e:	2100      	movs	r1, #0
 8008450:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8008454:	f7ff f8fc 	bl	8007650 <st_clust>
				dj.fs->wflag = 1;
 8008458:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800845c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008460:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800846a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800846e:	2b00      	cmp	r3, #0
 8008470:	d059      	beq.n	8008526 <f_open+0x336>
					dw = dj.fs->winsect;
 8008472:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008476:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800847a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800847e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8008482:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 8008486:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800848a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800848e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008492:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fdab 	bl	8006ff2 <remove_chain>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 80084a2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d13d      	bne.n	8008526 <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80084aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80084ae:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80084b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80084b6:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80084ba:	3a01      	subs	r2, #1
 80084bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 80084c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80084c4:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80084c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80084cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe faca 	bl	8006a6a <move_window>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80084dc:	e023      	b.n	8008526 <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80084de:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d11f      	bne.n	8008526 <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80084e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80084ea:	330b      	adds	r3, #11
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0310 	and.w	r3, r3, #16
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <f_open+0x30e>
					res = FR_NO_FILE;
 80084f6:	2304      	movs	r3, #4
 80084f8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80084fc:	e013      	b.n	8008526 <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80084fe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008502:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <f_open+0x336>
 8008510:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008514:	330b      	adds	r3, #11
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <f_open+0x336>
						res = FR_DENIED;
 8008520:	2307      	movs	r3, #7
 8008522:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8008526:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800852a:	2b00      	cmp	r3, #0
 800852c:	d151      	bne.n	80085d2 <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800852e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008532:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <f_open+0x368>
				mode |= FA__WRITTEN;
 8008540:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008544:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008548:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800854c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	f042 0220 	orr.w	r2, r2, #32
 8008556:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008558:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800855c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008560:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008564:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8008568:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800856c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8008576:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800857a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8008584:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008588:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800858c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b01      	cmp	r3, #1
 8008594:	bf8c      	ite	hi
 8008596:	2301      	movhi	r3, #1
 8008598:	2300      	movls	r3, #0
 800859a:	b2db      	uxtb	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	f107 0320 	add.w	r3, r7, #32
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe f8f1 	bl	800678c <inc_lock>
 80085aa:	4602      	mov	r2, r0
 80085ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085b0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80085ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085be:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <f_open+0x3e2>
 80085cc:	2302      	movs	r3, #2
 80085ce:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80085d2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d178      	bne.n	80086cc <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 80085da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085de:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80085e8:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80085f2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085f6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008602:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008606:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800860a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800860e:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe ffee 	bl	80075f4 <ld_clust>
 8008618:	4602      	mov	r2, r0
 800861a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800861e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008628:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800862c:	331f      	adds	r3, #31
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	061a      	lsls	r2, r3, #24
 8008632:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008636:	331e      	adds	r3, #30
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	041b      	lsls	r3, r3, #16
 800863c:	431a      	orrs	r2, r3
 800863e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008642:	331d      	adds	r3, #29
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	4313      	orrs	r3, r2
 800864a:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800864e:	321c      	adds	r2, #28
 8008650:	7812      	ldrb	r2, [r2, #0]
 8008652:	431a      	orrs	r2, r3
 8008654:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008658:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8008662:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008666:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8008672:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008676:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008682:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008686:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2200      	movs	r2, #0
 800868e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008692:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008696:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800869a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800869e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086a2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 80086ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086b0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80086ba:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80086be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086c2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80086cc:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b08c      	sub	sp, #48	@ 0x30
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fd00 	bl	80080f8 <validate>
 80086f8:	4603      	mov	r3, r0
 80086fa:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <f_read+0x2c>
 8008702:	7ffb      	ldrb	r3, [r7, #31]
 8008704:	e150      	b.n	80089a8 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8008716:	e147      	b.n	80089a8 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008726:	2307      	movs	r3, #7
 8008728:	e13e      	b.n	80089a8 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	429a      	cmp	r2, r3
 8008740:	f240 812d 	bls.w	800899e <f_read+0x2c4>
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008748:	e129      	b.n	800899e <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	2b00      	cmp	r3, #0
 8008756:	f040 80f2 	bne.w	800893e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008760:	0a5b      	lsrs	r3, r3, #9
 8008762:	b2da      	uxtb	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800876a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800876e:	3b01      	subs	r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	4013      	ands	r3, r2
 8008774:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d139      	bne.n	80087f0 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800878c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800878e:	e018      	b.n	80087c2 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80087a0:	4619      	mov	r1, r3
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7fe fd1c 	bl	80071e0 <clmt_clust>
 80087a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80087aa:	e00a      	b.n	80087c2 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7fe fa52 	bl	8006c64 <get_fat>
 80087c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80087c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d805      	bhi.n	80087d4 <f_read+0xfa>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80087d0:	2302      	movs	r3, #2
 80087d2:	e0e9      	b.n	80089a8 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80087d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d105      	bne.n	80087e8 <f_read+0x10e>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0df      	b.n	80089a8 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fe fa0e 	bl	8006c20 <clust2sect>
 8008804:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d105      	bne.n	8008818 <f_read+0x13e>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008814:	2302      	movs	r3, #2
 8008816:	e0c7      	b.n	80089a8 <f_read+0x2ce>
			sect += csect;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4413      	add	r3, r2
 800881e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	0a5b      	lsrs	r3, r3, #9
 8008824:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d046      	beq.n	80088ba <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800882c:	7dfa      	ldrb	r2, [r7, #23]
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	4413      	add	r3, r2
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8008838:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800883c:	4293      	cmp	r3, r2
 800883e:	d908      	bls.n	8008852 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008846:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800884a:	461a      	mov	r2, r3
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008858:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	6a39      	ldr	r1, [r7, #32]
 8008862:	f7fd fe27 	bl	80064b4 <disk_read>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008874:	2301      	movs	r3, #1
 8008876:	e097      	b.n	80089a8 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800887e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d015      	beq.n	80088b2 <f_read+0x1d8>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008892:	429a      	cmp	r2, r3
 8008894:	d90d      	bls.n	80088b2 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	025b      	lsls	r3, r3, #9
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	4413      	add	r3, r2
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fd fe5f 	bl	8006570 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	025b      	lsls	r3, r3, #9
 80088b6:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 80088b8:	e05b      	b.n	8008972 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d037      	beq.n	8008936 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80088cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01d      	beq.n	8008910 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80088da:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80088e6:	2301      	movs	r3, #1
 80088e8:	f7fd fe04 	bl	80064f4 <disk_write>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80088fa:	2301      	movs	r3, #1
 80088fc:	e054      	b.n	80089a8 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008908:	b2da      	uxtb	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008916:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	2301      	movs	r3, #1
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	f7fd fdc8 	bl	80064b4 <disk_read>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008932:	2301      	movs	r3, #1
 8008934:	e038      	b.n	80089a8 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008948:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 800894e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d901      	bls.n	800895a <f_read+0x280>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800896a:	4619      	mov	r1, r3
 800896c:	6a38      	ldr	r0, [r7, #32]
 800896e:	f7fd fdff 	bl	8006570 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008972:	6a3a      	ldr	r2, [r7, #32]
 8008974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008976:	4413      	add	r3, r2
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	441a      	add	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	441a      	add	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f aed2 	bne.w	800874a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3730      	adds	r7, #48	@ 0x30
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff fb9d 	bl	80080f8 <validate>
 80089be:	4603      	mov	r3, r0
 80089c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 80a8 	bne.w	8008b1a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80089d0:	f003 0320 	and.w	r3, r3, #32
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80a0 	beq.w	8008b1a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80089e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d019      	beq.n	8008a1c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089ee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80089fa:	2301      	movs	r3, #1
 80089fc:	f7fd fd7a 	bl	80064f4 <disk_write>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008a06:	2301      	movs	r3, #1
 8008a08:	e088      	b.n	8008b1c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7fe f81d 	bl	8006a6a <move_window>
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d16f      	bne.n	8008b1a <f_sync+0x16a>
				dir = fp->dir_ptr;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8008a40:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	330b      	adds	r3, #11
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	330b      	adds	r3, #11
 8008a4c:	f042 0220 	orr.w	r2, r2, #32
 8008a50:	b2d2      	uxtb	r2, r2
 8008a52:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	331c      	adds	r3, #28
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	331d      	adds	r3, #29
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008a7c:	0c1a      	lsrs	r2, r3, #16
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	331e      	adds	r3, #30
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008a8c:	0e1a      	lsrs	r2, r3, #24
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	331f      	adds	r3, #31
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6938      	ldr	r0, [r7, #16]
 8008aa0:	f7fe fdd6 	bl	8007650 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008aa4:	f7fc ff70 	bl	8005988 <get_fattime>
 8008aa8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	3316      	adds	r3, #22
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	b2d2      	uxtb	r2, r2
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	3317      	adds	r3, #23
 8008ac0:	b2d2      	uxtb	r2, r2
 8008ac2:	701a      	strb	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	0c1a      	lsrs	r2, r3, #16
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	3318      	adds	r3, #24
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	0e1a      	lsrs	r2, r3, #24
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	3319      	adds	r3, #25
 8008ad8:	b2d2      	uxtb	r2, r2
 8008ada:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	3312      	adds	r3, #18
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	3313      	adds	r3, #19
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008af2:	f023 0320 	bic.w	r3, r3, #32
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd ffd8 	bl	8006ac6 <sync_fs>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ff3f 	bl	80089b0 <f_sync>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d116      	bne.n	8008b6a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fadb 	bl	80080f8 <validate>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10e      	bne.n	8008b6a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fd fed2 	bl	80068fc <dec_lock>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008b8c:	7a5b      	ldrb	r3, [r3, #9]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d831      	bhi.n	8008bf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b94:	4b1c      	ldr	r3, [pc, #112]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008b96:	7a5b      	ldrb	r3, [r3, #9]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008ba2:	4b19      	ldr	r3, [pc, #100]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008ba4:	7a5b      	ldrb	r3, [r3, #9]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	4a17      	ldr	r2, [pc, #92]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008bb2:	4b15      	ldr	r3, [pc, #84]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bb4:	7a5b      	ldrb	r3, [r3, #9]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4b13      	ldr	r3, [pc, #76]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bbc:	4413      	add	r3, r2
 8008bbe:	79fa      	ldrb	r2, [r7, #7]
 8008bc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008bc2:	4b11      	ldr	r3, [pc, #68]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bc4:	7a5b      	ldrb	r3, [r3, #9]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	b2d1      	uxtb	r1, r2
 8008bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bce:	7251      	strb	r1, [r2, #9]
 8008bd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
 8008bd4:	3330      	adds	r3, #48	@ 0x30
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	3301      	adds	r3, #1
 8008be0:	223a      	movs	r2, #58	@ 0x3a
 8008be2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3302      	adds	r3, #2
 8008be8:	222f      	movs	r2, #47	@ 0x2f
 8008bea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	3303      	adds	r3, #3
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	20000408 	.word	0x20000408

08008c0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c16:	2200      	movs	r2, #0
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ffaa 	bl	8008b74 <FATFS_LinkDriverEx>
 8008c20:	4603      	mov	r3, r0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <_vsniprintf_r>:
 8008c2a:	b530      	push	{r4, r5, lr}
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	b09b      	sub	sp, #108	@ 0x6c
 8008c32:	4605      	mov	r5, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	da05      	bge.n	8008c44 <_vsniprintf_r+0x1a>
 8008c38:	238b      	movs	r3, #139	@ 0x8b
 8008c3a:	6003      	str	r3, [r0, #0]
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b01b      	add	sp, #108	@ 0x6c
 8008c42:	bd30      	pop	{r4, r5, pc}
 8008c44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008c4c:	bf14      	ite	ne
 8008c4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c52:	4623      	moveq	r3, r4
 8008c54:	9302      	str	r3, [sp, #8]
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c5c:	9100      	str	r1, [sp, #0]
 8008c5e:	9104      	str	r1, [sp, #16]
 8008c60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008c64:	4669      	mov	r1, sp
 8008c66:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008c68:	f000 f9a0 	bl	8008fac <_svfiprintf_r>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	bfbc      	itt	lt
 8008c70:	238b      	movlt	r3, #139	@ 0x8b
 8008c72:	602b      	strlt	r3, [r5, #0]
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	d0e3      	beq.n	8008c40 <_vsniprintf_r+0x16>
 8008c78:	9b00      	ldr	r3, [sp, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e7df      	b.n	8008c40 <_vsniprintf_r+0x16>

08008c80 <vsniprintf>:
 8008c80:	b507      	push	{r0, r1, r2, lr}
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	4613      	mov	r3, r2
 8008c86:	460a      	mov	r2, r1
 8008c88:	4601      	mov	r1, r0
 8008c8a:	4803      	ldr	r0, [pc, #12]	@ (8008c98 <vsniprintf+0x18>)
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	f7ff ffcc 	bl	8008c2a <_vsniprintf_r>
 8008c92:	b003      	add	sp, #12
 8008c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c98:	20000058 	.word	0x20000058

08008c9c <memset>:
 8008c9c:	4402      	add	r2, r0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d100      	bne.n	8008ca6 <memset+0xa>
 8008ca4:	4770      	bx	lr
 8008ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8008caa:	e7f9      	b.n	8008ca0 <memset+0x4>

08008cac <__errno>:
 8008cac:	4b01      	ldr	r3, [pc, #4]	@ (8008cb4 <__errno+0x8>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000058 	.word	0x20000058

08008cb8 <__libc_init_array>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4d0d      	ldr	r5, [pc, #52]	@ (8008cf0 <__libc_init_array+0x38>)
 8008cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008cf4 <__libc_init_array+0x3c>)
 8008cbe:	1b64      	subs	r4, r4, r5
 8008cc0:	10a4      	asrs	r4, r4, #2
 8008cc2:	2600      	movs	r6, #0
 8008cc4:	42a6      	cmp	r6, r4
 8008cc6:	d109      	bne.n	8008cdc <__libc_init_array+0x24>
 8008cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008cf8 <__libc_init_array+0x40>)
 8008cca:	4c0c      	ldr	r4, [pc, #48]	@ (8008cfc <__libc_init_array+0x44>)
 8008ccc:	f000 fc66 	bl	800959c <_init>
 8008cd0:	1b64      	subs	r4, r4, r5
 8008cd2:	10a4      	asrs	r4, r4, #2
 8008cd4:	2600      	movs	r6, #0
 8008cd6:	42a6      	cmp	r6, r4
 8008cd8:	d105      	bne.n	8008ce6 <__libc_init_array+0x2e>
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce0:	4798      	blx	r3
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7ee      	b.n	8008cc4 <__libc_init_array+0xc>
 8008ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cea:	4798      	blx	r3
 8008cec:	3601      	adds	r6, #1
 8008cee:	e7f2      	b.n	8008cd6 <__libc_init_array+0x1e>
 8008cf0:	080099f0 	.word	0x080099f0
 8008cf4:	080099f0 	.word	0x080099f0
 8008cf8:	080099f0 	.word	0x080099f0
 8008cfc:	080099f4 	.word	0x080099f4

08008d00 <__retarget_lock_acquire_recursive>:
 8008d00:	4770      	bx	lr

08008d02 <__retarget_lock_release_recursive>:
 8008d02:	4770      	bx	lr

08008d04 <_free_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d041      	beq.n	8008d90 <_free_r+0x8c>
 8008d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d10:	1f0c      	subs	r4, r1, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfb8      	it	lt
 8008d16:	18e4      	addlt	r4, r4, r3
 8008d18:	f000 f8e0 	bl	8008edc <__malloc_lock>
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d94 <_free_r+0x90>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	b933      	cbnz	r3, 8008d30 <_free_r+0x2c>
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	6014      	str	r4, [r2, #0]
 8008d26:	4628      	mov	r0, r5
 8008d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2c:	f000 b8dc 	b.w	8008ee8 <__malloc_unlock>
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d908      	bls.n	8008d46 <_free_r+0x42>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	1821      	adds	r1, r4, r0
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	bf01      	itttt	eq
 8008d3c:	6819      	ldreq	r1, [r3, #0]
 8008d3e:	685b      	ldreq	r3, [r3, #4]
 8008d40:	1809      	addeq	r1, r1, r0
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	e7ed      	b.n	8008d22 <_free_r+0x1e>
 8008d46:	461a      	mov	r2, r3
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	b10b      	cbz	r3, 8008d50 <_free_r+0x4c>
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d9fa      	bls.n	8008d46 <_free_r+0x42>
 8008d50:	6811      	ldr	r1, [r2, #0]
 8008d52:	1850      	adds	r0, r2, r1
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d10b      	bne.n	8008d70 <_free_r+0x6c>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	1850      	adds	r0, r2, r1
 8008d5e:	4283      	cmp	r3, r0
 8008d60:	6011      	str	r1, [r2, #0]
 8008d62:	d1e0      	bne.n	8008d26 <_free_r+0x22>
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	6053      	str	r3, [r2, #4]
 8008d6a:	4408      	add	r0, r1
 8008d6c:	6010      	str	r0, [r2, #0]
 8008d6e:	e7da      	b.n	8008d26 <_free_r+0x22>
 8008d70:	d902      	bls.n	8008d78 <_free_r+0x74>
 8008d72:	230c      	movs	r3, #12
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	e7d6      	b.n	8008d26 <_free_r+0x22>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf04      	itt	eq
 8008d80:	6819      	ldreq	r1, [r3, #0]
 8008d82:	685b      	ldreq	r3, [r3, #4]
 8008d84:	6063      	str	r3, [r4, #4]
 8008d86:	bf04      	itt	eq
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	6054      	str	r4, [r2, #4]
 8008d8e:	e7ca      	b.n	8008d26 <_free_r+0x22>
 8008d90:	bd38      	pop	{r3, r4, r5, pc}
 8008d92:	bf00      	nop
 8008d94:	20000558 	.word	0x20000558

08008d98 <sbrk_aligned>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008dd8 <sbrk_aligned+0x40>)
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	6831      	ldr	r1, [r6, #0]
 8008da0:	4605      	mov	r5, r0
 8008da2:	b911      	cbnz	r1, 8008daa <sbrk_aligned+0x12>
 8008da4:	f000 fba6 	bl	80094f4 <_sbrk_r>
 8008da8:	6030      	str	r0, [r6, #0]
 8008daa:	4621      	mov	r1, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	f000 fba1 	bl	80094f4 <_sbrk_r>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d103      	bne.n	8008dbe <sbrk_aligned+0x26>
 8008db6:	f04f 34ff 	mov.w	r4, #4294967295
 8008dba:	4620      	mov	r0, r4
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	1cc4      	adds	r4, r0, #3
 8008dc0:	f024 0403 	bic.w	r4, r4, #3
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d0f8      	beq.n	8008dba <sbrk_aligned+0x22>
 8008dc8:	1a21      	subs	r1, r4, r0
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 fb92 	bl	80094f4 <_sbrk_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d1f2      	bne.n	8008dba <sbrk_aligned+0x22>
 8008dd4:	e7ef      	b.n	8008db6 <sbrk_aligned+0x1e>
 8008dd6:	bf00      	nop
 8008dd8:	20000554 	.word	0x20000554

08008ddc <_malloc_r>:
 8008ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de0:	1ccd      	adds	r5, r1, #3
 8008de2:	f025 0503 	bic.w	r5, r5, #3
 8008de6:	3508      	adds	r5, #8
 8008de8:	2d0c      	cmp	r5, #12
 8008dea:	bf38      	it	cc
 8008dec:	250c      	movcc	r5, #12
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	4606      	mov	r6, r0
 8008df2:	db01      	blt.n	8008df8 <_malloc_r+0x1c>
 8008df4:	42a9      	cmp	r1, r5
 8008df6:	d904      	bls.n	8008e02 <_malloc_r+0x26>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ed8 <_malloc_r+0xfc>
 8008e06:	f000 f869 	bl	8008edc <__malloc_lock>
 8008e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e0e:	461c      	mov	r4, r3
 8008e10:	bb44      	cbnz	r4, 8008e64 <_malloc_r+0x88>
 8008e12:	4629      	mov	r1, r5
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ffbf 	bl	8008d98 <sbrk_aligned>
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	d158      	bne.n	8008ed2 <_malloc_r+0xf6>
 8008e20:	f8d8 4000 	ldr.w	r4, [r8]
 8008e24:	4627      	mov	r7, r4
 8008e26:	2f00      	cmp	r7, #0
 8008e28:	d143      	bne.n	8008eb2 <_malloc_r+0xd6>
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	d04b      	beq.n	8008ec6 <_malloc_r+0xea>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	4639      	mov	r1, r7
 8008e32:	4630      	mov	r0, r6
 8008e34:	eb04 0903 	add.w	r9, r4, r3
 8008e38:	f000 fb5c 	bl	80094f4 <_sbrk_r>
 8008e3c:	4581      	cmp	r9, r0
 8008e3e:	d142      	bne.n	8008ec6 <_malloc_r+0xea>
 8008e40:	6821      	ldr	r1, [r4, #0]
 8008e42:	1a6d      	subs	r5, r5, r1
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ffa6 	bl	8008d98 <sbrk_aligned>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d03a      	beq.n	8008ec6 <_malloc_r+0xea>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	442b      	add	r3, r5
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	bb62      	cbnz	r2, 8008eb8 <_malloc_r+0xdc>
 8008e5e:	f8c8 7000 	str.w	r7, [r8]
 8008e62:	e00f      	b.n	8008e84 <_malloc_r+0xa8>
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	1b52      	subs	r2, r2, r5
 8008e68:	d420      	bmi.n	8008eac <_malloc_r+0xd0>
 8008e6a:	2a0b      	cmp	r2, #11
 8008e6c:	d917      	bls.n	8008e9e <_malloc_r+0xc2>
 8008e6e:	1961      	adds	r1, r4, r5
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	6025      	str	r5, [r4, #0]
 8008e74:	bf18      	it	ne
 8008e76:	6059      	strne	r1, [r3, #4]
 8008e78:	6863      	ldr	r3, [r4, #4]
 8008e7a:	bf08      	it	eq
 8008e7c:	f8c8 1000 	streq.w	r1, [r8]
 8008e80:	5162      	str	r2, [r4, r5]
 8008e82:	604b      	str	r3, [r1, #4]
 8008e84:	4630      	mov	r0, r6
 8008e86:	f000 f82f 	bl	8008ee8 <__malloc_unlock>
 8008e8a:	f104 000b 	add.w	r0, r4, #11
 8008e8e:	1d23      	adds	r3, r4, #4
 8008e90:	f020 0007 	bic.w	r0, r0, #7
 8008e94:	1ac2      	subs	r2, r0, r3
 8008e96:	bf1c      	itt	ne
 8008e98:	1a1b      	subne	r3, r3, r0
 8008e9a:	50a3      	strne	r3, [r4, r2]
 8008e9c:	e7af      	b.n	8008dfe <_malloc_r+0x22>
 8008e9e:	6862      	ldr	r2, [r4, #4]
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	bf0c      	ite	eq
 8008ea4:	f8c8 2000 	streq.w	r2, [r8]
 8008ea8:	605a      	strne	r2, [r3, #4]
 8008eaa:	e7eb      	b.n	8008e84 <_malloc_r+0xa8>
 8008eac:	4623      	mov	r3, r4
 8008eae:	6864      	ldr	r4, [r4, #4]
 8008eb0:	e7ae      	b.n	8008e10 <_malloc_r+0x34>
 8008eb2:	463c      	mov	r4, r7
 8008eb4:	687f      	ldr	r7, [r7, #4]
 8008eb6:	e7b6      	b.n	8008e26 <_malloc_r+0x4a>
 8008eb8:	461a      	mov	r2, r3
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	d1fb      	bne.n	8008eb8 <_malloc_r+0xdc>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6053      	str	r3, [r2, #4]
 8008ec4:	e7de      	b.n	8008e84 <_malloc_r+0xa8>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	6033      	str	r3, [r6, #0]
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f000 f80c 	bl	8008ee8 <__malloc_unlock>
 8008ed0:	e794      	b.n	8008dfc <_malloc_r+0x20>
 8008ed2:	6005      	str	r5, [r0, #0]
 8008ed4:	e7d6      	b.n	8008e84 <_malloc_r+0xa8>
 8008ed6:	bf00      	nop
 8008ed8:	20000558 	.word	0x20000558

08008edc <__malloc_lock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	@ (8008ee4 <__malloc_lock+0x8>)
 8008ede:	f7ff bf0f 	b.w	8008d00 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20000550 	.word	0x20000550

08008ee8 <__malloc_unlock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__malloc_unlock+0x8>)
 8008eea:	f7ff bf0a 	b.w	8008d02 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20000550 	.word	0x20000550

08008ef4 <__ssputs_r>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	688e      	ldr	r6, [r1, #8]
 8008efa:	461f      	mov	r7, r3
 8008efc:	42be      	cmp	r6, r7
 8008efe:	680b      	ldr	r3, [r1, #0]
 8008f00:	4682      	mov	sl, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	4690      	mov	r8, r2
 8008f06:	d82d      	bhi.n	8008f64 <__ssputs_r+0x70>
 8008f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f10:	d026      	beq.n	8008f60 <__ssputs_r+0x6c>
 8008f12:	6965      	ldr	r5, [r4, #20]
 8008f14:	6909      	ldr	r1, [r1, #16]
 8008f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f1a:	eba3 0901 	sub.w	r9, r3, r1
 8008f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f22:	1c7b      	adds	r3, r7, #1
 8008f24:	444b      	add	r3, r9
 8008f26:	106d      	asrs	r5, r5, #1
 8008f28:	429d      	cmp	r5, r3
 8008f2a:	bf38      	it	cc
 8008f2c:	461d      	movcc	r5, r3
 8008f2e:	0553      	lsls	r3, r2, #21
 8008f30:	d527      	bpl.n	8008f82 <__ssputs_r+0x8e>
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7ff ff52 	bl	8008ddc <_malloc_r>
 8008f38:	4606      	mov	r6, r0
 8008f3a:	b360      	cbz	r0, 8008f96 <__ssputs_r+0xa2>
 8008f3c:	6921      	ldr	r1, [r4, #16]
 8008f3e:	464a      	mov	r2, r9
 8008f40:	f000 fae8 	bl	8009514 <memcpy>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	6126      	str	r6, [r4, #16]
 8008f52:	6165      	str	r5, [r4, #20]
 8008f54:	444e      	add	r6, r9
 8008f56:	eba5 0509 	sub.w	r5, r5, r9
 8008f5a:	6026      	str	r6, [r4, #0]
 8008f5c:	60a5      	str	r5, [r4, #8]
 8008f5e:	463e      	mov	r6, r7
 8008f60:	42be      	cmp	r6, r7
 8008f62:	d900      	bls.n	8008f66 <__ssputs_r+0x72>
 8008f64:	463e      	mov	r6, r7
 8008f66:	6820      	ldr	r0, [r4, #0]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	4641      	mov	r1, r8
 8008f6c:	f000 faa8 	bl	80094c0 <memmove>
 8008f70:	68a3      	ldr	r3, [r4, #8]
 8008f72:	1b9b      	subs	r3, r3, r6
 8008f74:	60a3      	str	r3, [r4, #8]
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	4433      	add	r3, r6
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	462a      	mov	r2, r5
 8008f84:	f000 fad4 	bl	8009530 <_realloc_r>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1e0      	bne.n	8008f50 <__ssputs_r+0x5c>
 8008f8e:	6921      	ldr	r1, [r4, #16]
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7ff feb7 	bl	8008d04 <_free_r>
 8008f96:	230c      	movs	r3, #12
 8008f98:	f8ca 3000 	str.w	r3, [sl]
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	e7e9      	b.n	8008f7e <__ssputs_r+0x8a>
	...

08008fac <_svfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	898b      	ldrh	r3, [r1, #12]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	b09d      	sub	sp, #116	@ 0x74
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	d510      	bpl.n	8008fe2 <_svfiprintf_r+0x36>
 8008fc0:	690b      	ldr	r3, [r1, #16]
 8008fc2:	b973      	cbnz	r3, 8008fe2 <_svfiprintf_r+0x36>
 8008fc4:	2140      	movs	r1, #64	@ 0x40
 8008fc6:	f7ff ff09 	bl	8008ddc <_malloc_r>
 8008fca:	6028      	str	r0, [r5, #0]
 8008fcc:	6128      	str	r0, [r5, #16]
 8008fce:	b930      	cbnz	r0, 8008fde <_svfiprintf_r+0x32>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	b01d      	add	sp, #116	@ 0x74
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	2340      	movs	r3, #64	@ 0x40
 8008fe0:	616b      	str	r3, [r5, #20]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	2320      	movs	r3, #32
 8008fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff0:	2330      	movs	r3, #48	@ 0x30
 8008ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009190 <_svfiprintf_r+0x1e4>
 8008ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ffa:	f04f 0901 	mov.w	r9, #1
 8008ffe:	4623      	mov	r3, r4
 8009000:	469a      	mov	sl, r3
 8009002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009006:	b10a      	cbz	r2, 800900c <_svfiprintf_r+0x60>
 8009008:	2a25      	cmp	r2, #37	@ 0x25
 800900a:	d1f9      	bne.n	8009000 <_svfiprintf_r+0x54>
 800900c:	ebba 0b04 	subs.w	fp, sl, r4
 8009010:	d00b      	beq.n	800902a <_svfiprintf_r+0x7e>
 8009012:	465b      	mov	r3, fp
 8009014:	4622      	mov	r2, r4
 8009016:	4629      	mov	r1, r5
 8009018:	4638      	mov	r0, r7
 800901a:	f7ff ff6b 	bl	8008ef4 <__ssputs_r>
 800901e:	3001      	adds	r0, #1
 8009020:	f000 80a7 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009026:	445a      	add	r2, fp
 8009028:	9209      	str	r2, [sp, #36]	@ 0x24
 800902a:	f89a 3000 	ldrb.w	r3, [sl]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 809f 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009034:	2300      	movs	r3, #0
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800903e:	f10a 0a01 	add.w	sl, sl, #1
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	9307      	str	r3, [sp, #28]
 8009046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800904a:	931a      	str	r3, [sp, #104]	@ 0x68
 800904c:	4654      	mov	r4, sl
 800904e:	2205      	movs	r2, #5
 8009050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009054:	484e      	ldr	r0, [pc, #312]	@ (8009190 <_svfiprintf_r+0x1e4>)
 8009056:	f7f7 f8cb 	bl	80001f0 <memchr>
 800905a:	9a04      	ldr	r2, [sp, #16]
 800905c:	b9d8      	cbnz	r0, 8009096 <_svfiprintf_r+0xea>
 800905e:	06d0      	lsls	r0, r2, #27
 8009060:	bf44      	itt	mi
 8009062:	2320      	movmi	r3, #32
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009068:	0711      	lsls	r1, r2, #28
 800906a:	bf44      	itt	mi
 800906c:	232b      	movmi	r3, #43	@ 0x2b
 800906e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009072:	f89a 3000 	ldrb.w	r3, [sl]
 8009076:	2b2a      	cmp	r3, #42	@ 0x2a
 8009078:	d015      	beq.n	80090a6 <_svfiprintf_r+0xfa>
 800907a:	9a07      	ldr	r2, [sp, #28]
 800907c:	4654      	mov	r4, sl
 800907e:	2000      	movs	r0, #0
 8009080:	f04f 0c0a 	mov.w	ip, #10
 8009084:	4621      	mov	r1, r4
 8009086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908a:	3b30      	subs	r3, #48	@ 0x30
 800908c:	2b09      	cmp	r3, #9
 800908e:	d94b      	bls.n	8009128 <_svfiprintf_r+0x17c>
 8009090:	b1b0      	cbz	r0, 80090c0 <_svfiprintf_r+0x114>
 8009092:	9207      	str	r2, [sp, #28]
 8009094:	e014      	b.n	80090c0 <_svfiprintf_r+0x114>
 8009096:	eba0 0308 	sub.w	r3, r0, r8
 800909a:	fa09 f303 	lsl.w	r3, r9, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	46a2      	mov	sl, r4
 80090a4:	e7d2      	b.n	800904c <_svfiprintf_r+0xa0>
 80090a6:	9b03      	ldr	r3, [sp, #12]
 80090a8:	1d19      	adds	r1, r3, #4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	9103      	str	r1, [sp, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfbb      	ittet	lt
 80090b2:	425b      	neglt	r3, r3
 80090b4:	f042 0202 	orrlt.w	r2, r2, #2
 80090b8:	9307      	strge	r3, [sp, #28]
 80090ba:	9307      	strlt	r3, [sp, #28]
 80090bc:	bfb8      	it	lt
 80090be:	9204      	strlt	r2, [sp, #16]
 80090c0:	7823      	ldrb	r3, [r4, #0]
 80090c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090c4:	d10a      	bne.n	80090dc <_svfiprintf_r+0x130>
 80090c6:	7863      	ldrb	r3, [r4, #1]
 80090c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ca:	d132      	bne.n	8009132 <_svfiprintf_r+0x186>
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	9203      	str	r2, [sp, #12]
 80090d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090d8:	3402      	adds	r4, #2
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091a0 <_svfiprintf_r+0x1f4>
 80090e0:	7821      	ldrb	r1, [r4, #0]
 80090e2:	2203      	movs	r2, #3
 80090e4:	4650      	mov	r0, sl
 80090e6:	f7f7 f883 	bl	80001f0 <memchr>
 80090ea:	b138      	cbz	r0, 80090fc <_svfiprintf_r+0x150>
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	eba0 000a 	sub.w	r0, r0, sl
 80090f2:	2240      	movs	r2, #64	@ 0x40
 80090f4:	4082      	lsls	r2, r0
 80090f6:	4313      	orrs	r3, r2
 80090f8:	3401      	adds	r4, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	4824      	ldr	r0, [pc, #144]	@ (8009194 <_svfiprintf_r+0x1e8>)
 8009102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009106:	2206      	movs	r2, #6
 8009108:	f7f7 f872 	bl	80001f0 <memchr>
 800910c:	2800      	cmp	r0, #0
 800910e:	d036      	beq.n	800917e <_svfiprintf_r+0x1d2>
 8009110:	4b21      	ldr	r3, [pc, #132]	@ (8009198 <_svfiprintf_r+0x1ec>)
 8009112:	bb1b      	cbnz	r3, 800915c <_svfiprintf_r+0x1b0>
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	3307      	adds	r3, #7
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	3308      	adds	r3, #8
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	4433      	add	r3, r6
 8009124:	9309      	str	r3, [sp, #36]	@ 0x24
 8009126:	e76a      	b.n	8008ffe <_svfiprintf_r+0x52>
 8009128:	fb0c 3202 	mla	r2, ip, r2, r3
 800912c:	460c      	mov	r4, r1
 800912e:	2001      	movs	r0, #1
 8009130:	e7a8      	b.n	8009084 <_svfiprintf_r+0xd8>
 8009132:	2300      	movs	r3, #0
 8009134:	3401      	adds	r4, #1
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	4619      	mov	r1, r3
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4620      	mov	r0, r4
 8009140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009144:	3a30      	subs	r2, #48	@ 0x30
 8009146:	2a09      	cmp	r2, #9
 8009148:	d903      	bls.n	8009152 <_svfiprintf_r+0x1a6>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c6      	beq.n	80090dc <_svfiprintf_r+0x130>
 800914e:	9105      	str	r1, [sp, #20]
 8009150:	e7c4      	b.n	80090dc <_svfiprintf_r+0x130>
 8009152:	fb0c 2101 	mla	r1, ip, r1, r2
 8009156:	4604      	mov	r4, r0
 8009158:	2301      	movs	r3, #1
 800915a:	e7f0      	b.n	800913e <_svfiprintf_r+0x192>
 800915c:	ab03      	add	r3, sp, #12
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	462a      	mov	r2, r5
 8009162:	4b0e      	ldr	r3, [pc, #56]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009164:	a904      	add	r1, sp, #16
 8009166:	4638      	mov	r0, r7
 8009168:	f3af 8000 	nop.w
 800916c:	1c42      	adds	r2, r0, #1
 800916e:	4606      	mov	r6, r0
 8009170:	d1d6      	bne.n	8009120 <_svfiprintf_r+0x174>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	065b      	lsls	r3, r3, #25
 8009176:	f53f af2d 	bmi.w	8008fd4 <_svfiprintf_r+0x28>
 800917a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800917c:	e72c      	b.n	8008fd8 <_svfiprintf_r+0x2c>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4b05      	ldr	r3, [pc, #20]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	4638      	mov	r0, r7
 800918a:	f000 f879 	bl	8009280 <_printf_i>
 800918e:	e7ed      	b.n	800916c <_svfiprintf_r+0x1c0>
 8009190:	080099b4 	.word	0x080099b4
 8009194:	080099be 	.word	0x080099be
 8009198:	00000000 	.word	0x00000000
 800919c:	08008ef5 	.word	0x08008ef5
 80091a0:	080099ba 	.word	0x080099ba

080091a4 <_printf_common>:
 80091a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	4616      	mov	r6, r2
 80091aa:	4698      	mov	r8, r3
 80091ac:	688a      	ldr	r2, [r1, #8]
 80091ae:	690b      	ldr	r3, [r1, #16]
 80091b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	bfb8      	it	lt
 80091b8:	4613      	movlt	r3, r2
 80091ba:	6033      	str	r3, [r6, #0]
 80091bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091c0:	4607      	mov	r7, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	b10a      	cbz	r2, 80091ca <_printf_common+0x26>
 80091c6:	3301      	adds	r3, #1
 80091c8:	6033      	str	r3, [r6, #0]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	0699      	lsls	r1, r3, #26
 80091ce:	bf42      	ittt	mi
 80091d0:	6833      	ldrmi	r3, [r6, #0]
 80091d2:	3302      	addmi	r3, #2
 80091d4:	6033      	strmi	r3, [r6, #0]
 80091d6:	6825      	ldr	r5, [r4, #0]
 80091d8:	f015 0506 	ands.w	r5, r5, #6
 80091dc:	d106      	bne.n	80091ec <_printf_common+0x48>
 80091de:	f104 0a19 	add.w	sl, r4, #25
 80091e2:	68e3      	ldr	r3, [r4, #12]
 80091e4:	6832      	ldr	r2, [r6, #0]
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	dc26      	bgt.n	800923a <_printf_common+0x96>
 80091ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091f0:	6822      	ldr	r2, [r4, #0]
 80091f2:	3b00      	subs	r3, #0
 80091f4:	bf18      	it	ne
 80091f6:	2301      	movne	r3, #1
 80091f8:	0692      	lsls	r2, r2, #26
 80091fa:	d42b      	bmi.n	8009254 <_printf_common+0xb0>
 80091fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009200:	4641      	mov	r1, r8
 8009202:	4638      	mov	r0, r7
 8009204:	47c8      	blx	r9
 8009206:	3001      	adds	r0, #1
 8009208:	d01e      	beq.n	8009248 <_printf_common+0xa4>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	6922      	ldr	r2, [r4, #16]
 800920e:	f003 0306 	and.w	r3, r3, #6
 8009212:	2b04      	cmp	r3, #4
 8009214:	bf02      	ittt	eq
 8009216:	68e5      	ldreq	r5, [r4, #12]
 8009218:	6833      	ldreq	r3, [r6, #0]
 800921a:	1aed      	subeq	r5, r5, r3
 800921c:	68a3      	ldr	r3, [r4, #8]
 800921e:	bf0c      	ite	eq
 8009220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009224:	2500      	movne	r5, #0
 8009226:	4293      	cmp	r3, r2
 8009228:	bfc4      	itt	gt
 800922a:	1a9b      	subgt	r3, r3, r2
 800922c:	18ed      	addgt	r5, r5, r3
 800922e:	2600      	movs	r6, #0
 8009230:	341a      	adds	r4, #26
 8009232:	42b5      	cmp	r5, r6
 8009234:	d11a      	bne.n	800926c <_printf_common+0xc8>
 8009236:	2000      	movs	r0, #0
 8009238:	e008      	b.n	800924c <_printf_common+0xa8>
 800923a:	2301      	movs	r3, #1
 800923c:	4652      	mov	r2, sl
 800923e:	4641      	mov	r1, r8
 8009240:	4638      	mov	r0, r7
 8009242:	47c8      	blx	r9
 8009244:	3001      	adds	r0, #1
 8009246:	d103      	bne.n	8009250 <_printf_common+0xac>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	3501      	adds	r5, #1
 8009252:	e7c6      	b.n	80091e2 <_printf_common+0x3e>
 8009254:	18e1      	adds	r1, r4, r3
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	2030      	movs	r0, #48	@ 0x30
 800925a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800925e:	4422      	add	r2, r4
 8009260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009268:	3302      	adds	r3, #2
 800926a:	e7c7      	b.n	80091fc <_printf_common+0x58>
 800926c:	2301      	movs	r3, #1
 800926e:	4622      	mov	r2, r4
 8009270:	4641      	mov	r1, r8
 8009272:	4638      	mov	r0, r7
 8009274:	47c8      	blx	r9
 8009276:	3001      	adds	r0, #1
 8009278:	d0e6      	beq.n	8009248 <_printf_common+0xa4>
 800927a:	3601      	adds	r6, #1
 800927c:	e7d9      	b.n	8009232 <_printf_common+0x8e>
	...

08009280 <_printf_i>:
 8009280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	7e0f      	ldrb	r7, [r1, #24]
 8009286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009288:	2f78      	cmp	r7, #120	@ 0x78
 800928a:	4691      	mov	r9, r2
 800928c:	4680      	mov	r8, r0
 800928e:	460c      	mov	r4, r1
 8009290:	469a      	mov	sl, r3
 8009292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009296:	d807      	bhi.n	80092a8 <_printf_i+0x28>
 8009298:	2f62      	cmp	r7, #98	@ 0x62
 800929a:	d80a      	bhi.n	80092b2 <_printf_i+0x32>
 800929c:	2f00      	cmp	r7, #0
 800929e:	f000 80d2 	beq.w	8009446 <_printf_i+0x1c6>
 80092a2:	2f58      	cmp	r7, #88	@ 0x58
 80092a4:	f000 80b9 	beq.w	800941a <_printf_i+0x19a>
 80092a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b0:	e03a      	b.n	8009328 <_printf_i+0xa8>
 80092b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092b6:	2b15      	cmp	r3, #21
 80092b8:	d8f6      	bhi.n	80092a8 <_printf_i+0x28>
 80092ba:	a101      	add	r1, pc, #4	@ (adr r1, 80092c0 <_printf_i+0x40>)
 80092bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c0:	08009319 	.word	0x08009319
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	080092a9 	.word	0x080092a9
 80092cc:	080092a9 	.word	0x080092a9
 80092d0:	080092a9 	.word	0x080092a9
 80092d4:	080092a9 	.word	0x080092a9
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	080092a9 	.word	0x080092a9
 80092e0:	080092a9 	.word	0x080092a9
 80092e4:	080092a9 	.word	0x080092a9
 80092e8:	080092a9 	.word	0x080092a9
 80092ec:	0800942d 	.word	0x0800942d
 80092f0:	08009357 	.word	0x08009357
 80092f4:	080093e7 	.word	0x080093e7
 80092f8:	080092a9 	.word	0x080092a9
 80092fc:	080092a9 	.word	0x080092a9
 8009300:	0800944f 	.word	0x0800944f
 8009304:	080092a9 	.word	0x080092a9
 8009308:	08009357 	.word	0x08009357
 800930c:	080092a9 	.word	0x080092a9
 8009310:	080092a9 	.word	0x080092a9
 8009314:	080093ef 	.word	0x080093ef
 8009318:	6833      	ldr	r3, [r6, #0]
 800931a:	1d1a      	adds	r2, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6032      	str	r2, [r6, #0]
 8009320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009328:	2301      	movs	r3, #1
 800932a:	e09d      	b.n	8009468 <_printf_i+0x1e8>
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	6031      	str	r1, [r6, #0]
 8009334:	0606      	lsls	r6, r0, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xbc>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e003      	b.n	8009344 <_printf_i+0xc4>
 800933c:	0645      	lsls	r5, r0, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xb8>
 8009340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009344:	2d00      	cmp	r5, #0
 8009346:	da03      	bge.n	8009350 <_printf_i+0xd0>
 8009348:	232d      	movs	r3, #45	@ 0x2d
 800934a:	426d      	negs	r5, r5
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009350:	4859      	ldr	r0, [pc, #356]	@ (80094b8 <_printf_i+0x238>)
 8009352:	230a      	movs	r3, #10
 8009354:	e011      	b.n	800937a <_printf_i+0xfa>
 8009356:	6821      	ldr	r1, [r4, #0]
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	0608      	lsls	r0, r1, #24
 800935c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009360:	d402      	bmi.n	8009368 <_printf_i+0xe8>
 8009362:	0649      	lsls	r1, r1, #25
 8009364:	bf48      	it	mi
 8009366:	b2ad      	uxthmi	r5, r5
 8009368:	2f6f      	cmp	r7, #111	@ 0x6f
 800936a:	4853      	ldr	r0, [pc, #332]	@ (80094b8 <_printf_i+0x238>)
 800936c:	6033      	str	r3, [r6, #0]
 800936e:	bf14      	ite	ne
 8009370:	230a      	movne	r3, #10
 8009372:	2308      	moveq	r3, #8
 8009374:	2100      	movs	r1, #0
 8009376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800937a:	6866      	ldr	r6, [r4, #4]
 800937c:	60a6      	str	r6, [r4, #8]
 800937e:	2e00      	cmp	r6, #0
 8009380:	bfa2      	ittt	ge
 8009382:	6821      	ldrge	r1, [r4, #0]
 8009384:	f021 0104 	bicge.w	r1, r1, #4
 8009388:	6021      	strge	r1, [r4, #0]
 800938a:	b90d      	cbnz	r5, 8009390 <_printf_i+0x110>
 800938c:	2e00      	cmp	r6, #0
 800938e:	d04b      	beq.n	8009428 <_printf_i+0x1a8>
 8009390:	4616      	mov	r6, r2
 8009392:	fbb5 f1f3 	udiv	r1, r5, r3
 8009396:	fb03 5711 	mls	r7, r3, r1, r5
 800939a:	5dc7      	ldrb	r7, [r0, r7]
 800939c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093a0:	462f      	mov	r7, r5
 80093a2:	42bb      	cmp	r3, r7
 80093a4:	460d      	mov	r5, r1
 80093a6:	d9f4      	bls.n	8009392 <_printf_i+0x112>
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d10b      	bne.n	80093c4 <_printf_i+0x144>
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	07df      	lsls	r7, r3, #31
 80093b0:	d508      	bpl.n	80093c4 <_printf_i+0x144>
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	6861      	ldr	r1, [r4, #4]
 80093b6:	4299      	cmp	r1, r3
 80093b8:	bfde      	ittt	le
 80093ba:	2330      	movle	r3, #48	@ 0x30
 80093bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093c4:	1b92      	subs	r2, r2, r6
 80093c6:	6122      	str	r2, [r4, #16]
 80093c8:	f8cd a000 	str.w	sl, [sp]
 80093cc:	464b      	mov	r3, r9
 80093ce:	aa03      	add	r2, sp, #12
 80093d0:	4621      	mov	r1, r4
 80093d2:	4640      	mov	r0, r8
 80093d4:	f7ff fee6 	bl	80091a4 <_printf_common>
 80093d8:	3001      	adds	r0, #1
 80093da:	d14a      	bne.n	8009472 <_printf_i+0x1f2>
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295
 80093e0:	b004      	add	sp, #16
 80093e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	f043 0320 	orr.w	r3, r3, #32
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	4833      	ldr	r0, [pc, #204]	@ (80094bc <_printf_i+0x23c>)
 80093f0:	2778      	movs	r7, #120	@ 0x78
 80093f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6831      	ldr	r1, [r6, #0]
 80093fa:	061f      	lsls	r7, r3, #24
 80093fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009400:	d402      	bmi.n	8009408 <_printf_i+0x188>
 8009402:	065f      	lsls	r7, r3, #25
 8009404:	bf48      	it	mi
 8009406:	b2ad      	uxthmi	r5, r5
 8009408:	6031      	str	r1, [r6, #0]
 800940a:	07d9      	lsls	r1, r3, #31
 800940c:	bf44      	itt	mi
 800940e:	f043 0320 	orrmi.w	r3, r3, #32
 8009412:	6023      	strmi	r3, [r4, #0]
 8009414:	b11d      	cbz	r5, 800941e <_printf_i+0x19e>
 8009416:	2310      	movs	r3, #16
 8009418:	e7ac      	b.n	8009374 <_printf_i+0xf4>
 800941a:	4827      	ldr	r0, [pc, #156]	@ (80094b8 <_printf_i+0x238>)
 800941c:	e7e9      	b.n	80093f2 <_printf_i+0x172>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f023 0320 	bic.w	r3, r3, #32
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	e7f6      	b.n	8009416 <_printf_i+0x196>
 8009428:	4616      	mov	r6, r2
 800942a:	e7bd      	b.n	80093a8 <_printf_i+0x128>
 800942c:	6833      	ldr	r3, [r6, #0]
 800942e:	6825      	ldr	r5, [r4, #0]
 8009430:	6961      	ldr	r1, [r4, #20]
 8009432:	1d18      	adds	r0, r3, #4
 8009434:	6030      	str	r0, [r6, #0]
 8009436:	062e      	lsls	r6, r5, #24
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	d501      	bpl.n	8009440 <_printf_i+0x1c0>
 800943c:	6019      	str	r1, [r3, #0]
 800943e:	e002      	b.n	8009446 <_printf_i+0x1c6>
 8009440:	0668      	lsls	r0, r5, #25
 8009442:	d5fb      	bpl.n	800943c <_printf_i+0x1bc>
 8009444:	8019      	strh	r1, [r3, #0]
 8009446:	2300      	movs	r3, #0
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	4616      	mov	r6, r2
 800944c:	e7bc      	b.n	80093c8 <_printf_i+0x148>
 800944e:	6833      	ldr	r3, [r6, #0]
 8009450:	1d1a      	adds	r2, r3, #4
 8009452:	6032      	str	r2, [r6, #0]
 8009454:	681e      	ldr	r6, [r3, #0]
 8009456:	6862      	ldr	r2, [r4, #4]
 8009458:	2100      	movs	r1, #0
 800945a:	4630      	mov	r0, r6
 800945c:	f7f6 fec8 	bl	80001f0 <memchr>
 8009460:	b108      	cbz	r0, 8009466 <_printf_i+0x1e6>
 8009462:	1b80      	subs	r0, r0, r6
 8009464:	6060      	str	r0, [r4, #4]
 8009466:	6863      	ldr	r3, [r4, #4]
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	2300      	movs	r3, #0
 800946c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009470:	e7aa      	b.n	80093c8 <_printf_i+0x148>
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	4632      	mov	r2, r6
 8009476:	4649      	mov	r1, r9
 8009478:	4640      	mov	r0, r8
 800947a:	47d0      	blx	sl
 800947c:	3001      	adds	r0, #1
 800947e:	d0ad      	beq.n	80093dc <_printf_i+0x15c>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	079b      	lsls	r3, r3, #30
 8009484:	d413      	bmi.n	80094ae <_printf_i+0x22e>
 8009486:	68e0      	ldr	r0, [r4, #12]
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	4298      	cmp	r0, r3
 800948c:	bfb8      	it	lt
 800948e:	4618      	movlt	r0, r3
 8009490:	e7a6      	b.n	80093e0 <_printf_i+0x160>
 8009492:	2301      	movs	r3, #1
 8009494:	4632      	mov	r2, r6
 8009496:	4649      	mov	r1, r9
 8009498:	4640      	mov	r0, r8
 800949a:	47d0      	blx	sl
 800949c:	3001      	adds	r0, #1
 800949e:	d09d      	beq.n	80093dc <_printf_i+0x15c>
 80094a0:	3501      	adds	r5, #1
 80094a2:	68e3      	ldr	r3, [r4, #12]
 80094a4:	9903      	ldr	r1, [sp, #12]
 80094a6:	1a5b      	subs	r3, r3, r1
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	dcf2      	bgt.n	8009492 <_printf_i+0x212>
 80094ac:	e7eb      	b.n	8009486 <_printf_i+0x206>
 80094ae:	2500      	movs	r5, #0
 80094b0:	f104 0619 	add.w	r6, r4, #25
 80094b4:	e7f5      	b.n	80094a2 <_printf_i+0x222>
 80094b6:	bf00      	nop
 80094b8:	080099c5 	.word	0x080099c5
 80094bc:	080099d6 	.word	0x080099d6

080094c0 <memmove>:
 80094c0:	4288      	cmp	r0, r1
 80094c2:	b510      	push	{r4, lr}
 80094c4:	eb01 0402 	add.w	r4, r1, r2
 80094c8:	d902      	bls.n	80094d0 <memmove+0x10>
 80094ca:	4284      	cmp	r4, r0
 80094cc:	4623      	mov	r3, r4
 80094ce:	d807      	bhi.n	80094e0 <memmove+0x20>
 80094d0:	1e43      	subs	r3, r0, #1
 80094d2:	42a1      	cmp	r1, r4
 80094d4:	d008      	beq.n	80094e8 <memmove+0x28>
 80094d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094de:	e7f8      	b.n	80094d2 <memmove+0x12>
 80094e0:	4402      	add	r2, r0
 80094e2:	4601      	mov	r1, r0
 80094e4:	428a      	cmp	r2, r1
 80094e6:	d100      	bne.n	80094ea <memmove+0x2a>
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094f2:	e7f7      	b.n	80094e4 <memmove+0x24>

080094f4 <_sbrk_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d06      	ldr	r5, [pc, #24]	@ (8009510 <_sbrk_r+0x1c>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7f8 faae 	bl	8001a60 <_sbrk>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_sbrk_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_sbrk_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	2000054c 	.word	0x2000054c

08009514 <memcpy>:
 8009514:	440a      	add	r2, r1
 8009516:	4291      	cmp	r1, r2
 8009518:	f100 33ff 	add.w	r3, r0, #4294967295
 800951c:	d100      	bne.n	8009520 <memcpy+0xc>
 800951e:	4770      	bx	lr
 8009520:	b510      	push	{r4, lr}
 8009522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800952a:	4291      	cmp	r1, r2
 800952c:	d1f9      	bne.n	8009522 <memcpy+0xe>
 800952e:	bd10      	pop	{r4, pc}

08009530 <_realloc_r>:
 8009530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	4680      	mov	r8, r0
 8009536:	4615      	mov	r5, r2
 8009538:	460c      	mov	r4, r1
 800953a:	b921      	cbnz	r1, 8009546 <_realloc_r+0x16>
 800953c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	4611      	mov	r1, r2
 8009542:	f7ff bc4b 	b.w	8008ddc <_malloc_r>
 8009546:	b92a      	cbnz	r2, 8009554 <_realloc_r+0x24>
 8009548:	f7ff fbdc 	bl	8008d04 <_free_r>
 800954c:	2400      	movs	r4, #0
 800954e:	4620      	mov	r0, r4
 8009550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009554:	f000 f81a 	bl	800958c <_malloc_usable_size_r>
 8009558:	4285      	cmp	r5, r0
 800955a:	4606      	mov	r6, r0
 800955c:	d802      	bhi.n	8009564 <_realloc_r+0x34>
 800955e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009562:	d8f4      	bhi.n	800954e <_realloc_r+0x1e>
 8009564:	4629      	mov	r1, r5
 8009566:	4640      	mov	r0, r8
 8009568:	f7ff fc38 	bl	8008ddc <_malloc_r>
 800956c:	4607      	mov	r7, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	d0ec      	beq.n	800954c <_realloc_r+0x1c>
 8009572:	42b5      	cmp	r5, r6
 8009574:	462a      	mov	r2, r5
 8009576:	4621      	mov	r1, r4
 8009578:	bf28      	it	cs
 800957a:	4632      	movcs	r2, r6
 800957c:	f7ff ffca 	bl	8009514 <memcpy>
 8009580:	4621      	mov	r1, r4
 8009582:	4640      	mov	r0, r8
 8009584:	f7ff fbbe 	bl	8008d04 <_free_r>
 8009588:	463c      	mov	r4, r7
 800958a:	e7e0      	b.n	800954e <_realloc_r+0x1e>

0800958c <_malloc_usable_size_r>:
 800958c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009590:	1f18      	subs	r0, r3, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfbc      	itt	lt
 8009596:	580b      	ldrlt	r3, [r1, r0]
 8009598:	18c0      	addlt	r0, r0, r3
 800959a:	4770      	bx	lr

0800959c <_init>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr

080095a8 <_fini>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr
