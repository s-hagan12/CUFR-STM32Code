
CUFR_LT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000962c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080097cc  080097cc  0000a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c28  08009c28  0000b0a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c28  08009c28  0000ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c30  08009c30  0000b0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c30  08009c30  0000ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c34  08009c34  0000ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08009c38  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0a8  2**0
                  CONTENTS
 10 .bss          00000490  200000a8  200000a8  0000b0a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000538  20000538  0000b0a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109ff  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282b  00000000  00000000  0001bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0001e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a52  00000000  00000000  0001f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ddb  00000000  00000000  0001fac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014009  00000000  00000000  0004189d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a68  00000000  00000000  000558a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c30e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bd4  00000000  00000000  0011c354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0011ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097b4 	.word	0x080097b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	080097b4 	.word	0x080097b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
void configure_sd(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	@ (80002d4 <myprintf+0x44>)
 80002a8:	f008 fdf6 	bl	8008e98 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	@ (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	@ (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	@ (80002d8 <myprintf+0x48>)
 80002c2:	f004 fd83 	bl	8004dcc <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	200002a8 	.word	0x200002a8
 80002d8:	200001d8 	.word	0x200001d8

080002dc <acdm55>:

int acdm55(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80002e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002e6:	2201      	movs	r2, #1
 80002e8:	4976      	ldr	r1, [pc, #472]	@ (80004c4 <acdm55+0x1e8>)
 80002ea:	4877      	ldr	r0, [pc, #476]	@ (80004c8 <acdm55+0x1ec>)
 80002ec:	f003 fe95 	bl	800401a <HAL_SPI_Transmit>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b75      	ldr	r3, [pc, #468]	@ (80004cc <acdm55+0x1f0>)
 80002f6:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80002f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002fc:	2201      	movs	r2, #1
 80002fe:	4971      	ldr	r1, [pc, #452]	@ (80004c4 <acdm55+0x1e8>)
 8000300:	4871      	ldr	r0, [pc, #452]	@ (80004c8 <acdm55+0x1ec>)
 8000302:	f003 fe8a 	bl	800401a <HAL_SPI_Transmit>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	4b70      	ldr	r3, [pc, #448]	@ (80004cc <acdm55+0x1f0>)
 800030c:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD55, 6, 1000); //Sending in Blocking mode
 800030e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000312:	2206      	movs	r2, #6
 8000314:	496e      	ldr	r1, [pc, #440]	@ (80004d0 <acdm55+0x1f4>)
 8000316:	486c      	ldr	r0, [pc, #432]	@ (80004c8 <acdm55+0x1ec>)
 8000318:	f003 fe7f 	bl	800401a <HAL_SPI_Transmit>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b6a      	ldr	r3, [pc, #424]	@ (80004cc <acdm55+0x1f0>)
 8000322:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8000324:	200a      	movs	r0, #10
 8000326:	f001 fd79 	bl	8001e1c <HAL_Delay>
		HAL_SPI_Receive(&hspi2, CMD55_Response, 2, 1000);
 800032a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800032e:	2202      	movs	r2, #2
 8000330:	4968      	ldr	r1, [pc, #416]	@ (80004d4 <acdm55+0x1f8>)
 8000332:	4865      	ldr	r0, [pc, #404]	@ (80004c8 <acdm55+0x1ec>)
 8000334:	f003 ffe6 	bl	8004304 <HAL_SPI_Receive>
		//HAL_Delay(1000);
		count = 0;
 8000338:	4b67      	ldr	r3, [pc, #412]	@ (80004d8 <acdm55+0x1fc>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		while(count < 20 && CMD55_Response[0] != 0x0 && CMD55_Response[1] != 0x1){
 800033e:	e02d      	b.n	800039c <acdm55+0xc0>
				count++;
 8000340:	4b65      	ldr	r3, [pc, #404]	@ (80004d8 <acdm55+0x1fc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	4a64      	ldr	r2, [pc, #400]	@ (80004d8 <acdm55+0x1fc>)
 8000348:	6013      	str	r3, [r2, #0]
				for(int i = 0; i<2; i++){
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e00a      	b.n	8000366 <acdm55+0x8a>
							  myprintf("(%x)", CMD55_Response[i]);
 8000350:	4a60      	ldr	r2, [pc, #384]	@ (80004d4 <acdm55+0x1f8>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4860      	ldr	r0, [pc, #384]	@ (80004dc <acdm55+0x200>)
 800035c:	f7ff ff98 	bl	8000290 <myprintf>
				for(int i = 0; i<2; i++){
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b01      	cmp	r3, #1
 800036a:	ddf1      	ble.n	8000350 <acdm55+0x74>
						  }
				myprintf("\r\n");
 800036c:	485c      	ldr	r0, [pc, #368]	@ (80004e0 <acdm55+0x204>)
 800036e:	f7ff ff8f 	bl	8000290 <myprintf>
			  ok_notok = HAL_SPI_Transmit(&hspi2, CMD55, 6, 1000); //Sending in Blocking mode
 8000372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000376:	2206      	movs	r2, #6
 8000378:	4955      	ldr	r1, [pc, #340]	@ (80004d0 <acdm55+0x1f4>)
 800037a:	4853      	ldr	r0, [pc, #332]	@ (80004c8 <acdm55+0x1ec>)
 800037c:	f003 fe4d 	bl	800401a <HAL_SPI_Transmit>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b51      	ldr	r3, [pc, #324]	@ (80004cc <acdm55+0x1f0>)
 8000386:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(10);
 8000388:	200a      	movs	r0, #10
 800038a:	f001 fd47 	bl	8001e1c <HAL_Delay>
			  HAL_SPI_Receive(&hspi2, CMD55_Response, 2, 1000);
 800038e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000392:	2202      	movs	r2, #2
 8000394:	494f      	ldr	r1, [pc, #316]	@ (80004d4 <acdm55+0x1f8>)
 8000396:	484c      	ldr	r0, [pc, #304]	@ (80004c8 <acdm55+0x1ec>)
 8000398:	f003 ffb4 	bl	8004304 <HAL_SPI_Receive>
		while(count < 20 && CMD55_Response[0] != 0x0 && CMD55_Response[1] != 0x1){
 800039c:	4b4e      	ldr	r3, [pc, #312]	@ (80004d8 <acdm55+0x1fc>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b13      	cmp	r3, #19
 80003a2:	dc07      	bgt.n	80003b4 <acdm55+0xd8>
 80003a4:	4b4b      	ldr	r3, [pc, #300]	@ (80004d4 <acdm55+0x1f8>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <acdm55+0xd8>
 80003ac:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <acdm55+0x1f8>)
 80003ae:	785b      	ldrb	r3, [r3, #1]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d1c5      	bne.n	8000340 <acdm55+0x64>
		}
		if(count == 20){
 80003b4:	4b48      	ldr	r3, [pc, #288]	@ (80004d8 <acdm55+0x1fc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b14      	cmp	r3, #20
 80003ba:	d101      	bne.n	80003c0 <acdm55+0xe4>
			//myprintf("CMD 55 Timeout \r\n");
				return 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	e07d      	b.n	80004bc <acdm55+0x1e0>
			}
		myprintf("CMD55: ");
 80003c0:	4848      	ldr	r0, [pc, #288]	@ (80004e4 <acdm55+0x208>)
 80003c2:	f7ff ff65 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	e00a      	b.n	80003e2 <acdm55+0x106>
				  myprintf("(%x)", CMD55_Response[i]);
 80003cc:	4a41      	ldr	r2, [pc, #260]	@ (80004d4 <acdm55+0x1f8>)
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4841      	ldr	r0, [pc, #260]	@ (80004dc <acdm55+0x200>)
 80003d8:	f7ff ff5a 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3301      	adds	r3, #1
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	ddf1      	ble.n	80003cc <acdm55+0xf0>
			  }
		myprintf("\r\n");
 80003e8:	483d      	ldr	r0, [pc, #244]	@ (80004e0 <acdm55+0x204>)
 80003ea:	f7ff ff51 	bl	8000290 <myprintf>
		ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80003ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003f2:	2201      	movs	r2, #1
 80003f4:	4933      	ldr	r1, [pc, #204]	@ (80004c4 <acdm55+0x1e8>)
 80003f6:	4834      	ldr	r0, [pc, #208]	@ (80004c8 <acdm55+0x1ec>)
 80003f8:	f003 fe0f 	bl	800401a <HAL_SPI_Transmit>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b32      	ldr	r3, [pc, #200]	@ (80004cc <acdm55+0x1f0>)
 8000402:	701a      	strb	r2, [r3, #0]
		ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 8000404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000408:	2201      	movs	r2, #1
 800040a:	492e      	ldr	r1, [pc, #184]	@ (80004c4 <acdm55+0x1e8>)
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <acdm55+0x1ec>)
 800040e:	f003 fe04 	bl	800401a <HAL_SPI_Transmit>
 8000412:	4603      	mov	r3, r0
 8000414:	461a      	mov	r2, r3
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <acdm55+0x1f0>)
 8000418:	701a      	strb	r2, [r3, #0]
		//ACMD41
		ok_notok = HAL_SPI_Transmit(&hspi2, ACMD41, 6, 1000); //Sending in Blocking mode
 800041a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800041e:	2206      	movs	r2, #6
 8000420:	4931      	ldr	r1, [pc, #196]	@ (80004e8 <acdm55+0x20c>)
 8000422:	4829      	ldr	r0, [pc, #164]	@ (80004c8 <acdm55+0x1ec>)
 8000424:	f003 fdf9 	bl	800401a <HAL_SPI_Transmit>
 8000428:	4603      	mov	r3, r0
 800042a:	461a      	mov	r2, r3
 800042c:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <acdm55+0x1f0>)
 800042e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	@ 0x64
 8000432:	f001 fcf3 	bl	8001e1c <HAL_Delay>
		HAL_SPI_Receive(&hspi2, ACMD41_Response, 2, 1000);
 8000436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043a:	2202      	movs	r2, #2
 800043c:	492b      	ldr	r1, [pc, #172]	@ (80004ec <acdm55+0x210>)
 800043e:	4822      	ldr	r0, [pc, #136]	@ (80004c8 <acdm55+0x1ec>)
 8000440:	f003 ff60 	bl	8004304 <HAL_SPI_Receive>
		count = 0;
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <acdm55+0x1fc>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
		if(ACMD41_Response[0] != 0x0 && ACMD41_Response[1] != 0x0)
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <acdm55+0x210>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d01c      	beq.n	800048c <acdm55+0x1b0>
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <acdm55+0x210>)
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d018      	beq.n	800048c <acdm55+0x1b0>
		{
			myprintf("ACMD41 Fail once: ");
 800045a:	4825      	ldr	r0, [pc, #148]	@ (80004f0 <acdm55+0x214>)
 800045c:	f7ff ff18 	bl	8000290 <myprintf>
			for(int i = 0; i<2; i++){
 8000460:	2300      	movs	r3, #0
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	e00a      	b.n	800047c <acdm55+0x1a0>
				myprintf("(%x)", ACMD41_Response[i]);
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <acdm55+0x210>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4413      	add	r3, r2
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	481a      	ldr	r0, [pc, #104]	@ (80004dc <acdm55+0x200>)
 8000472:	f7ff ff0d 	bl	8000290 <myprintf>
			for(int i = 0; i<2; i++){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3301      	adds	r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b01      	cmp	r3, #1
 8000480:	ddf1      	ble.n	8000466 <acdm55+0x18a>
			}
			myprintf("\r\n");
 8000482:	4817      	ldr	r0, [pc, #92]	@ (80004e0 <acdm55+0x204>)
 8000484:	f7ff ff04 	bl	8000290 <myprintf>
			return 0;
 8000488:	2300      	movs	r3, #0
 800048a:	e017      	b.n	80004bc <acdm55+0x1e0>
		}
		myprintf("ACMD41: ");
 800048c:	4819      	ldr	r0, [pc, #100]	@ (80004f4 <acdm55+0x218>)
 800048e:	f7ff feff 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 8000492:	2300      	movs	r3, #0
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	e00a      	b.n	80004ae <acdm55+0x1d2>
				  myprintf("(%x)", ACMD41_Response[i]);
 8000498:	4a14      	ldr	r2, [pc, #80]	@ (80004ec <acdm55+0x210>)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	4413      	add	r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	480e      	ldr	r0, [pc, #56]	@ (80004dc <acdm55+0x200>)
 80004a4:	f7ff fef4 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	ddf1      	ble.n	8000498 <acdm55+0x1bc>
			  }
		myprintf("\r\n");
 80004b4:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <acdm55+0x204>)
 80004b6:	f7ff feeb 	bl	8000290 <myprintf>
		return 1;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000030 	.word	0x20000030
 80004c8:	200000ec 	.word	0x200000ec
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000020 	.word	0x20000020
 80004d4:	2000026c 	.word	0x2000026c
 80004d8:	20000274 	.word	0x20000274
 80004dc:	080097cc 	.word	0x080097cc
 80004e0:	080097d4 	.word	0x080097d4
 80004e4:	080097d8 	.word	0x080097d8
 80004e8:	20000028 	.word	0x20000028
 80004ec:	20000270 	.word	0x20000270
 80004f0:	080097e0 	.word	0x080097e0
 80004f4:	080097f4 	.word	0x080097f4

080004f8 <configure_sd>:

void configure_sd(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	48ac      	ldr	r0, [pc, #688]	@ (80007b4 <configure_sd+0x2bc>)
 8000504:	f002 f81a 	bl	800253c <HAL_GPIO_WritePin>
	ok_notok = HAL_SPI_Transmit(&hspi2, high, 10, 1000); //Sending in Blocking mode
 8000508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050c:	220a      	movs	r2, #10
 800050e:	49aa      	ldr	r1, [pc, #680]	@ (80007b8 <configure_sd+0x2c0>)
 8000510:	48aa      	ldr	r0, [pc, #680]	@ (80007bc <configure_sd+0x2c4>)
 8000512:	f003 fd82 	bl	800401a <HAL_SPI_Transmit>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4ba9      	ldr	r3, [pc, #676]	@ (80007c0 <configure_sd+0x2c8>)
 800051c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	48a4      	ldr	r0, [pc, #656]	@ (80007b4 <configure_sd+0x2bc>)
 8000524:	f002 f80a 	bl	800253c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
	//		  ok_notok = HAL_UART_Transmit(&huart2, (uint8_t *)hw, len, 100);

	//CMD0:
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD0, 6, 1000); //Sending in Blocking mode
 8000528:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052c:	2206      	movs	r2, #6
 800052e:	49a5      	ldr	r1, [pc, #660]	@ (80007c4 <configure_sd+0x2cc>)
 8000530:	48a2      	ldr	r0, [pc, #648]	@ (80007bc <configure_sd+0x2c4>)
 8000532:	f003 fd72 	bl	800401a <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4ba1      	ldr	r3, [pc, #644]	@ (80007c0 <configure_sd+0x2c8>)
 800053c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800053e:	2064      	movs	r0, #100	@ 0x64
 8000540:	f001 fc6c 	bl	8001e1c <HAL_Delay>
	HAL_SPI_Receive(&hspi2, CMD0_Response, 2, 1000);
 8000544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000548:	2202      	movs	r2, #2
 800054a:	499f      	ldr	r1, [pc, #636]	@ (80007c8 <configure_sd+0x2d0>)
 800054c:	489b      	ldr	r0, [pc, #620]	@ (80007bc <configure_sd+0x2c4>)
 800054e:	f003 fed9 	bl	8004304 <HAL_SPI_Receive>
	count = 0;
 8000552:	4b9e      	ldr	r3, [pc, #632]	@ (80007cc <configure_sd+0x2d4>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	while(CMD0_Response[1] != 0x1 && count < 20){
 8000558:	e01c      	b.n	8000594 <configure_sd+0x9c>
	  count++;
 800055a:	4b9c      	ldr	r3, [pc, #624]	@ (80007cc <configure_sd+0x2d4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a9a      	ldr	r2, [pc, #616]	@ (80007cc <configure_sd+0x2d4>)
 8000562:	6013      	str	r3, [r2, #0]
	  myprintf("0 Failed once: \r\n");
 8000564:	489a      	ldr	r0, [pc, #616]	@ (80007d0 <configure_sd+0x2d8>)
 8000566:	f7ff fe93 	bl	8000290 <myprintf>
	  ok_notok = HAL_SPI_Transmit(&hspi2, CMD0, 6, 1000); //Sending in Blocking mode
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	2206      	movs	r2, #6
 8000570:	4994      	ldr	r1, [pc, #592]	@ (80007c4 <configure_sd+0x2cc>)
 8000572:	4892      	ldr	r0, [pc, #584]	@ (80007bc <configure_sd+0x2c4>)
 8000574:	f003 fd51 	bl	800401a <HAL_SPI_Transmit>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b90      	ldr	r3, [pc, #576]	@ (80007c0 <configure_sd+0x2c8>)
 800057e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f001 fc4b 	bl	8001e1c <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, CMD0_Response, 2, 1000);
 8000586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800058a:	2202      	movs	r2, #2
 800058c:	498e      	ldr	r1, [pc, #568]	@ (80007c8 <configure_sd+0x2d0>)
 800058e:	488b      	ldr	r0, [pc, #556]	@ (80007bc <configure_sd+0x2c4>)
 8000590:	f003 feb8 	bl	8004304 <HAL_SPI_Receive>
	while(CMD0_Response[1] != 0x1 && count < 20){
 8000594:	4b8c      	ldr	r3, [pc, #560]	@ (80007c8 <configure_sd+0x2d0>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d003      	beq.n	80005a4 <configure_sd+0xac>
 800059c:	4b8b      	ldr	r3, [pc, #556]	@ (80007cc <configure_sd+0x2d4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b13      	cmp	r3, #19
 80005a2:	ddda      	ble.n	800055a <configure_sd+0x62>
	}
	if(count == 20){
 80005a4:	4b89      	ldr	r3, [pc, #548]	@ (80007cc <configure_sd+0x2d4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b14      	cmp	r3, #20
 80005aa:	d103      	bne.n	80005b4 <configure_sd+0xbc>
		myprintf("Timeout \r\n");
 80005ac:	4889      	ldr	r0, [pc, #548]	@ (80007d4 <configure_sd+0x2dc>)
 80005ae:	f7ff fe6f 	bl	8000290 <myprintf>
		return;
 80005b2:	e0fb      	b.n	80007ac <configure_sd+0x2b4>
	}
	myprintf("CMD0: ");
 80005b4:	4888      	ldr	r0, [pc, #544]	@ (80007d8 <configure_sd+0x2e0>)
 80005b6:	f7ff fe6b 	bl	8000290 <myprintf>
	for(int i = 0; i<2; i++){
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e00a      	b.n	80005d6 <configure_sd+0xde>
			  myprintf("(%x)", CMD0_Response[i]);
 80005c0:	4a81      	ldr	r2, [pc, #516]	@ (80007c8 <configure_sd+0x2d0>)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4884      	ldr	r0, [pc, #528]	@ (80007dc <configure_sd+0x2e4>)
 80005cc:	f7ff fe60 	bl	8000290 <myprintf>
	for(int i = 0; i<2; i++){
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	ddf1      	ble.n	80005c0 <configure_sd+0xc8>
		  }
	myprintf("\r\n");
 80005dc:	4880      	ldr	r0, [pc, #512]	@ (80007e0 <configure_sd+0x2e8>)
 80005de:	f7ff fe57 	bl	8000290 <myprintf>
	//HAL_Delay(100);
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80005e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e6:	2201      	movs	r2, #1
 80005e8:	497e      	ldr	r1, [pc, #504]	@ (80007e4 <configure_sd+0x2ec>)
 80005ea:	4874      	ldr	r0, [pc, #464]	@ (80007bc <configure_sd+0x2c4>)
 80005ec:	f003 fd15 	bl	800401a <HAL_SPI_Transmit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b72      	ldr	r3, [pc, #456]	@ (80007c0 <configure_sd+0x2c8>)
 80005f6:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80005f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fc:	2201      	movs	r2, #1
 80005fe:	4979      	ldr	r1, [pc, #484]	@ (80007e4 <configure_sd+0x2ec>)
 8000600:	486e      	ldr	r0, [pc, #440]	@ (80007bc <configure_sd+0x2c4>)
 8000602:	f003 fd0a 	bl	800401a <HAL_SPI_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b6d      	ldr	r3, [pc, #436]	@ (80007c0 <configure_sd+0x2c8>)
 800060c:	701a      	strb	r2, [r3, #0]

	//CMD8:
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD8, 6, 1000); //Sending in Blocking mode
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	2206      	movs	r2, #6
 8000614:	4974      	ldr	r1, [pc, #464]	@ (80007e8 <configure_sd+0x2f0>)
 8000616:	4869      	ldr	r0, [pc, #420]	@ (80007bc <configure_sd+0x2c4>)
 8000618:	f003 fcff 	bl	800401a <HAL_SPI_Transmit>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b67      	ldr	r3, [pc, #412]	@ (80007c0 <configure_sd+0x2c8>)
 8000622:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	@ 0x64
 8000626:	f001 fbf9 	bl	8001e1c <HAL_Delay>
	HAL_SPI_Receive(&hspi2, CMD8_Response, 7, 1000);
 800062a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062e:	2207      	movs	r2, #7
 8000630:	496e      	ldr	r1, [pc, #440]	@ (80007ec <configure_sd+0x2f4>)
 8000632:	4862      	ldr	r0, [pc, #392]	@ (80007bc <configure_sd+0x2c4>)
 8000634:	f003 fe66 	bl	8004304 <HAL_SPI_Receive>
	//HAL_Delay(1000);
	count = 0;
 8000638:	4b64      	ldr	r3, [pc, #400]	@ (80007cc <configure_sd+0x2d4>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	while(count < 20 && (CMD8_Response[1] != 0x1 || CMD8_Response[5] != 0xAA)){
 800063e:	e02d      	b.n	800069c <configure_sd+0x1a4>
			count++;
 8000640:	4b62      	ldr	r3, [pc, #392]	@ (80007cc <configure_sd+0x2d4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a61      	ldr	r2, [pc, #388]	@ (80007cc <configure_sd+0x2d4>)
 8000648:	6013      	str	r3, [r2, #0]
			  myprintf("8 Failed once: \r\n");
 800064a:	4869      	ldr	r0, [pc, #420]	@ (80007f0 <configure_sd+0x2f8>)
 800064c:	f7ff fe20 	bl	8000290 <myprintf>
			  for(int i = 0; i<7; i++){
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	e00a      	b.n	800066c <configure_sd+0x174>
			  			  myprintf("(%x)", CMD8_Response[i]);
 8000656:	4a65      	ldr	r2, [pc, #404]	@ (80007ec <configure_sd+0x2f4>)
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	485e      	ldr	r0, [pc, #376]	@ (80007dc <configure_sd+0x2e4>)
 8000662:	f7ff fe15 	bl	8000290 <myprintf>
			  for(int i = 0; i<7; i++){
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b06      	cmp	r3, #6
 8000670:	ddf1      	ble.n	8000656 <configure_sd+0x15e>
			  		  }
			  ok_notok = HAL_SPI_Transmit(&hspi2, CMD8, 6, 1000); //Sending in Blocking mode
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	2206      	movs	r2, #6
 8000678:	495b      	ldr	r1, [pc, #364]	@ (80007e8 <configure_sd+0x2f0>)
 800067a:	4850      	ldr	r0, [pc, #320]	@ (80007bc <configure_sd+0x2c4>)
 800067c:	f003 fccd 	bl	800401a <HAL_SPI_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b4e      	ldr	r3, [pc, #312]	@ (80007c0 <configure_sd+0x2c8>)
 8000686:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f001 fbc7 	bl	8001e1c <HAL_Delay>
			  HAL_SPI_Receive(&hspi2, CMD8_Response, 7, 1000);
 800068e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000692:	2207      	movs	r2, #7
 8000694:	4955      	ldr	r1, [pc, #340]	@ (80007ec <configure_sd+0x2f4>)
 8000696:	4849      	ldr	r0, [pc, #292]	@ (80007bc <configure_sd+0x2c4>)
 8000698:	f003 fe34 	bl	8004304 <HAL_SPI_Receive>
	while(count < 20 && (CMD8_Response[1] != 0x1 || CMD8_Response[5] != 0xAA)){
 800069c:	4b4b      	ldr	r3, [pc, #300]	@ (80007cc <configure_sd+0x2d4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b13      	cmp	r3, #19
 80006a2:	dc07      	bgt.n	80006b4 <configure_sd+0x1bc>
 80006a4:	4b51      	ldr	r3, [pc, #324]	@ (80007ec <configure_sd+0x2f4>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d1c9      	bne.n	8000640 <configure_sd+0x148>
 80006ac:	4b4f      	ldr	r3, [pc, #316]	@ (80007ec <configure_sd+0x2f4>)
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2baa      	cmp	r3, #170	@ 0xaa
 80006b2:	d1c5      	bne.n	8000640 <configure_sd+0x148>
	}
	if(count == 20){
 80006b4:	4b45      	ldr	r3, [pc, #276]	@ (80007cc <configure_sd+0x2d4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b14      	cmp	r3, #20
 80006ba:	d103      	bne.n	80006c4 <configure_sd+0x1cc>
		myprintf("Timeout \r\n");
 80006bc:	4845      	ldr	r0, [pc, #276]	@ (80007d4 <configure_sd+0x2dc>)
 80006be:	f7ff fde7 	bl	8000290 <myprintf>
			return;
 80006c2:	e073      	b.n	80007ac <configure_sd+0x2b4>
		}
	myprintf("CMD8: ");
 80006c4:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <configure_sd+0x2fc>)
 80006c6:	f7ff fde3 	bl	8000290 <myprintf>
	for(int i = 0; i<7; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e00a      	b.n	80006e6 <configure_sd+0x1ee>
			  myprintf("(%x)", CMD8_Response[i]);
 80006d0:	4a46      	ldr	r2, [pc, #280]	@ (80007ec <configure_sd+0x2f4>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4840      	ldr	r0, [pc, #256]	@ (80007dc <configure_sd+0x2e4>)
 80006dc:	f7ff fdd8 	bl	8000290 <myprintf>
	for(int i = 0; i<7; i++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	ddf1      	ble.n	80006d0 <configure_sd+0x1d8>
		  }
	myprintf("\r\n");
 80006ec:	483c      	ldr	r0, [pc, #240]	@ (80007e0 <configure_sd+0x2e8>)
 80006ee:	f7ff fdcf 	bl	8000290 <myprintf>
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80006f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f6:	2201      	movs	r2, #1
 80006f8:	493a      	ldr	r1, [pc, #232]	@ (80007e4 <configure_sd+0x2ec>)
 80006fa:	4830      	ldr	r0, [pc, #192]	@ (80007bc <configure_sd+0x2c4>)
 80006fc:	f003 fc8d 	bl	800401a <HAL_SPI_Transmit>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <configure_sd+0x2c8>)
 8000706:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 8000708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070c:	2201      	movs	r2, #1
 800070e:	4935      	ldr	r1, [pc, #212]	@ (80007e4 <configure_sd+0x2ec>)
 8000710:	482a      	ldr	r0, [pc, #168]	@ (80007bc <configure_sd+0x2c4>)
 8000712:	f003 fc82 	bl	800401a <HAL_SPI_Transmit>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <configure_sd+0x2c8>)
 800071c:	701a      	strb	r2, [r3, #0]

	//CMD55:
	int counter = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
	int worked = acdm55();
 8000722:	f7ff fddb 	bl	80002dc <acdm55>
 8000726:	6078      	str	r0, [r7, #4]
	myprintf("Worked: (%i)\r\n", worked);
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <configure_sd+0x300>)
 800072c:	f7ff fdb0 	bl	8000290 <myprintf>
	while(worked == 0 && counter<20){
 8000730:	e00b      	b.n	800074a <configure_sd+0x252>
			worked = acdm55();
 8000732:	f7ff fdd3 	bl	80002dc <acdm55>
 8000736:	6078      	str	r0, [r7, #4]
			//myprintf("Worked: (%i)\r\n", worked);
			counter++;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3301      	adds	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
			//myprintf("Count: (%x)\r\n", count);
			if(worked==1){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d102      	bne.n	800074a <configure_sd+0x252>
				myprintf("yay!\r\n");
 8000744:	482d      	ldr	r0, [pc, #180]	@ (80007fc <configure_sd+0x304>)
 8000746:	f7ff fda3 	bl	8000290 <myprintf>
	while(worked == 0 && counter<20){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <configure_sd+0x25e>
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b13      	cmp	r3, #19
 8000754:	dded      	ble.n	8000732 <configure_sd+0x23a>
			}
	}
	myprintf("Count: %i\r\n", counter);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	4829      	ldr	r0, [pc, #164]	@ (8000800 <configure_sd+0x308>)
 800075a:	f7ff fd99 	bl	8000290 <myprintf>
	myprintf("Worked: %i\r\n", worked);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	4828      	ldr	r0, [pc, #160]	@ (8000804 <configure_sd+0x30c>)
 8000762:	f7ff fd95 	bl	8000290 <myprintf>
	if(counter==20){
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b14      	cmp	r3, #20
 800076a:	d103      	bne.n	8000774 <configure_sd+0x27c>
		myprintf("Timeout\r\n");
 800076c:	4826      	ldr	r0, [pc, #152]	@ (8000808 <configure_sd+0x310>)
 800076e:	f7ff fd8f 	bl	8000290 <myprintf>
		return;
 8000772:	e01b      	b.n	80007ac <configure_sd+0x2b4>
	}

	myprintf("End of Start Up\r\n");
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <configure_sd+0x314>)
 8000776:	f7ff fd8b 	bl	8000290 <myprintf>
	if(ok_notok == HAL_OK){
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <configure_sd+0x2c8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <configure_sd+0x296>
	  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2120      	movs	r1, #32
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f001 fed7 	bl	800253c <HAL_GPIO_WritePin>
	}
	HAL_Delay(1000);
 800078e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000792:	f001 fb43 	bl	8001e1c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f001 fecd 	bl	800253c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2102      	movs	r1, #2
 80007a6:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <configure_sd+0x2bc>)
 80007a8:	f001 fec8 	bl	800253c <HAL_GPIO_WritePin>
}
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	48000400 	.word	0x48000400
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	200000ec 	.word	0x200000ec
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000260 	.word	0x20000260
 80007cc:	20000274 	.word	0x20000274
 80007d0:	08009800 	.word	0x08009800
 80007d4:	08009814 	.word	0x08009814
 80007d8:	08009820 	.word	0x08009820
 80007dc:	080097cc 	.word	0x080097cc
 80007e0:	080097d4 	.word	0x080097d4
 80007e4:	20000030 	.word	0x20000030
 80007e8:	20000018 	.word	0x20000018
 80007ec:	20000264 	.word	0x20000264
 80007f0:	08009828 	.word	0x08009828
 80007f4:	0800983c 	.word	0x0800983c
 80007f8:	08009844 	.word	0x08009844
 80007fc:	08009854 	.word	0x08009854
 8000800:	0800985c 	.word	0x0800985c
 8000804:	08009868 	.word	0x08009868
 8000808:	08009878 	.word	0x08009878
 800080c:	08009884 	.word	0x08009884

08000810 <process_line>:

struct msg_type med;
struct msg_type fast;
struct msg_type stat;

int process_line(char* msg, struct can_msg* msg_table, int counter) {
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	@ 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    struct can_msg M = { 0 };
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	811a      	strh	r2, [r3, #8]
    M.id = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	82bb      	strh	r3, [r7, #20]
    M.id |= msg[0] << 8;
 800082c:	8abb      	ldrh	r3, [r7, #20]
 800082e:	b21a      	sxth	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	82bb      	strh	r3, [r7, #20]
    M.id |= msg[1];
 8000840:	8abb      	ldrh	r3, [r7, #20]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	3201      	adds	r2, #1
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	4313      	orrs	r3, r2
 800084a:	b29b      	uxth	r3, r3
 800084c:	82bb      	strh	r3, [r7, #20]
    M.pkt = msg[2];
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3302      	adds	r3, #2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	75bb      	strb	r3, [r7, #22]
    M.start = msg[3];
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3303      	adds	r3, #3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	75fb      	strb	r3, [r7, #23]
    M.len = msg[4];
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3304      	adds	r3, #4
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	763b      	strb	r3, [r7, #24]
    M.bits[0] = msg[5];
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3305      	adds	r3, #5
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	767b      	strb	r3, [r7, #25]
    M.bits[1] = msg[6];
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3306      	adds	r3, #6
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	76bb      	strb	r3, [r7, #26]
    M.bits[2] = msg[7];
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3307      	adds	r3, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	76fb      	strb	r3, [r7, #27]
    M.lts = msg[8];
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3308      	adds	r3, #8
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	773b      	strb	r3, [r7, #28]
    M.idx = msg[9];
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3309      	adds	r3, #9
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	777b      	strb	r3, [r7, #29]
    msg_table[counter] = M;
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	461a      	mov	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4413      	add	r3, r2
 800089e:	461a      	mov	r2, r3
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	cb03      	ldmia	r3!, {r0, r1}
 80008a6:	6010      	str	r0, [r2, #0]
 80008a8:	6051      	str	r1, [r2, #4]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	8113      	strh	r3, [r2, #8]
    return counter++;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3724      	adds	r7, #36	@ 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <get_msg_type_details>:

void get_msg_type_details(char* buffer) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    uint8_t s;

    //Get the details for the medium speed message
    med.id = buffer[1];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3301      	adds	r3, #1
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b59      	ldr	r3, [pc, #356]	@ (8000a34 <get_msg_type_details+0x174>)
 80008d0:	701a      	strb	r2, [r3, #0]
    med.data_len = buffer[2];
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3302      	adds	r3, #2
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b56      	ldr	r3, [pc, #344]	@ (8000a34 <get_msg_type_details+0x174>)
 80008da:	705a      	strb	r2, [r3, #1]
    s = buffer[3];
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3303      	adds	r3, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	73fb      	strb	r3, [r7, #15]
    med.speed = 10 * (int)s;
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b50      	ldr	r3, [pc, #320]	@ (8000a34 <get_msg_type_details+0x174>)
 80008f2:	605a      	str	r2, [r3, #4]
    med.num_messages = buffer[4];
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3304      	adds	r3, #4
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000a34 <get_msg_type_details+0x174>)
 80008fc:	721a      	strb	r2, [r3, #8]
    med.len = med.data_len + 3;
 80008fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000a34 <get_msg_type_details+0x174>)
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	3303      	adds	r3, #3
 8000904:	4a4b      	ldr	r2, [pc, #300]	@ (8000a34 <get_msg_type_details+0x174>)
 8000906:	60d3      	str	r3, [r2, #12]

    myprintf("Med\r\n");
 8000908:	484b      	ldr	r0, [pc, #300]	@ (8000a38 <get_msg_type_details+0x178>)
 800090a:	f7ff fcc1 	bl	8000290 <myprintf>
    myprintf("id: %c\r\n", med.id);
 800090e:	4b49      	ldr	r3, [pc, #292]	@ (8000a34 <get_msg_type_details+0x174>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4849      	ldr	r0, [pc, #292]	@ (8000a3c <get_msg_type_details+0x17c>)
 8000916:	f7ff fcbb 	bl	8000290 <myprintf>
    myprintf("data_len: %u\r\n", med.data_len);
 800091a:	4b46      	ldr	r3, [pc, #280]	@ (8000a34 <get_msg_type_details+0x174>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	4619      	mov	r1, r3
 8000920:	4847      	ldr	r0, [pc, #284]	@ (8000a40 <get_msg_type_details+0x180>)
 8000922:	f7ff fcb5 	bl	8000290 <myprintf>
    myprintf("speed: %i\r\n", med.speed);
 8000926:	4b43      	ldr	r3, [pc, #268]	@ (8000a34 <get_msg_type_details+0x174>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4619      	mov	r1, r3
 800092c:	4845      	ldr	r0, [pc, #276]	@ (8000a44 <get_msg_type_details+0x184>)
 800092e:	f7ff fcaf 	bl	8000290 <myprintf>
    myprintf("num_messages: %u\r\n", med.num_messages);
 8000932:	4b40      	ldr	r3, [pc, #256]	@ (8000a34 <get_msg_type_details+0x174>)
 8000934:	7a1b      	ldrb	r3, [r3, #8]
 8000936:	4619      	mov	r1, r3
 8000938:	4843      	ldr	r0, [pc, #268]	@ (8000a48 <get_msg_type_details+0x188>)
 800093a:	f7ff fca9 	bl	8000290 <myprintf>

    //Get the details for the fast speed message
    fast.id = buffer[5];
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3305      	adds	r3, #5
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000946:	701a      	strb	r2, [r3, #0]
    fast.data_len = buffer[6];
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3306      	adds	r3, #6
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000950:	705a      	strb	r2, [r3, #1]
    s = buffer[7];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3307      	adds	r3, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	73fb      	strb	r3, [r7, #15]
    fast.speed = 10 * (int)s;
 800095a:	7bfa      	ldrb	r2, [r7, #15]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	461a      	mov	r2, r3
 8000966:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000968:	605a      	str	r2, [r3, #4]
    fast.num_messages = buffer[8];
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3308      	adds	r3, #8
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000972:	721a      	strb	r2, [r3, #8]
    fast.len = fast.data_len + 3;
 8000974:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	3303      	adds	r3, #3
 800097a:	4a34      	ldr	r2, [pc, #208]	@ (8000a4c <get_msg_type_details+0x18c>)
 800097c:	60d3      	str	r3, [r2, #12]

    myprintf("Fast\r\n");
 800097e:	4834      	ldr	r0, [pc, #208]	@ (8000a50 <get_msg_type_details+0x190>)
 8000980:	f7ff fc86 	bl	8000290 <myprintf>
    myprintf("id: %c\r\n", fast.id);
 8000984:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <get_msg_type_details+0x17c>)
 800098c:	f7ff fc80 	bl	8000290 <myprintf>
    myprintf("data_len: %u\r\n", fast.data_len);
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <get_msg_type_details+0x18c>)
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	4619      	mov	r1, r3
 8000996:	482a      	ldr	r0, [pc, #168]	@ (8000a40 <get_msg_type_details+0x180>)
 8000998:	f7ff fc7a 	bl	8000290 <myprintf>
    myprintf("speed: %i\r\n", fast.speed);
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <get_msg_type_details+0x18c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4828      	ldr	r0, [pc, #160]	@ (8000a44 <get_msg_type_details+0x184>)
 80009a4:	f7ff fc74 	bl	8000290 <myprintf>
    myprintf("num_messages: %u\r\n", fast.num_messages);
 80009a8:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <get_msg_type_details+0x18c>)
 80009aa:	7a1b      	ldrb	r3, [r3, #8]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	@ (8000a48 <get_msg_type_details+0x188>)
 80009b0:	f7ff fc6e 	bl	8000290 <myprintf>

    //Get the details for the stat speed message
    stat.id = buffer[9];
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3309      	adds	r3, #9
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <get_msg_type_details+0x194>)
 80009bc:	701a      	strb	r2, [r3, #0]
    stat.data_len = buffer[10];
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	330a      	adds	r3, #10
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <get_msg_type_details+0x194>)
 80009c6:	705a      	strb	r2, [r3, #1]
    s = buffer[11];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	330b      	adds	r3, #11
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	73fb      	strb	r3, [r7, #15]
    stat.speed = 10 * (int)s;
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	461a      	mov	r2, r3
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <get_msg_type_details+0x194>)
 80009de:	605a      	str	r2, [r3, #4]
    stat.num_messages = buffer[12];
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	330c      	adds	r3, #12
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <get_msg_type_details+0x194>)
 80009e8:	721a      	strb	r2, [r3, #8]
    stat.len = stat.data_len + 3;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <get_msg_type_details+0x194>)
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	3303      	adds	r3, #3
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <get_msg_type_details+0x194>)
 80009f2:	60d3      	str	r3, [r2, #12]

    myprintf("Stat\r\n");
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <get_msg_type_details+0x198>)
 80009f6:	f7ff fc4b 	bl	8000290 <myprintf>
    myprintf("id: %c\r\n", stat.id);
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <get_msg_type_details+0x194>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	480e      	ldr	r0, [pc, #56]	@ (8000a3c <get_msg_type_details+0x17c>)
 8000a02:	f7ff fc45 	bl	8000290 <myprintf>
    myprintf("data_len: %u\r\n", stat.data_len);
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <get_msg_type_details+0x194>)
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <get_msg_type_details+0x180>)
 8000a0e:	f7ff fc3f 	bl	8000290 <myprintf>
    myprintf("speed: %i\r\n", stat.speed);
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <get_msg_type_details+0x194>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4619      	mov	r1, r3
 8000a18:	480a      	ldr	r0, [pc, #40]	@ (8000a44 <get_msg_type_details+0x184>)
 8000a1a:	f7ff fc39 	bl	8000290 <myprintf>
    myprintf("num_messages: %u\r\n", stat.num_messages);
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <get_msg_type_details+0x194>)
 8000a20:	7a1b      	ldrb	r3, [r3, #8]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <get_msg_type_details+0x188>)
 8000a26:	f7ff fc33 	bl	8000290 <myprintf>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000278 	.word	0x20000278
 8000a38:	08009898 	.word	0x08009898
 8000a3c:	080098a0 	.word	0x080098a0
 8000a40:	080098ac 	.word	0x080098ac
 8000a44:	080098bc 	.word	0x080098bc
 8000a48:	080098c8 	.word	0x080098c8
 8000a4c:	20000288 	.word	0x20000288
 8000a50:	080098dc 	.word	0x080098dc
 8000a54:	20000298 	.word	0x20000298
 8000a58:	080098e4 	.word	0x080098e4

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a60:	f2ad 6d64 	subw	sp, sp, #1636	@ 0x664
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f001 f973 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 fddd 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 ff0d 	bl	800188c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a72:	f000 fedb 	bl	800182c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000a76:	f000 fe37 	bl	80016e8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000a7a:	f000 fea7 	bl	80017cc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000a7e:	f000 fe67 	bl	8001750 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000a82:	f004 fe1d 	bl	80056c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ Starting LT~\r\n\r\n");
 8000a86:	489d      	ldr	r0, [pc, #628]	@ (8000cfc <main+0x2a0>)
 8000a88:	f7ff fc02 	bl	8000290 <myprintf>
  configure_sd();
 8000a8c:	f7ff fd34 	bl	80004f8 <configure_sd>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a94:	f001 f9c2 	bl	8001e1c <HAL_Delay>
  //some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations
  //Open the file system
  myprintf("\r\nInitialising SD CARD\r\n\r\n");
 8000a98:	4899      	ldr	r0, [pc, #612]	@ (8000d00 <main+0x2a4>)
 8000a9a:	f7ff fbf9 	bl	8000290 <myprintf>
  int init_tries = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000aa4:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4996      	ldr	r1, [pc, #600]	@ (8000d04 <main+0x2a8>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f007 fa05 	bl	8007ebc <f_mount>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
  while(fres != FR_OK && init_tries<5){
 8000ab8:	e011      	b.n	8000ade <main+0x82>
	myprintf("Trying Again\r\n");
 8000aba:	4893      	ldr	r0, [pc, #588]	@ (8000d08 <main+0x2ac>)
 8000abc:	f7ff fbe8 	bl	8000290 <myprintf>
	init_tries++;
 8000ac0:	f8d7 3658 	ldr.w	r3, [r7, #1624]	@ 0x658
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000aca:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000ace:	2201      	movs	r2, #1
 8000ad0:	498c      	ldr	r1, [pc, #560]	@ (8000d04 <main+0x2a8>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f007 f9f2 	bl	8007ebc <f_mount>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
  while(fres != FR_OK && init_tries<5){
 8000ade:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <main+0x92>
 8000ae6:	f8d7 3658 	ldr.w	r3, [r7, #1624]	@ 0x658
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	dde5      	ble.n	8000aba <main+0x5e>
  }
  if (fres != FR_OK) {
 8000aee:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d018      	beq.n	8000b28 <main+0xcc>
	myprintf("f_mount error (%i)\r\n", fres);
 8000af6:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000afa:	4619      	mov	r1, r3
 8000afc:	4883      	ldr	r0, [pc, #524]	@ (8000d0c <main+0x2b0>)
 8000afe:	f7ff fbc7 	bl	8000290 <myprintf>
	while(1){
		HAL_GPIO_TogglePin(GPIOA, Green_LED_Pin);
 8000b02:	2120      	movs	r1, #32
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f001 fd30 	bl	800256c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b10:	f001 f984 	bl	8001e1c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, Green_LED_Pin);
 8000b14:	2120      	movs	r1, #32
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1a:	f001 fd27 	bl	800256c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	@ 0x64
 8000b20:	f001 f97c 	bl	8001e1c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, Green_LED_Pin);
 8000b24:	bf00      	nop
 8000b26:	e7ec      	b.n	8000b02 <main+0xa6>
	}
  }
  myprintf("\r\nSD CARD Initialised!\r\n\r\n");
 8000b28:	4879      	ldr	r0, [pc, #484]	@ (8000d10 <main+0x2b4>)
 8000b2a:	f7ff fbb1 	bl	8000290 <myprintf>

  char buffer[255];
  char *filename = "settings.bin";
 8000b2e:	4b79      	ldr	r3, [pc, #484]	@ (8000d14 <main+0x2b8>)
 8000b30:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c

  fres = f_open(&fil, filename, FA_READ);
 8000b34:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f007 fa04 	bl	8007f4c <f_open>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
  if (fres != FR_OK) {
 8000b4a:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d009      	beq.n	8000b66 <main+0x10a>
	myprintf("f_open error (%i)\r\n", fres);
 8000b52:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000b56:	4619      	mov	r1, r3
 8000b58:	486f      	ldr	r0, [pc, #444]	@ (8000d18 <main+0x2bc>)
 8000b5a:	f7ff fb99 	bl	8000290 <myprintf>
	myprintf("unable to open file");
 8000b5e:	486f      	ldr	r0, [pc, #444]	@ (8000d1c <main+0x2c0>)
 8000b60:	f7ff fb96 	bl	8000290 <myprintf>
 8000b64:	e002      	b.n	8000b6c <main+0x110>
  }
  else{
	myprintf("Settings File opened!\r\n");
 8000b66:	486e      	ldr	r0, [pc, #440]	@ (8000d20 <main+0x2c4>)
 8000b68:	f7ff fb92 	bl	8000290 <myprintf>
  }

  //get number of messages
  UINT bytes_read;
  fres = f_read(&fil, buffer, 13, &bytes_read);
 8000b6c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000b70:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000b74:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8000b78:	220d      	movs	r2, #13
 8000b7a:	f007 fc5c 	bl	8008436 <f_read>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
  if(bytes_read == 0) {
 8000b84:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000b88:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d105      	bne.n	8000b9e <main+0x142>
	myprintf("f_read error (%i)\r\n", fres);
 8000b92:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000b96:	4619      	mov	r1, r3
 8000b98:	4862      	ldr	r0, [pc, #392]	@ (8000d24 <main+0x2c8>)
 8000b9a:	f7ff fb79 	bl	8000290 <myprintf>
  }
  uint8_t num_msgs = buffer[0];
 8000b9e:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000ba2:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f887 361b 	strb.w	r3, [r7, #1563]	@ 0x61b
  myprintf("num messages: %u\r\n", num_msgs);
 8000bac:	f897 361b 	ldrb.w	r3, [r7, #1563]	@ 0x61b
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	485d      	ldr	r0, [pc, #372]	@ (8000d28 <main+0x2cc>)
 8000bb4:	f7ff fb6c 	bl	8000290 <myprintf>

  struct can_msg table[num_msgs];
 8000bb8:	f897 661b 	ldrb.w	r6, [r7, #1563]	@ 0x61b
 8000bbc:	4633      	mov	r3, r6
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8000bc4:	b2f3      	uxtb	r3, r6
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4693      	mov	fp, r2
 8000bcc:	4652      	mov	r2, sl
 8000bce:	465b      	mov	r3, fp
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	f04f 0100 	mov.w	r1, #0
 8000bd8:	0099      	lsls	r1, r3, #2
 8000bda:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000bde:	0090      	lsls	r0, r2, #2
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	eb12 040a 	adds.w	r4, r2, sl
 8000be8:	eb43 050b 	adc.w	r5, r3, fp
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	012b      	lsls	r3, r5, #4
 8000bf6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000bfa:	0122      	lsls	r2, r4, #4
 8000bfc:	b2f3      	uxtb	r3, r6
 8000bfe:	2200      	movs	r2, #0
 8000c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c02:	647a      	str	r2, [r7, #68]	@ 0x44
 8000c04:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000c08:	4622      	mov	r2, r4
 8000c0a:	462b      	mov	r3, r5
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	f04f 0100 	mov.w	r1, #0
 8000c14:	0099      	lsls	r1, r3, #2
 8000c16:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c1a:	0090      	lsls	r0, r2, #2
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4621      	mov	r1, r4
 8000c22:	eb12 0801 	adds.w	r8, r2, r1
 8000c26:	4629      	mov	r1, r5
 8000c28:	eb43 0901 	adc.w	r9, r3, r1
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000c38:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000c3c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000c40:	4632      	mov	r2, r6
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	3307      	adds	r3, #7
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	ebad 0d03 	sub.w	sp, sp, r3
 8000c54:	466b      	mov	r3, sp
 8000c56:	3301      	adds	r3, #1
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	f8c7 3610 	str.w	r3, [r7, #1552]	@ 0x610
  //Get message types
  get_msg_type_details(buffer);
 8000c60:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe2b 	bl	80008c0 <get_msg_type_details>

  //get individual message details
  myprintf("Getting individual msg details\r\n");
 8000c6a:	4830      	ldr	r0, [pc, #192]	@ (8000d2c <main+0x2d0>)
 8000c6c:	f7ff fb10 	bl	8000290 <myprintf>
  for (int counter = 0; counter < num_msgs; counter++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8000c76:	e016      	b.n	8000ca6 <main+0x24a>
      f_read(&fil, buffer, 10, &bytes_read);
 8000c78:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000c7c:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000c80:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8000c84:	220a      	movs	r2, #10
 8000c86:	f007 fbd6 	bl	8008436 <f_read>
      process_line(buffer, table, counter);
 8000c8a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000c8e:	f8d7 2654 	ldr.w	r2, [r7, #1620]	@ 0x654
 8000c92:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fdba 	bl	8000810 <process_line>
  for (int counter = 0; counter < num_msgs; counter++) {
 8000c9c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	@ 0x654
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8000ca6:	f897 261b 	ldrb.w	r2, [r7, #1563]	@ 0x61b
 8000caa:	f8d7 3654 	ldr.w	r3, [r7, #1620]	@ 0x654
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	dbe2      	blt.n	8000c78 <main+0x21c>
  }
  f_close(&fil);
 8000cb2:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fde2 	bl	8008880 <f_close>

  myprintf("\r\nMessage Information Loaded\r\n");
 8000cbc:	481c      	ldr	r0, [pc, #112]	@ (8000d30 <main+0x2d4>)
 8000cbe:	f7ff fae7 	bl	8000290 <myprintf>

  CAN_RxHeaderTypeDef   RxHeader;
  uint8_t               RxData[8];

  //remove once CAN works
  filename = "fake_can.bin";
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <main+0x2d8>)
 8000cc4:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
  fres = f_open(&fil, filename, FA_READ);
 8000cc8:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f007 f93a 	bl	8007f4c <f_open>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
	if (fres != FR_OK) {
 8000cde:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d02a      	beq.n	8000d3c <main+0x2e0>
		myprintf("f_open error (%i)\r\n", fres);
 8000ce6:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	@ (8000d18 <main+0x2bc>)
 8000cee:	f7ff facf 	bl	8000290 <myprintf>
		myprintf("unable to open fake messages file");
 8000cf2:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <main+0x2dc>)
 8000cf4:	f7ff facc 	bl	8000290 <myprintf>
 8000cf8:	e023      	b.n	8000d42 <main+0x2e6>
 8000cfa:	bf00      	nop
 8000cfc:	080098ec 	.word	0x080098ec
 8000d00:	08009904 	.word	0x08009904
 8000d04:	08009920 	.word	0x08009920
 8000d08:	08009924 	.word	0x08009924
 8000d0c:	08009934 	.word	0x08009934
 8000d10:	0800994c 	.word	0x0800994c
 8000d14:	08009968 	.word	0x08009968
 8000d18:	08009978 	.word	0x08009978
 8000d1c:	0800998c 	.word	0x0800998c
 8000d20:	080099a0 	.word	0x080099a0
 8000d24:	080099b8 	.word	0x080099b8
 8000d28:	080099cc 	.word	0x080099cc
 8000d2c:	080099e0 	.word	0x080099e0
 8000d30:	08009a04 	.word	0x08009a04
 8000d34:	08009a24 	.word	0x08009a24
 8000d38:	08009a34 	.word	0x08009a34
	}
	else{
		myprintf("Msg File opened!\r\n");
 8000d3c:	48a9      	ldr	r0, [pc, #676]	@ (8000fe4 <main+0x588>)
 8000d3e:	f7ff faa7 	bl	8000290 <myprintf>
	}

    //get number of messages
    fres = f_read(&fil, buffer, 1, &bytes_read);
 8000d42:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d46:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000d4a:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f007 fb71 	bl	8008436 <f_read>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
    if(bytes_read == 0) {
 8000d5a:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000d5e:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <main+0x318>
  	myprintf("f_read error (%i)\r\n", fres);
 8000d68:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	489e      	ldr	r0, [pc, #632]	@ (8000fe8 <main+0x58c>)
 8000d70:	f7ff fa8e 	bl	8000290 <myprintf>
    }
    uint8_t num_csv_msgs = buffer[0];
 8000d74:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000d78:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	f887 360f 	strb.w	r3, [r7, #1551]	@ 0x60f
    myprintf("num messages: %u\r\n", num_csv_msgs);
 8000d82:	f897 360f 	ldrb.w	r3, [r7, #1551]	@ 0x60f
 8000d86:	4619      	mov	r1, r3
 8000d88:	4898      	ldr	r0, [pc, #608]	@ (8000fec <main+0x590>)
 8000d8a:	f7ff fa81 	bl	8000290 <myprintf>

    int msg_ctr = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
    struct can_msg msg_type;
    struct can_msg null_msg;
    null_msg.id = 0;
 8000d94:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000d98:	f2a3 6214 	subw	r2, r3, #1556	@ 0x614
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	8013      	strh	r3, [r2, #0]

    uint32_t stat_last_time = HAL_GetTick();
 8000da0:	f001 f830 	bl	8001e04 <HAL_GetTick>
 8000da4:	f8c7 064c 	str.w	r0, [r7, #1612]	@ 0x64c
    uint32_t fast_last_time = HAL_GetTick();
 8000da8:	f001 f82c 	bl	8001e04 <HAL_GetTick>
 8000dac:	f8c7 0648 	str.w	r0, [r7, #1608]	@ 0x648
    uint32_t med_last_time = HAL_GetTick();
 8000db0:	f001 f828 	bl	8001e04 <HAL_GetTick>
 8000db4:	f8c7 0644 	str.w	r0, [r7, #1604]	@ 0x644
    uint32_t curr_time;

    uint8_t stat_pkt[stat.data_len+3];
 8000db8:	4b8d      	ldr	r3, [pc, #564]	@ (8000ff0 <main+0x594>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	1cd9      	adds	r1, r3, #3
 8000dbe:	1e4b      	subs	r3, r1, #1
 8000dc0:	f8c7 3608 	str.w	r3, [r7, #1544]	@ 0x608
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000dd8:	4628      	mov	r0, r5
 8000dda:	00c3      	lsls	r3, r0, #3
 8000ddc:	4620      	mov	r0, r4
 8000dde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000de2:	4620      	mov	r0, r4
 8000de4:	00c2      	lsls	r2, r0, #3
 8000de6:	460a      	mov	r2, r1
 8000de8:	2300      	movs	r3, #0
 8000dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	00c3      	lsls	r3, r0, #3
 8000dfe:	4620      	mov	r0, r4
 8000e00:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e04:	4620      	mov	r0, r4
 8000e06:	00c2      	lsls	r2, r0, #3
 8000e08:	460b      	mov	r3, r1
 8000e0a:	3307      	adds	r3, #7
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	ebad 0d03 	sub.w	sp, sp, r3
 8000e14:	466b      	mov	r3, sp
 8000e16:	3300      	adds	r3, #0
 8000e18:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
    uint8_t stat_pkt_last[stat.data_len+3];
 8000e1c:	4b74      	ldr	r3, [pc, #464]	@ (8000ff0 <main+0x594>)
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	1cd9      	adds	r1, r3, #3
 8000e22:	1e4b      	subs	r3, r1, #1
 8000e24:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8000e28:	460a      	mov	r2, r1
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	00c3      	lsls	r3, r0, #3
 8000e40:	4620      	mov	r0, r4
 8000e42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e46:	4620      	mov	r0, r4
 8000e48:	00c2      	lsls	r2, r0, #3
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623a      	str	r2, [r7, #32]
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e5e:	4628      	mov	r0, r5
 8000e60:	00c3      	lsls	r3, r0, #3
 8000e62:	4620      	mov	r0, r4
 8000e64:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e68:	4620      	mov	r0, r4
 8000e6a:	00c2      	lsls	r2, r0, #3
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	3307      	adds	r3, #7
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	ebad 0d03 	sub.w	sp, sp, r3
 8000e78:	466b      	mov	r3, sp
 8000e7a:	3300      	adds	r3, #0
 8000e7c:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
    stat_pkt[0] = stat.id;
 8000e80:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff0 <main+0x594>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000e88:	701a      	strb	r2, [r3, #0]
    uint8_t med_pkt[med.data_len+3];
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff4 <main+0x598>)
 8000e8c:	785b      	ldrb	r3, [r3, #1]
 8000e8e:	1cd9      	adds	r1, r3, #3
 8000e90:	1e4b      	subs	r3, r1, #1
 8000e92:	f8c7 35f8 	str.w	r3, [r7, #1528]	@ 0x5f8
 8000e96:	460a      	mov	r2, r1
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61ba      	str	r2, [r7, #24]
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000eaa:	4628      	mov	r0, r5
 8000eac:	00c3      	lsls	r3, r0, #3
 8000eae:	4620      	mov	r0, r4
 8000eb0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	00c2      	lsls	r2, r0, #3
 8000eb8:	460a      	mov	r2, r1
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613a      	str	r2, [r7, #16]
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000ecc:	4628      	mov	r0, r5
 8000ece:	00c3      	lsls	r3, r0, #3
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	00c2      	lsls	r2, r0, #3
 8000eda:	460b      	mov	r3, r1
 8000edc:	3307      	adds	r3, #7
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ee6:	466b      	mov	r3, sp
 8000ee8:	3300      	adds	r3, #0
 8000eea:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
    med_pkt[0] = med.id;
 8000eee:	4b41      	ldr	r3, [pc, #260]	@ (8000ff4 <main+0x598>)
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000ef6:	701a      	strb	r2, [r3, #0]
    uint8_t fast_pkt[fast.data_len+3];
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff8 <main+0x59c>)
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	1cd9      	adds	r1, r3, #3
 8000efe:	1e4b      	subs	r3, r1, #1
 8000f00:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 8000f04:	460a      	mov	r2, r1
 8000f06:	2300      	movs	r3, #0
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f18:	4628      	mov	r0, r5
 8000f1a:	00c3      	lsls	r3, r0, #3
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f22:	4620      	mov	r0, r4
 8000f24:	00c2      	lsls	r2, r0, #3
 8000f26:	460a      	mov	r2, r1
 8000f28:	2300      	movs	r3, #0
 8000f2a:	603a      	str	r2, [r7, #0]
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	00c3      	lsls	r3, r0, #3
 8000f3e:	4620      	mov	r0, r4
 8000f40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f44:	4620      	mov	r0, r4
 8000f46:	00c2      	lsls	r2, r0, #3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	3307      	adds	r3, #7
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	ebad 0d03 	sub.w	sp, sp, r3
 8000f54:	466b      	mov	r3, sp
 8000f56:	3300      	adds	r3, #0
 8000f58:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
    fast_pkt[0] = fast.id;
 8000f5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <main+0x59c>)
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000f64:	701a      	strb	r2, [r3, #0]

    uint8_t *curr_pkt;
    uint8_t send_stat = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 363f 	strb.w	r3, [r7, #1599]	@ 0x63f

    stat_pkt[1] = stat_pkt[2] = 0;
 8000f6c:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000f70:	2200      	movs	r2, #0
 8000f72:	709a      	strb	r2, [r3, #2]
 8000f74:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000f78:	789a      	ldrb	r2, [r3, #2]
 8000f7a:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8000f7e:	705a      	strb	r2, [r3, #1]
    med_pkt[1] = med_pkt[2] = 0;
 8000f80:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000f84:	2200      	movs	r2, #0
 8000f86:	709a      	strb	r2, [r3, #2]
 8000f88:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000f8c:	789a      	ldrb	r2, [r3, #2]
 8000f8e:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8000f92:	705a      	strb	r2, [r3, #1]
    fast_pkt[1] = fast_pkt[2] = 0;
 8000f94:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000f98:	2200      	movs	r2, #0
 8000f9a:	709a      	strb	r2, [r3, #2]
 8000f9c:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000fa0:	789a      	ldrb	r2, [r3, #2]
 8000fa2:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8000fa6:	705a      	strb	r2, [r3, #1]
	  //	  	  - send fast
	  //	  	  -if(time since last med sent > med time):
	  //	  	  - send med
	  //	  	  repeat;

	  myprintf("Next msg\r\n");
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <main+0x5a0>)
 8000faa:	f7ff f971 	bl	8000290 <myprintf>
	  fres = f_read(&fil, buffer, 16, &bytes_read);
 8000fae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000fb2:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000fb6:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8000fba:	2210      	movs	r2, #16
 8000fbc:	f007 fa3b 	bl	8008436 <f_read>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
	  if(bytes_read == 0) {
 8000fc6:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8000fca:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d115      	bne.n	8001000 <main+0x5a4>
		myprintf("f_read error (%i)\r\n", fres);
 8000fd4:	f897 365f 	ldrb.w	r3, [r7, #1631]	@ 0x65f
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <main+0x58c>)
 8000fdc:	f7ff f958 	bl	8000290 <myprintf>
 8000fe0:	e00e      	b.n	8001000 <main+0x5a4>
 8000fe2:	bf00      	nop
 8000fe4:	08009a58 	.word	0x08009a58
 8000fe8:	080099b8 	.word	0x080099b8
 8000fec:	080099cc 	.word	0x080099cc
 8000ff0:	20000298 	.word	0x20000298
 8000ff4:	20000278 	.word	0x20000278
 8000ff8:	20000288 	.word	0x20000288
 8000ffc:	08009a6c 	.word	0x08009a6c
	  }

	  RxHeader.StdId = 0;
 8001000:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001004:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
	  RxHeader.StdId |= buffer[0] << 24;
 800100c:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001010:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800101a:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	431a      	orrs	r2, r3
 8001024:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001028:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800102c:	601a      	str	r2, [r3, #0]
	  RxHeader.StdId |= buffer[1] << 16;
 800102e:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001032:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800103c:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	041b      	lsls	r3, r3, #16
 8001044:	431a      	orrs	r2, r3
 8001046:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800104a:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800104e:	601a      	str	r2, [r3, #0]
	  RxHeader.StdId |= buffer[2] << 8;
 8001050:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001054:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800105e:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	431a      	orrs	r2, r3
 8001068:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800106c:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001070:	601a      	str	r2, [r3, #0]
	  RxHeader.StdId |= buffer[3];
 8001072:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001076:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8001080:	f2a2 52d4 	subw	r2, r2, #1492	@ 0x5d4
 8001084:	78d2      	ldrb	r2, [r2, #3]
 8001086:	431a      	orrs	r2, r3
 8001088:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800108c:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001090:	601a      	str	r2, [r3, #0]

	  RxHeader.DLC = 0;
 8001092:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001096:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
	  RxHeader.DLC |= buffer[4] << 24;
 800109e:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010a2:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010ac:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	061b      	lsls	r3, r3, #24
 80010b4:	431a      	orrs	r2, r3
 80010b6:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010ba:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80010be:	611a      	str	r2, [r3, #16]
	  RxHeader.DLC |= buffer[5] << 16;
 80010c0:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010c4:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010ce:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 80010d2:	795b      	ldrb	r3, [r3, #5]
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	431a      	orrs	r2, r3
 80010d8:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010dc:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80010e0:	611a      	str	r2, [r3, #16]
	  RxHeader.DLC |= buffer[6] << 8;
 80010e2:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010e6:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010f0:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 80010f4:	799b      	ldrb	r3, [r3, #6]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	431a      	orrs	r2, r3
 80010fa:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80010fe:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001102:	611a      	str	r2, [r3, #16]
	  RxHeader.DLC |= buffer[7];
 8001104:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001108:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8001112:	f2a2 52d4 	subw	r2, r2, #1492	@ 0x5d4
 8001116:	79d2      	ldrb	r2, [r2, #7]
 8001118:	431a      	orrs	r2, r3
 800111a:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800111e:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001122:	611a      	str	r2, [r3, #16]

	  for(int idx = 0; idx<RxHeader.DLC; idx++){
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 800112a:	e015      	b.n	8001158 <main+0x6fc>
		 RxData[idx] = buffer[8+idx];
 800112c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	@ 0x638
 8001130:	3308      	adds	r3, #8
 8001132:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8001136:	f2a2 52d4 	subw	r2, r2, #1492	@ 0x5d4
 800113a:	5cd1      	ldrb	r1, [r2, r3]
 800113c:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001140:	f2a3 52fc 	subw	r2, r3, #1532	@ 0x5fc
 8001144:	f8d7 3638 	ldr.w	r3, [r7, #1592]	@ 0x638
 8001148:	4413      	add	r3, r2
 800114a:	460a      	mov	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	  for(int idx = 0; idx<RxHeader.DLC; idx++){
 800114e:	f8d7 3638 	ldr.w	r3, [r7, #1592]	@ 0x638
 8001152:	3301      	adds	r3, #1
 8001154:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 8001158:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800115c:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	f8d7 3638 	ldr.w	r3, [r7, #1592]	@ 0x638
 8001166:	429a      	cmp	r2, r3
 8001168:	d8e0      	bhi.n	800112c <main+0x6d0>
	  }

	  myprintf("(%x) (%i) ", RxHeader.StdId, RxHeader.DLC);
 800116a:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800116e:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001178:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	461a      	mov	r2, r3
 8001180:	48b8      	ldr	r0, [pc, #736]	@ (8001464 <main+0xa08>)
 8001182:	f7ff f885 	bl	8000290 <myprintf>
	  for(int idx = 0; idx<RxHeader.DLC; idx++){
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 800118c:	e010      	b.n	80011b0 <main+0x754>
		  myprintf("(%x)", RxData[idx]);
 800118e:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001192:	f2a3 52fc 	subw	r2, r3, #1532	@ 0x5fc
 8001196:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	48b1      	ldr	r0, [pc, #708]	@ (8001468 <main+0xa0c>)
 80011a2:	f7ff f875 	bl	8000290 <myprintf>
	  for(int idx = 0; idx<RxHeader.DLC; idx++){
 80011a6:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 80011b0:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80011b4:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 80011be:	429a      	cmp	r2, r3
 80011c0:	d8e5      	bhi.n	800118e <main+0x732>
	  	  }
	  myprintf("\r\n");
 80011c2:	48aa      	ldr	r0, [pc, #680]	@ (800146c <main+0xa10>)
 80011c4:	f7ff f864 	bl	8000290 <myprintf>

	  msg_type = null_msg;
 80011c8:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80011cc:	f5a3 61c1 	sub.w	r1, r3, #1544	@ 0x608
 80011d0:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80011d4:	f2a3 6214 	subw	r2, r3, #1556	@ 0x614
 80011d8:	460b      	mov	r3, r1
 80011da:	ca07      	ldmia	r2, {r0, r1, r2}
 80011dc:	c303      	stmia	r3!, {r0, r1}
 80011de:	801a      	strh	r2, [r3, #0]
	  for(int idx =0; idx<num_msgs; idx++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 80011e6:	e029      	b.n	800123c <main+0x7e0>
		  if(RxHeader.StdId == table[idx].id){
 80011e8:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80011ec:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	f8d7 0610 	ldr.w	r0, [r7, #1552]	@ 0x610
 80011f6:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4403      	add	r3, r0
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	4299      	cmp	r1, r3
 8001208:	d113      	bne.n	8001232 <main+0x7d6>
			  msg_type = table[idx];
 800120a:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800120e:	f5a3 60c1 	sub.w	r0, r3, #1544	@ 0x608
 8001212:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 8001216:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	18ca      	adds	r2, r1, r3
 8001224:	4603      	mov	r3, r0
 8001226:	6810      	ldr	r0, [r2, #0]
 8001228:	6851      	ldr	r1, [r2, #4]
 800122a:	c303      	stmia	r3!, {r0, r1}
 800122c:	8912      	ldrh	r2, [r2, #8]
 800122e:	801a      	strh	r2, [r3, #0]
			  break;
 8001230:	e00a      	b.n	8001248 <main+0x7ec>
	  for(int idx =0; idx<num_msgs; idx++){
 8001232:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 8001236:	3301      	adds	r3, #1
 8001238:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 800123c:	f897 361b 	ldrb.w	r3, [r7, #1563]	@ 0x61b
 8001240:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 8001244:	429a      	cmp	r2, r3
 8001246:	dbcf      	blt.n	80011e8 <main+0x78c>
		  }
	  }

	  if(msg_type.id != 0)
 8001248:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800124c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00f      	beq.n	8001276 <main+0x81a>
	  {
		  myprintf("(%x) (%c)\r\n", msg_type.id, msg_type.pkt);
 8001256:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800125a:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001266:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	461a      	mov	r2, r3
 800126e:	4880      	ldr	r0, [pc, #512]	@ (8001470 <main+0xa14>)
 8001270:	f7ff f80e 	bl	8000290 <myprintf>
 8001274:	e002      	b.n	800127c <main+0x820>
	  }
	  else{
		  myprintf("Corresponding message not found\r\n");
 8001276:	487f      	ldr	r0, [pc, #508]	@ (8001474 <main+0xa18>)
 8001278:	f7ff f80a 	bl	8000290 <myprintf>
	  }

	  curr_pkt = NULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3640 	str.w	r3, [r7, #1600]	@ 0x640
	  if(msg_type.pkt == fast.id)
 8001282:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001286:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800128a:	789a      	ldrb	r2, [r3, #2]
 800128c:	4b7a      	ldr	r3, [pc, #488]	@ (8001478 <main+0xa1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d104      	bne.n	800129e <main+0x842>
	  {
		  curr_pkt = fast_pkt;
 8001294:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8001298:	f8c7 3640 	str.w	r3, [r7, #1600]	@ 0x640
 800129c:	e01a      	b.n	80012d4 <main+0x878>
	  } else if(msg_type.pkt == med.id){
 800129e:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80012a2:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 80012a6:	789a      	ldrb	r2, [r3, #2]
 80012a8:	4b74      	ldr	r3, [pc, #464]	@ (800147c <main+0xa20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d104      	bne.n	80012ba <main+0x85e>
		  curr_pkt = med_pkt;
 80012b0:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80012b4:	f8c7 3640 	str.w	r3, [r7, #1600]	@ 0x640
 80012b8:	e00c      	b.n	80012d4 <main+0x878>
	  } else if(msg_type.pkt == stat.id){
 80012ba:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80012be:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 80012c2:	789a      	ldrb	r2, [r3, #2]
 80012c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001480 <main+0xa24>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d103      	bne.n	80012d4 <main+0x878>
		  curr_pkt = stat_pkt;
 80012cc:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80012d0:	f8c7 3640 	str.w	r3, [r7, #1600]	@ 0x640
	  }

	  if(msg_type.pkt == stat.id){
 80012d4:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80012d8:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 80012dc:	789a      	ldrb	r2, [r3, #2]
 80012de:	4b68      	ldr	r3, [pc, #416]	@ (8001480 <main+0xa24>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d12e      	bne.n	8001344 <main+0x8e8>
		  for(int idx = 0; idx<msg_type.lts; idx++){
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 80012ec:	e020      	b.n	8001330 <main+0x8d4>
			  if(curr_pkt[msg_type.start+idx] != stat_pkt_last[idx])
 80012ee:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80012f2:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 80012f6:	78db      	ldrb	r3, [r3, #3]
 80012f8:	461a      	mov	r2, r3
 80012fa:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 80012fe:	4413      	add	r3, r2
 8001300:	461a      	mov	r2, r3
 8001302:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 8001306:	4413      	add	r3, r2
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	@ 0x5fc
 800130e:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d005      	beq.n	8001326 <main+0x8ca>
			  {
				  send_stat = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	f887 363f 	strb.w	r3, [r7, #1599]	@ 0x63f
				  myprintf("Stat changed!!\r\n");
 8001320:	4858      	ldr	r0, [pc, #352]	@ (8001484 <main+0xa28>)
 8001322:	f7fe ffb5 	bl	8000290 <myprintf>
		  for(int idx = 0; idx<msg_type.lts; idx++){
 8001326:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 800132a:	3301      	adds	r3, #1
 800132c:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8001330:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001334:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8001338:	7a1b      	ldrb	r3, [r3, #8]
 800133a:	461a      	mov	r2, r3
 800133c:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 8001340:	4293      	cmp	r3, r2
 8001342:	dbd4      	blt.n	80012ee <main+0x892>
			  }
		  }
	  }
	  if(curr_pkt != NULL && msg_type.idx < 8){
 8001344:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01c      	beq.n	8001386 <main+0x92a>
 800134c:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001350:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8001354:	7a5b      	ldrb	r3, [r3, #9]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d815      	bhi.n	8001386 <main+0x92a>
		  curr_pkt[1] |= 1U << (7-msg_type.idx);
 800135a:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 800135e:	3301      	adds	r3, #1
 8001360:	7819      	ldrb	r1, [r3, #0]
 8001362:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001366:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800136a:	7a5b      	ldrb	r3, [r3, #9]
 800136c:	f1c3 0307 	rsb	r3, r3, #7
 8001370:	2201      	movs	r2, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	b2da      	uxtb	r2, r3
 8001378:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 800137c:	3301      	adds	r3, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e018      	b.n	80013b8 <main+0x95c>
		  //myprintf("1(%u)\r\n", curr_pkt[1]);
	  } else if (curr_pkt != NULL){
 8001386:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 800138a:	2b00      	cmp	r3, #0
 800138c:	d014      	beq.n	80013b8 <main+0x95c>
		  curr_pkt[2] |= 1U << (15-msg_type.idx);
 800138e:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 8001392:	3302      	adds	r3, #2
 8001394:	7819      	ldrb	r1, [r3, #0]
 8001396:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 800139a:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800139e:	7a5b      	ldrb	r3, [r3, #9]
 80013a0:	f1c3 030f 	rsb	r3, r3, #15
 80013a4:	2201      	movs	r2, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 80013b0:	3302      	adds	r3, #2
 80013b2:	430a      	orrs	r2, r1
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
		  //myprintf("2(%u)\r\n", curr_pkt[2]);
	  }


	  if(curr_pkt != NULL){
 80013b8:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d028      	beq.n	8001412 <main+0x9b6>
		  for(int idx = 0; idx<msg_type.lts; idx++){
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 80013c6:	e01a      	b.n	80013fe <main+0x9a2>
			  curr_pkt[msg_type.start+idx] = RxData[idx];
 80013c8:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80013cc:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 80013d0:	78db      	ldrb	r3, [r3, #3]
 80013d2:	461a      	mov	r2, r3
 80013d4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 80013d8:	4413      	add	r3, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	f8d7 3640 	ldr.w	r3, [r7, #1600]	@ 0x640
 80013e0:	4413      	add	r3, r2
 80013e2:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 80013e6:	f2a2 51fc 	subw	r1, r2, #1532	@ 0x5fc
 80013ea:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 80013ee:	440a      	add	r2, r1
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	701a      	strb	r2, [r3, #0]
		  for(int idx = 0; idx<msg_type.lts; idx++){
 80013f4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 80013f8:	3301      	adds	r3, #1
 80013fa:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 80013fe:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 8001402:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8001406:	7a1b      	ldrb	r3, [r3, #8]
 8001408:	461a      	mov	r2, r3
 800140a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 800140e:	4293      	cmp	r3, r2
 8001410:	dbda      	blt.n	80013c8 <main+0x96c>
		  }
	  }

	  curr_time = HAL_GetTick();
 8001412:	f000 fcf7 	bl	8001e04 <HAL_GetTick>
 8001416:	f8c7 05e8 	str.w	r0, [r7, #1512]	@ 0x5e8
	  if(send_stat == 1 || curr_time - stat_last_time > stat.speed*100){
 800141a:	f897 363f 	ldrb.w	r3, [r7, #1599]	@ 0x63f
 800141e:	2b01      	cmp	r3, #1
 8001420:	d00b      	beq.n	800143a <main+0x9de>
 8001422:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 8001426:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <main+0xa24>)
 800142e:	6852      	ldr	r2, [r2, #4]
 8001430:	2164      	movs	r1, #100	@ 0x64
 8001432:	fb01 f202 	mul.w	r2, r1, r2
 8001436:	4293      	cmp	r3, r2
 8001438:	d959      	bls.n	80014ee <main+0xa92>
		  send_stat = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 363f 	strb.w	r3, [r7, #1599]	@ 0x63f
		  ok_notok = HAL_UART_Transmit(&huart1, stat_pkt, stat.data_len+3, 100);
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <main+0xa24>)
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	3303      	adds	r3, #3
 8001446:	b29a      	uxth	r2, r3
 8001448:	2364      	movs	r3, #100	@ 0x64
 800144a:	f8d7 1604 	ldr.w	r1, [r7, #1540]	@ 0x604
 800144e:	480e      	ldr	r0, [pc, #56]	@ (8001488 <main+0xa2c>)
 8001450:	f003 fcbc 	bl	8004dcc <HAL_UART_Transmit>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <main+0xa30>)
 800145a:	701a      	strb	r2, [r3, #0]
		  for(int idx = 0; idx<stat.data_len+3; idx++){
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8001462:	e024      	b.n	80014ae <main+0xa52>
 8001464:	08009a78 	.word	0x08009a78
 8001468:	080097cc 	.word	0x080097cc
 800146c:	080097d4 	.word	0x080097d4
 8001470:	08009a84 	.word	0x08009a84
 8001474:	08009a90 	.word	0x08009a90
 8001478:	20000288 	.word	0x20000288
 800147c:	20000278 	.word	0x20000278
 8001480:	20000298 	.word	0x20000298
 8001484:	08009ab4 	.word	0x08009ab4
 8001488:	20000150 	.word	0x20000150
 800148c:	20000000 	.word	0x20000000
		  			  myprintf("%2x", stat_pkt[idx]);
 8001490:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 8001494:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	4858      	ldr	r0, [pc, #352]	@ (8001600 <main+0xba4>)
 80014a0:	f7fe fef6 	bl	8000290 <myprintf>
		  for(int idx = 0; idx<stat.data_len+3; idx++){
 80014a4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 80014ae:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <main+0xba8>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	3302      	adds	r3, #2
 80014b4:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dde9      	ble.n	8001490 <main+0xa34>
		  		  }
		  myprintf("\r\n");
 80014bc:	4852      	ldr	r0, [pc, #328]	@ (8001608 <main+0xbac>)
 80014be:	f7fe fee7 	bl	8000290 <myprintf>
		  myprintf("lts: (%i)\r\n", stat.data_len+3);
 80014c2:	4b50      	ldr	r3, [pc, #320]	@ (8001604 <main+0xba8>)
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	3303      	adds	r3, #3
 80014c8:	4619      	mov	r1, r3
 80014ca:	4850      	ldr	r0, [pc, #320]	@ (800160c <main+0xbb0>)
 80014cc:	f7fe fee0 	bl	8000290 <myprintf>
		  myprintf("Stat sent!!\r\n");
 80014d0:	484f      	ldr	r0, [pc, #316]	@ (8001610 <main+0xbb4>)
 80014d2:	f7fe fedd 	bl	8000290 <myprintf>
		  stat_pkt[1] = 0;
 80014d6:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80014da:	2200      	movs	r2, #0
 80014dc:	705a      	strb	r2, [r3, #1]
		  stat_pkt[2] = 0;
 80014de:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80014e2:	2200      	movs	r2, #0
 80014e4:	709a      	strb	r2, [r3, #2]
		  stat_last_time = curr_time;
 80014e6:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80014ea:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
	  }

	  if(curr_time - fast_last_time > fast.speed*100){
 80014ee:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 80014f2:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a46      	ldr	r2, [pc, #280]	@ (8001614 <main+0xbb8>)
 80014fa:	6852      	ldr	r2, [r2, #4]
 80014fc:	2164      	movs	r1, #100	@ 0x64
 80014fe:	fb01 f202 	mul.w	r2, r1, r2
 8001502:	4293      	cmp	r3, r2
 8001504:	d939      	bls.n	800157a <main+0xb1e>
		  ok_notok = HAL_UART_Transmit(&huart1, fast_pkt, fast.data_len+3, 100);
 8001506:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <main+0xbb8>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	3303      	adds	r3, #3
 800150c:	b29a      	uxth	r2, r3
 800150e:	2364      	movs	r3, #100	@ 0x64
 8001510:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	@ 0x5ec
 8001514:	4840      	ldr	r0, [pc, #256]	@ (8001618 <main+0xbbc>)
 8001516:	f003 fc59 	bl	8004dcc <HAL_UART_Transmit>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <main+0xbc0>)
 8001520:	701a      	strb	r2, [r3, #0]
		  for(int idx = 0; idx<fast.data_len+3; idx++){
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8001528:	e00e      	b.n	8001548 <main+0xaec>
			  myprintf("%2x", fast_pkt[idx]);
 800152a:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	@ 0x5ec
 800152e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	@ 0x620
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	4831      	ldr	r0, [pc, #196]	@ (8001600 <main+0xba4>)
 800153a:	f7fe fea9 	bl	8000290 <myprintf>
		  for(int idx = 0; idx<fast.data_len+3; idx++){
 800153e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	@ 0x620
 8001542:	3301      	adds	r3, #1
 8001544:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8001548:	4b32      	ldr	r3, [pc, #200]	@ (8001614 <main+0xbb8>)
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	3302      	adds	r3, #2
 800154e:	f8d7 2620 	ldr.w	r2, [r7, #1568]	@ 0x620
 8001552:	429a      	cmp	r2, r3
 8001554:	dde9      	ble.n	800152a <main+0xace>
		  }
		  myprintf("\r\n");
 8001556:	482c      	ldr	r0, [pc, #176]	@ (8001608 <main+0xbac>)
 8001558:	f7fe fe9a 	bl	8000290 <myprintf>
		  myprintf("Fast sent!!\r\n");
 800155c:	4830      	ldr	r0, [pc, #192]	@ (8001620 <main+0xbc4>)
 800155e:	f7fe fe97 	bl	8000290 <myprintf>
		  med_pkt[1] = 0;
 8001562:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8001566:	2200      	movs	r2, #0
 8001568:	705a      	strb	r2, [r3, #1]
		  med_pkt[2] = 0;
 800156a:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 800156e:	2200      	movs	r2, #0
 8001570:	709a      	strb	r2, [r3, #2]
		  fast_last_time = curr_time;
 8001572:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 8001576:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
	  }

	  if(curr_time - med_last_time > med.speed*100){
 800157a:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	@ 0x5e8
 800157e:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <main+0xbc8>)
 8001586:	6852      	ldr	r2, [r2, #4]
 8001588:	2164      	movs	r1, #100	@ 0x64
 800158a:	fb01 f202 	mul.w	r2, r1, r2
 800158e:	4293      	cmp	r3, r2
 8001590:	d919      	bls.n	80015c6 <main+0xb6a>
		  ok_notok = HAL_UART_Transmit(&huart1, med_pkt, med.data_len+3, 100);
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <main+0xbc8>)
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	3303      	adds	r3, #3
 8001598:	b29a      	uxth	r2, r3
 800159a:	2364      	movs	r3, #100	@ 0x64
 800159c:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	@ 0x5f4
 80015a0:	481d      	ldr	r0, [pc, #116]	@ (8001618 <main+0xbbc>)
 80015a2:	f003 fc13 	bl	8004dcc <HAL_UART_Transmit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <main+0xbc0>)
 80015ac:	701a      	strb	r2, [r3, #0]
		  med_pkt[1] = 0;
 80015ae:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80015b2:	2200      	movs	r2, #0
 80015b4:	705a      	strb	r2, [r3, #1]
		  med_pkt[2] = 0;
 80015b6:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80015ba:	2200      	movs	r2, #0
 80015bc:	709a      	strb	r2, [r3, #2]
		  med_last_time = curr_time;
 80015be:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80015c2:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
	  }

	  	  msg_ctr++;
 80015c6:	f8d7 3650 	ldr.w	r3, [r7, #1616]	@ 0x650
 80015ca:	3301      	adds	r3, #1
 80015cc:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
	  	  if(msg_ctr == num_csv_msgs)
 80015d0:	f897 360f 	ldrb.w	r3, [r7, #1551]	@ 0x60f
 80015d4:	f8d7 2650 	ldr.w	r2, [r7, #1616]	@ 0x650
 80015d8:	429a      	cmp	r2, r3
 80015da:	d10b      	bne.n	80015f4 <main+0xb98>
	  	  {
	  		msg_ctr = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
	  		fres = f_lseek(&fil, 1);
 80015e2:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 f971 	bl	80088d0 <f_lseek>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 365f 	strb.w	r3, [r7, #1631]	@ 0x65f
	  	  }
	  	  HAL_Delay(1000);
 80015f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f8:	f000 fc10 	bl	8001e1c <HAL_Delay>
	  myprintf("Next msg\r\n");
 80015fc:	e4d4      	b.n	8000fa8 <main+0x54c>
 80015fe:	bf00      	nop
 8001600:	08009ac8 	.word	0x08009ac8
 8001604:	20000298 	.word	0x20000298
 8001608:	080097d4 	.word	0x080097d4
 800160c:	08009acc 	.word	0x08009acc
 8001610:	08009ad8 	.word	0x08009ad8
 8001614:	20000288 	.word	0x20000288
 8001618:	20000150 	.word	0x20000150
 800161c:	20000000 	.word	0x20000000
 8001620:	08009ae8 	.word	0x08009ae8
 8001624:	20000278 	.word	0x20000278

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0a6      	sub	sp, #152	@ 0x98
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001632:	2228      	movs	r2, #40	@ 0x28
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f007 fc3c 	bl	8008eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2258      	movs	r2, #88	@ 0x58
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f007 fc2e 	bl	8008eb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2302      	movs	r3, #2
 800165a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001660:	2310      	movs	r3, #16
 8001662:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800166c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001674:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001686:	4618      	mov	r0, r3
 8001688:	f000 ff8a 	bl	80025a0 <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001692:	f000 f977 	bl	8001984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001696:	230f      	movs	r3, #15
 8001698:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169a:	2302      	movs	r3, #2
 800169c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016b0:	2102      	movs	r1, #2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 ffc8 	bl	8003648 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016be:	f000 f961 	bl	8001984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80016c2:	2303      	movs	r3, #3
 80016c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 f9d9 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80016dc:	f000 f952 	bl	8001984 <Error_Handler>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3798      	adds	r7, #152	@ 0x98
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_CAN_Init+0x60>)
 80016ee:	4a17      	ldr	r2, [pc, #92]	@ (800174c <MX_CAN_Init+0x64>)
 80016f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <MX_CAN_Init+0x60>)
 80016f4:	2210      	movs	r2, #16
 80016f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_CAN_Init+0x60>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <MX_CAN_Init+0x60>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001704:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <MX_CAN_Init+0x60>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <MX_CAN_Init+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <MX_CAN_Init+0x60>)
 8001712:	2200      	movs	r2, #0
 8001714:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <MX_CAN_Init+0x60>)
 8001718:	2200      	movs	r2, #0
 800171a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <MX_CAN_Init+0x60>)
 800171e:	2200      	movs	r2, #0
 8001720:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_CAN_Init+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <MX_CAN_Init+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_CAN_Init+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <MX_CAN_Init+0x60>)
 8001736:	f000 fb95 	bl	8001e64 <HAL_CAN_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001740:	f000 f920 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000c4 	.word	0x200000c4
 800174c:	40006400 	.word	0x40006400

08001750 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <MX_SPI2_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_SPI2_Init+0x74>)
 800175c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001760:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <MX_SPI2_Init+0x74>)
 800176a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800176e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_SPI2_Init+0x74>)
 800177e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001782:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001786:	2230      	movs	r2, #48	@ 0x30
 8001788:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_SPI2_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_SPI2_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_SPI2_Init+0x74>)
 800179e:	2207      	movs	r2, #7
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <MX_SPI2_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_SPI2_Init+0x74>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_SPI2_Init+0x74>)
 80017b0:	f002 fb88 	bl	8003ec4 <HAL_SPI_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 f8e3 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000ec 	.word	0x200000ec
 80017c8:	40003800 	.word	0x40003800

080017cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017d2:	4a15      	ldr	r2, [pc, #84]	@ (8001828 <MX_USART1_UART_Init+0x5c>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 80017f8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <MX_USART1_UART_Init+0x58>)
 8001812:	f003 fa8d 	bl	8004d30 <HAL_UART_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800181c:	f000 f8b2 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000150 	.word	0x20000150
 8001828:	40013800 	.word	0x40013800

0800182c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001830:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001832:	4a15      	ldr	r2, [pc, #84]	@ (8001888 <MX_USART2_UART_Init+0x5c>)
 8001834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800183c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_USART2_UART_Init+0x58>)
 8001870:	f003 fa5e 	bl	8004d30 <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800187a:	f000 f883 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001d8 	.word	0x200001d8
 8001888:	40004400 	.word	0x40004400

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b35      	ldr	r3, [pc, #212]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a34      	ldr	r2, [pc, #208]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4a2e      	ldr	r2, [pc, #184]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c4:	6153      	str	r3, [r2, #20]
 80018c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <MX_GPIO_Init+0xec>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2120      	movs	r1, #32
 8001906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190a:	f000 fe17 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	481a      	ldr	r0, [pc, #104]	@ (800197c <MX_GPIO_Init+0xf0>)
 8001914:	f000 fe12 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4814      	ldr	r0, [pc, #80]	@ (8001980 <MX_GPIO_Init+0xf4>)
 8001930:	f000 fc7a 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 8001934:	2320      	movs	r3, #32
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194e:	f000 fc6b 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001952:	2302      	movs	r3, #2
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_GPIO_Init+0xf0>)
 800196a:	f000 fc5d 	bl	8002228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <Error_Handler+0x8>

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_MspInit+0x44>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_MspInit+0x44>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_MspInit+0x44>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_MspInit+0x44>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_MspInit+0x44>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_MspInit+0x44>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019c6:	2007      	movs	r0, #7
 80019c8:	f000 fbfa 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <HAL_CAN_MspInit+0x7c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d128      	bne.n	8001a4c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <HAL_CAN_MspInit+0x80>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <HAL_CAN_MspInit+0x80>)
 8001a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <HAL_CAN_MspInit+0x80>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_CAN_MspInit+0x80>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <HAL_CAN_MspInit+0x80>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_CAN_MspInit+0x80>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001a3c:	2309      	movs	r3, #9
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <HAL_CAN_MspInit+0x84>)
 8001a48:	f000 fbee 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3728      	adds	r7, #40	@ 0x28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40006400 	.word	0x40006400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400

08001a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_SPI_MspInit+0x7c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d128      	bne.n	8001ad4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a16      	ldr	r2, [pc, #88]	@ (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ab2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_SPI_MspInit+0x84>)
 8001ad0:	f000 fbaa 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	@ 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40003800 	.word	0x40003800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <HAL_UART_MspInit+0x114>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d146      	bne.n	8001b98 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b34      	ldr	r3, [pc, #208]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4a30      	ldr	r2, [pc, #192]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	6153      	str	r3, [r2, #20]
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b52:	2330      	movs	r3, #48	@ 0x30
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b62:	2307      	movs	r3, #7
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4825      	ldr	r0, [pc, #148]	@ (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b6e:	f000 fb5b 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b84:	2307      	movs	r3, #7
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b92:	f000 fb49 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b96:	e02d      	b.n	8001bf4 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <HAL_UART_MspInit+0x120>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d128      	bne.n	8001bf4 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a16      	ldr	r2, [pc, #88]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	6153      	str	r3, [r2, #20]
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_UART_MspInit+0x118>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be2:	2307      	movs	r3, #7
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf0:	f000 fb1a 	bl	8002228 <HAL_GPIO_Init>
}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	@ 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48000800 	.word	0x48000800
 8001c08:	40004400 	.word	0x40004400

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <NMI_Handler+0x4>

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <MemManage_Handler+0x4>

08001c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c62:	f000 f8bb 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c9c:	f007 f912 	bl	8008ec4 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20010000 	.word	0x20010000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	200003a8 	.word	0x200003a8
 8001cd4:	20000538 	.word	0x20000538

08001cd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d00:	f7ff ffea 	bl	8001cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	@ (8001d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <LoopForever+0xe>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d48 <LoopForever+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f007 f8d1 	bl	8008ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2e:	f7fe fe95 	bl	8000a5c <main>

08001d32 <LoopForever>:

LoopForever:
    b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001d40:	08009c38 	.word	0x08009c38
  ldr r2, =_sbss
 8001d44:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001d48:	20000538 	.word	0x20000538

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x28>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x28>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 fa2d 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fe10 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fa37 	bl	800220e <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 fa0d 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000034 	.word	0x20000034
 8001dd4:	2000003c 	.word	0x2000003c
 8001dd8:	20000038 	.word	0x20000038

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000003c 	.word	0x2000003c
 8001e00:	200003ac 	.word	0x200003ac

08001e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	200003ac 	.word	0x200003ac

08001e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000003c 	.word	0x2000003c

08001e64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0ed      	b.n	8002052 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fda8 	bl	80019d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e98:	f7ff ffb4 	bl	8001e04 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e9e:	e012      	b.n	8001ec6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea0:	f7ff ffb0 	bl	8001e04 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d90b      	bls.n	8001ec6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0c5      	b.n	8002052 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0e5      	beq.n	8001ea0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0202 	bic.w	r2, r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee4:	f7ff ff8e 	bl	8001e04 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eea:	e012      	b.n	8001f12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eec:	f7ff ff8a 	bl	8001e04 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b0a      	cmp	r3, #10
 8001ef8:	d90b      	bls.n	8001f12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e09f      	b.n	8002052 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e5      	bne.n	8001eec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7e1b      	ldrb	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e5b      	ldrb	r3, [r3, #25]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7e9b      	ldrb	r3, [r3, #26]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0220 	bic.w	r2, r2, #32
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7edb      	ldrb	r3, [r3, #27]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0210 	bic.w	r2, r2, #16
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	e007      	b.n	8001fc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0210 	orr.w	r2, r2, #16
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7f1b      	ldrb	r3, [r3, #28]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0208 	orr.w	r2, r2, #8
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e007      	b.n	8001ff2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7f5b      	ldrb	r3, [r3, #29]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0204 	orr.w	r2, r2, #4
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e007      	b.n	800201c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	ea42 0103 	orr.w	r1, r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	@ (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	@ (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff47 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff5c 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffb0 	bl	800217c <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e160      	b.n	80024fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8152 	beq.w	80024f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d005      	beq.n	8002268 <HAL_GPIO_Init+0x40>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d130      	bne.n	80022ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229e:	2201      	movs	r2, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 0201 	and.w	r2, r3, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d017      	beq.n	8002306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d123      	bne.n	800235a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	6939      	ldr	r1, [r7, #16]
 8002356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80ac 	beq.w	80024f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239c:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <HAL_GPIO_Init+0x2f0>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002518 <HAL_GPIO_Init+0x2f0>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002518 <HAL_GPIO_Init+0x2f0>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b4:	4a59      	ldr	r2, [pc, #356]	@ (800251c <HAL_GPIO_Init+0x2f4>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023de:	d025      	beq.n	800242c <HAL_GPIO_Init+0x204>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002520 <HAL_GPIO_Init+0x2f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01f      	beq.n	8002428 <HAL_GPIO_Init+0x200>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002524 <HAL_GPIO_Init+0x2fc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d019      	beq.n	8002424 <HAL_GPIO_Init+0x1fc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002528 <HAL_GPIO_Init+0x300>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_GPIO_Init+0x1f8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4c      	ldr	r2, [pc, #304]	@ (800252c <HAL_GPIO_Init+0x304>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00d      	beq.n	800241c <HAL_GPIO_Init+0x1f4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4b      	ldr	r2, [pc, #300]	@ (8002530 <HAL_GPIO_Init+0x308>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x1f0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4a      	ldr	r2, [pc, #296]	@ (8002534 <HAL_GPIO_Init+0x30c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_GPIO_Init+0x1ec>
 8002410:	2306      	movs	r3, #6
 8002412:	e00c      	b.n	800242e <HAL_GPIO_Init+0x206>
 8002414:	2307      	movs	r3, #7
 8002416:	e00a      	b.n	800242e <HAL_GPIO_Init+0x206>
 8002418:	2305      	movs	r3, #5
 800241a:	e008      	b.n	800242e <HAL_GPIO_Init+0x206>
 800241c:	2304      	movs	r3, #4
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x206>
 8002420:	2303      	movs	r3, #3
 8002422:	e004      	b.n	800242e <HAL_GPIO_Init+0x206>
 8002424:	2302      	movs	r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x206>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_GPIO_Init+0x206>
 800242c:	2300      	movs	r3, #0
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4093      	lsls	r3, r2
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800243e:	4937      	ldr	r1, [pc, #220]	@ (800251c <HAL_GPIO_Init+0x2f4>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244c:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <HAL_GPIO_Init+0x310>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002470:	4a31      	ldr	r2, [pc, #196]	@ (8002538 <HAL_GPIO_Init+0x310>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <HAL_GPIO_Init+0x310>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800249a:	4a27      	ldr	r2, [pc, #156]	@ (8002538 <HAL_GPIO_Init+0x310>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a0:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_GPIO_Init+0x310>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002538 <HAL_GPIO_Init+0x310>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <HAL_GPIO_Init+0x310>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <HAL_GPIO_Init+0x310>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f ae97 	bne.w	8002238 <HAL_GPIO_Init+0x10>
  }
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40021000 	.word	0x40021000
 800251c:	40010000 	.word	0x40010000
 8002520:	48000400 	.word	0x48000400
 8002524:	48000800 	.word	0x48000800
 8002528:	48000c00 	.word	0x48000c00
 800252c:	48001000 	.word	0x48001000
 8002530:	48001400 	.word	0x48001400
 8002534:	48001800 	.word	0x48001800
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002558:	e002      	b.n	8002560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43d9      	mvns	r1, r3
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	400b      	ands	r3, r1
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f001 b83a 	b.w	800363a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 816f 	beq.w	80028ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025dc:	4bb5      	ldr	r3, [pc, #724]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00c      	beq.n	8002602 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e8:	4bb2      	ldr	r3, [pc, #712]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d15c      	bne.n	80026ae <HAL_RCC_OscConfig+0x10e>
 80025f4:	4baf      	ldr	r3, [pc, #700]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d155      	bne.n	80026ae <HAL_RCC_OscConfig+0x10e>
 8002602:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002606:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002616:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_RCC_OscConfig+0x94>
 800262e:	4ba1      	ldr	r3, [pc, #644]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e015      	b.n	8002660 <HAL_RCC_OscConfig+0xc0>
 8002634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002638:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002650:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800265c:	4b95      	ldr	r3, [pc, #596]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002664:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002668:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800266c:	fa92 f2a2 	rbit	r2, r2
 8002670:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002674:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f042 0220 	orr.w	r2, r2, #32
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f002 021f 	and.w	r2, r2, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8111 	beq.w	80028b8 <HAL_RCC_OscConfig+0x318>
 8002696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8108 	bne.w	80028b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f000 bfc6 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x12e>
 80026c0:	4b7c      	ldr	r3, [pc, #496]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a7b      	ldr	r2, [pc, #492]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e036      	b.n	800273c <HAL_RCC_OscConfig+0x19c>
 80026ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x158>
 80026de:	4b75      	ldr	r3, [pc, #468]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a74      	ldr	r2, [pc, #464]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b72      	ldr	r3, [pc, #456]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a71      	ldr	r2, [pc, #452]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e021      	b.n	800273c <HAL_RCC_OscConfig+0x19c>
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x184>
 800270a:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b67      	ldr	r3, [pc, #412]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a66      	ldr	r2, [pc, #408]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x19c>
 8002724:	4b63      	ldr	r3, [pc, #396]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a62      	ldr	r2, [pc, #392]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b60      	ldr	r3, [pc, #384]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5f      	ldr	r2, [pc, #380]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002740:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d059      	beq.n	8002800 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fb5a 	bl	8001e04 <HAL_GetTick>
 8002750:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002756:	f7ff fb55 	bl	8001e04 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d902      	bls.n	800276c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	f000 bf67 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
 800276c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002770:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002780:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0x1fe>
 8002798:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x22a>
 800279e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80027b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027c6:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027ce:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80027d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80027de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f042 0220 	orr.w	r2, r2, #32
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f002 021f 	and.w	r2, r2, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ab      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b6>
 80027fe:	e05c      	b.n	80028ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fb00 	bl	8001e04 <HAL_GetTick>
 8002804:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280a:	f7ff fafb 	bl	8001e04 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d902      	bls.n	8002820 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	f000 bf0d 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002834:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d102      	bne.n	8002852 <HAL_RCC_OscConfig+0x2b2>
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x2de>
 8002852:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002856:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002866:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800286a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800286e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800287a:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <HAL_RCC_OscConfig+0x314>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002882:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002886:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002892:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ab      	bne.n	800280a <HAL_RCC_OscConfig+0x26a>
 80028b2:	e002      	b.n	80028ba <HAL_RCC_OscConfig+0x31a>
 80028b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 817f 	beq.w	8002bce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028dc:	4ba4      	ldr	r3, [pc, #656]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d173      	bne.n	80029d0 <HAL_RCC_OscConfig+0x430>
 80028e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f4:	d16c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x430>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002908:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_RCC_OscConfig+0x386>
 8002920:	4b93      	ldr	r3, [pc, #588]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e013      	b.n	800294e <HAL_RCC_OscConfig+0x3ae>
 8002926:	2302      	movs	r3, #2
 8002928:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800293e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800294a:	4b89      	ldr	r3, [pc, #548]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	2202      	movs	r2, #2
 8002950:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002954:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002958:	fa92 f2a2 	rbit	r2, r2
 800295c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002960:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f002 021f 	and.w	r2, r2, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCC_OscConfig+0x3f6>
 8002980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002984:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d002      	beq.n	8002996 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f000 be52 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b76      	ldr	r3, [pc, #472]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	21f8      	movs	r1, #248	@ 0xf8
 80029ac:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80029b4:	fa91 f1a1 	rbit	r1, r1
 80029b8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80029bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029c0:	fab1 f181 	clz	r1, r1
 80029c4:	b2c9      	uxtb	r1, r1
 80029c6:	408b      	lsls	r3, r1
 80029c8:	4969      	ldr	r1, [pc, #420]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e0fe      	b.n	8002bce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8088 	beq.w	8002af2 <HAL_RCC_OscConfig+0x552>
 80029e2:	2301      	movs	r3, #1
 80029e4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80029f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f9f9 	bl	8001e04 <HAL_GetTick>
 8002a12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a18:	f7ff f9f4 	bl	8001e04 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d902      	bls.n	8002a2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f000 be06 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002a40:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_OscConfig+0x4be>
 8002a58:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e013      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e6>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002a70:	2302      	movs	r3, #2
 8002a72:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a76:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a82:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	2202      	movs	r2, #2
 8002a88:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002a8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002a98:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a9c:	fab2 f282 	clz	r2, r2
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f002 021f 	and.w	r2, r2, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0af      	beq.n	8002a18 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	21f8      	movs	r1, #248	@ 0xf8
 8002ace:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002ad6:	fa91 f1a1 	rbit	r1, r1
 8002ada:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002ade:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ae2:	fab1 f181 	clz	r1, r1
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	408b      	lsls	r3, r1
 8002aea:	4921      	ldr	r1, [pc, #132]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e06d      	b.n	8002bce <HAL_RCC_OscConfig+0x62e>
 8002af2:	2301      	movs	r3, #1
 8002af4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002b04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7ff f971 	bl	8001e04 <HAL_GetTick>
 8002b22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7ff f96c 	bl	8001e04 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d902      	bls.n	8002b3e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f000 bd7e 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002b50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5d4>
 8002b68:	4b01      	ldr	r3, [pc, #4]	@ (8002b70 <HAL_RCC_OscConfig+0x5d0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	e016      	b.n	8002b9c <HAL_RCC_OscConfig+0x5fc>
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	2302      	movs	r3, #2
 8002b76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002b86:	2302      	movs	r3, #2
 8002b88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b98:	4bbf      	ldr	r3, [pc, #764]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002ba2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002ba6:	fa92 f2a2 	rbit	r2, r2
 8002baa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002bae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ac      	bne.n	8002b28 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8113 	beq.w	8002e0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d07c      	beq.n	8002cee <HAL_RCC_OscConfig+0x74e>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002c06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4ba2      	ldr	r3, [pc, #648]	@ (8002e9c <HAL_RCC_OscConfig+0x8fc>)
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f8f1 	bl	8001e04 <HAL_GetTick>
 8002c22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7ff f8ec 	bl	8001e04 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d902      	bls.n	8002c3e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f000 bcfe 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c5e:	2202      	movs	r2, #2
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002caa:	2102      	movs	r1, #2
 8002cac:	6019      	str	r1, [r3, #0]
 8002cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f1a3 	rbit	r1, r3
 8002cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cc4:	6019      	str	r1, [r3, #0]
  return result;
 8002cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d09d      	beq.n	8002c28 <HAL_RCC_OscConfig+0x688>
 8002cec:	e08d      	b.n	8002e0a <HAL_RCC_OscConfig+0x86a>
 8002cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d10:	601a      	str	r2, [r3, #0]
  return result;
 8002d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b5d      	ldr	r3, [pc, #372]	@ (8002e9c <HAL_RCC_OscConfig+0x8fc>)
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d30:	f7ff f868 	bl	8001e04 <HAL_GetTick>
 8002d34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7ff f863 	bl	8001e04 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	f000 bc75 	b.w	800363a <HAL_RCC_OscConfig+0x109a>
 8002d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d58:	2202      	movs	r2, #2
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	fa93 f2a3 	rbit	r2, r3
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002da0:	2202      	movs	r2, #2
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dc8:	2102      	movs	r1, #2
 8002dca:	6019      	str	r1, [r3, #0]
 8002dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f1a3 	rbit	r1, r3
 8002dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dde:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002de2:	6019      	str	r1, [r3, #0]
  return result;
 8002de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d197      	bne.n	8002d3a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 81a5 	beq.w	800316a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a18      	ldr	r2, [pc, #96]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]
 8002e3e:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <HAL_RCC_OscConfig+0x8f8>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <HAL_RCC_OscConfig+0x900>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <HAL_RCC_OscConfig+0x900>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea0 <HAL_RCC_OscConfig+0x900>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e78:	f7fe ffc4 	bl	8001e04 <HAL_GetTick>
 8002e7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	e010      	b.n	8002ea4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe ffbf 	bl	8001e04 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	@ 0x64
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e3d1      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	10908120 	.word	0x10908120
 8002ea0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	@ (80030dc <HAL_RCC_OscConfig+0xb3c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0e8      	beq.n	8002e82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x92e>
 8002ec0:	4b87      	ldr	r3, [pc, #540]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a86      	ldr	r2, [pc, #536]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e035      	b.n	8002f3a <HAL_RCC_OscConfig+0x99a>
 8002ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x958>
 8002ede:	4b80      	ldr	r3, [pc, #512]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a7f      	ldr	r2, [pc, #508]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b7d      	ldr	r3, [pc, #500]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a7c      	ldr	r2, [pc, #496]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	e020      	b.n	8002f3a <HAL_RCC_OscConfig+0x99a>
 8002ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x982>
 8002f08:	4b75      	ldr	r3, [pc, #468]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a74      	ldr	r2, [pc, #464]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	4b72      	ldr	r3, [pc, #456]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a71      	ldr	r2, [pc, #452]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e00b      	b.n	8002f3a <HAL_RCC_OscConfig+0x99a>
 8002f22:	4b6f      	ldr	r3, [pc, #444]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8081 	beq.w	800304e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fe ff5a 	bl	8001e04 <HAL_GetTick>
 8002f50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	e00b      	b.n	8002f6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe ff55 	bl	8001e04 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e365      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
 8002f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f72:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f76:	2202      	movs	r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fb4:	601a      	str	r2, [r3, #0]
  return result;
 8002fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d102      	bne.n	8002fda <HAL_RCC_OscConfig+0xa3a>
 8002fd4:	4b42      	ldr	r3, [pc, #264]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	e013      	b.n	8003002 <HAL_RCC_OscConfig+0xa62>
 8002fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fde:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	4b38      	ldr	r3, [pc, #224]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003006:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800300a:	2102      	movs	r1, #2
 800300c:	6011      	str	r1, [r2, #0]
 800300e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003012:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	fa92 f1a2 	rbit	r1, r2
 800301c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003020:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003024:	6011      	str	r1, [r2, #0]
  return result;
 8003026:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800302a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f002 021f 	and.w	r2, r2, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f202 	lsl.w	r2, r1, r2
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d084      	beq.n	8002f56 <HAL_RCC_OscConfig+0x9b6>
 800304c:	e083      	b.n	8003156 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fe fed9 	bl	8001e04 <HAL_GetTick>
 8003052:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe fed4 	bl	8001e04 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e2e4      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
 8003070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003074:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003078:	2202      	movs	r2, #2
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003080:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003098:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030b6:	601a      	str	r2, [r3, #0]
  return result;
 80030b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0xb44>
 80030d6:	4b02      	ldr	r3, [pc, #8]	@ (80030e0 <HAL_RCC_OscConfig+0xb40>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	e017      	b.n	800310c <HAL_RCC_OscConfig+0xb6c>
 80030dc:	40007000 	.word	0x40007000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030ec:	2202      	movs	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003102:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	4bb3      	ldr	r3, [pc, #716]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003110:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003114:	2102      	movs	r1, #2
 8003116:	6011      	str	r1, [r2, #0]
 8003118:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800311c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	fa92 f1a2 	rbit	r1, r2
 8003126:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800312a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800312e:	6011      	str	r1, [r2, #0]
  return result;
 8003130:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003134:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d180      	bne.n	8003058 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003156:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315e:	4b9e      	ldr	r3, [pc, #632]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4a9d      	ldr	r2, [pc, #628]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 8003164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003168:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800316e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 825e 	beq.w	8003638 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800317c:	4b96      	ldr	r3, [pc, #600]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b08      	cmp	r3, #8
 8003186:	f000 821f 	beq.w	80035c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b02      	cmp	r3, #2
 8003198:	f040 8170 	bne.w	800347c <HAL_RCC_OscConfig+0xedc>
 800319c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fa93 f2a3 	rbit	r2, r3
 80031b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031c0:	601a      	str	r2, [r3, #0]
  return result;
 80031c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031ca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	461a      	mov	r2, r3
 80031de:	2300      	movs	r3, #0
 80031e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fe0f 	bl	8001e04 <HAL_GetTick>
 80031e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ea:	e009      	b.n	8003200 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fe0a 	bl	8001e04 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e21c      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
 8003200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003204:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003212:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003220:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003224:	601a      	str	r2, [r3, #0]
  return result;
 8003226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800322e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_RCC_OscConfig+0xcaa>
 8003244:	4b64      	ldr	r3, [pc, #400]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	e027      	b.n	800329a <HAL_RCC_OscConfig+0xcfa>
 800324a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800324e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003252:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f2a3 	rbit	r2, r3
 8003266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800326a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003274:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003278:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003282:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003290:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4b50      	ldr	r3, [pc, #320]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800329e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032a6:	6011      	str	r1, [r2, #0]
 80032a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	fa92 f1a2 	rbit	r1, r2
 80032b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ba:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80032be:	6011      	str	r1, [r2, #0]
  return result;
 80032c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032c4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 021f 	and.w	r2, r2, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d182      	bne.n	80031ec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e6:	4b3c      	ldr	r3, [pc, #240]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	4937      	ldr	r1, [pc, #220]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003300:	4b35      	ldr	r3, [pc, #212]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a19      	ldr	r1, [r3, #32]
 8003314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003318:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	430b      	orrs	r3, r1
 8003322:	492d      	ldr	r1, [pc, #180]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
 8003328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	fa93 f2a3 	rbit	r2, r3
 8003344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003348:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800334c:	601a      	str	r2, [r3, #0]
  return result;
 800334e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003352:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003356:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003362:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	461a      	mov	r2, r3
 800336a:	2301      	movs	r3, #1
 800336c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe fd49 	bl	8001e04 <HAL_GetTick>
 8003372:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003376:	e009      	b.n	800338c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe fd44 	bl	8001e04 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e156      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
 800338c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003390:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003394:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033b0:	601a      	str	r2, [r3, #0]
  return result;
 80033b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0xe3c>
 80033d0:	4b01      	ldr	r3, [pc, #4]	@ (80033d8 <HAL_RCC_OscConfig+0xe38>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e02a      	b.n	800342c <HAL_RCC_OscConfig+0xe8c>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003406:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800340a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003414:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	fa93 f2a3 	rbit	r2, r3
 800341e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003422:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	4b86      	ldr	r3, [pc, #536]	@ (8003644 <HAL_RCC_OscConfig+0x10a4>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003430:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003434:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003438:	6011      	str	r1, [r2, #0]
 800343a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800343e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	fa92 f1a2 	rbit	r1, r2
 8003448:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800344c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003450:	6011      	str	r1, [r2, #0]
  return result;
 8003452:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003456:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	fab2 f282 	clz	r2, r2
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f002 021f 	and.w	r2, r2, #31
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	f43f af7f 	beq.w	8003378 <HAL_RCC_OscConfig+0xdd8>
 800347a:	e0dd      	b.n	8003638 <HAL_RCC_OscConfig+0x1098>
 800347c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003480:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003484:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034a0:	601a      	str	r2, [r3, #0]
  return result;
 80034a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	461a      	mov	r2, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fc9f 	bl	8001e04 <HAL_GetTick>
 80034c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ca:	e009      	b.n	80034e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fc9a 	bl	8001e04 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0ac      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
 80034e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003500:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003504:	601a      	str	r2, [r3, #0]
  return result;
 8003506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800350e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_RCC_OscConfig+0xf8a>
 8003524:	4b47      	ldr	r3, [pc, #284]	@ (8003644 <HAL_RCC_OscConfig+0x10a4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	e027      	b.n	800357a <HAL_RCC_OscConfig+0xfda>
 800352a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003532:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003554:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003558:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003562:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003570:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	4b33      	ldr	r3, [pc, #204]	@ (8003644 <HAL_RCC_OscConfig+0x10a4>)
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800357e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003582:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003586:	6011      	str	r1, [r2, #0]
 8003588:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800358c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	fa92 f1a2 	rbit	r1, r2
 8003596:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800359a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800359e:	6011      	str	r1, [r2, #0]
  return result;
 80035a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035a4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	fab2 f282 	clz	r2, r2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f042 0220 	orr.w	r2, r2, #32
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f002 021f 	and.w	r2, r2, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f202 	lsl.w	r2, r1, r2
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d182      	bne.n	80034cc <HAL_RCC_OscConfig+0xf2c>
 80035c6:	e037      	b.n	8003638 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e02e      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <HAL_RCC_OscConfig+0x10a4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035e4:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <HAL_RCC_OscConfig+0x10a4>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035f0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80035f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	429a      	cmp	r2, r3
 8003602:	d117      	bne.n	8003634 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003604:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003608:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800360c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003610:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003618:	429a      	cmp	r2, r3
 800361a:	d10b      	bne.n	8003634 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800361c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003628:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b09e      	sub	sp, #120	@ 0x78
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e162      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b90      	ldr	r3, [pc, #576]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d910      	bls.n	8003690 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b8d      	ldr	r3, [pc, #564]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 0207 	bic.w	r2, r3, #7
 8003676:	498b      	ldr	r1, [pc, #556]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b89      	ldr	r3, [pc, #548]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e14a      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b82      	ldr	r3, [pc, #520]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	497f      	ldr	r1, [pc, #508]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80dc 	beq.w	8003874 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d13c      	bne.n	800373e <HAL_RCC_ClockConfig+0xf6>
 80036c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d102      	bne.n	80036ee <HAL_RCC_ClockConfig+0xa6>
 80036e8:	4b6f      	ldr	r3, [pc, #444]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	e00f      	b.n	800370e <HAL_RCC_ClockConfig+0xc6>
 80036ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80036fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003700:	663b      	str	r3, [r7, #96]	@ 0x60
 8003702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800370a:	4b67      	ldr	r3, [pc, #412]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003712:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003716:	fa92 f2a2 	rbit	r2, r2
 800371a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800371c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d17b      	bne.n	8003832 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0f3      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d13c      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x178>
 8003746:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800374a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_RCC_ClockConfig+0x128>
 800376a:	4b4f      	ldr	r3, [pc, #316]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	e00f      	b.n	8003790 <HAL_RCC_ClockConfig+0x148>
 8003770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003774:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	647b      	str	r3, [r7, #68]	@ 0x44
 800377e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003782:	643b      	str	r3, [r7, #64]	@ 0x40
 8003784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800378c:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003794:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003796:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003798:	fa92 f2a2 	rbit	r2, r2
 800379c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800379e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a0:	fab2 f282 	clz	r2, r2
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	f042 0220 	orr.w	r2, r2, #32
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f002 021f 	and.w	r2, r2, #31
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f202 	lsl.w	r2, r1, r2
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d13a      	bne.n	8003832 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b2      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
 80037c0:	2302      	movs	r3, #2
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x1a0>
 80037e2:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e00d      	b.n	8003804 <HAL_RCC_ClockConfig+0x1bc>
 80037e8:	2302      	movs	r3, #2
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f4:	2302      	movs	r3, #2
 80037f6:	623b      	str	r3, [r7, #32]
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	4b29      	ldr	r3, [pc, #164]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	2202      	movs	r2, #2
 8003806:	61ba      	str	r2, [r7, #24]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	fa92 f2a2 	rbit	r2, r2
 800380e:	617a      	str	r2, [r7, #20]
  return result;
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f002 021f 	and.w	r2, r2, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e079      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b1d      	ldr	r3, [pc, #116]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	491a      	ldr	r1, [pc, #104]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003844:	f7fe fade 	bl	8001e04 <HAL_GetTick>
 8003848:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fe fada 	bl	8001e04 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e061      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d214      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4906      	ldr	r1, [pc, #24]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <HAL_RCC_ClockConfig+0x25c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e040      	b.n	8003926 <HAL_RCC_ClockConfig+0x2de>
 80038a4:	40022000 	.word	0x40022000
 80038a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCC_ClockConfig+0x2e8>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	491a      	ldr	r1, [pc, #104]	@ (8003930 <HAL_RCC_ClockConfig+0x2e8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d6:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <HAL_RCC_ClockConfig+0x2e8>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4912      	ldr	r1, [pc, #72]	@ (8003930 <HAL_RCC_ClockConfig+0x2e8>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038ea:	f000 f829 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038ee:	4601      	mov	r1, r0
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_RCC_ClockConfig+0x2e8>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038f8:	22f0      	movs	r2, #240	@ 0xf0
 80038fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	fa92 f2a2 	rbit	r2, r2
 8003902:	60fa      	str	r2, [r7, #12]
  return result;
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	40d3      	lsrs	r3, r2
 800390e:	4a09      	ldr	r2, [pc, #36]	@ (8003934 <HAL_RCC_ClockConfig+0x2ec>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	fa21 f303 	lsr.w	r3, r1, r3
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <HAL_RCC_ClockConfig+0x2f0>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <HAL_RCC_ClockConfig+0x2f4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fa2c 	bl	8001d7c <HAL_InitTick>
  
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3778      	adds	r7, #120	@ 0x78
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	08009b3c 	.word	0x08009b3c
 8003938:	20000034 	.word	0x20000034
 800393c:	20000038 	.word	0x20000038

08003940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800395a:	4b1f      	ldr	r3, [pc, #124]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x98>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b04      	cmp	r3, #4
 8003968:	d002      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x30>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x36>
 800396e:	e029      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003970:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003972:	613b      	str	r3, [r7, #16]
      break;
 8003974:	e029      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	0c9b      	lsrs	r3, r3, #18
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	4a18      	ldr	r2, [pc, #96]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003984:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	4a15      	ldr	r2, [pc, #84]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800399c:	4a0f      	ldr	r2, [pc, #60]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x9c>)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	e007      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039ae:	4a0b      	ldr	r2, [pc, #44]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x9c>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	613b      	str	r3, [r7, #16]
      break;
 80039c2:	e002      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c6:	613b      	str	r3, [r7, #16]
      break;
 80039c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ca:	693b      	ldr	r3, [r7, #16]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40021000 	.word	0x40021000
 80039dc:	007a1200 	.word	0x007a1200
 80039e0:	08009b54 	.word	0x08009b54
 80039e4:	08009b64 	.word	0x08009b64

080039e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000034 	.word	0x20000034

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a06:	f7ff ffef 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a14:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	fa92 f2a2 	rbit	r2, r2
 8003a20:	603a      	str	r2, [r7, #0]
  return result;
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	fab2 f282 	clz	r2, r2
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	40d3      	lsrs	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08009b4c 	.word	0x08009b4c

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a4a:	f7ff ffcd 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a4e:	4601      	mov	r1, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a58:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	fa92 f2a2 	rbit	r2, r2
 8003a64:	603a      	str	r2, [r7, #0]
  return result;
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	fab2 f282 	clz	r2, r2
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	40d3      	lsrs	r3, r2
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	08009b4c 	.word	0x08009b4c

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b092      	sub	sp, #72	@ 0x48
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80d4 	beq.w	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aac:	4b4e      	ldr	r3, [pc, #312]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a4a      	ldr	r2, [pc, #296]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
 8003ac4:	4b48      	ldr	r3, [pc, #288]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b45      	ldr	r3, [pc, #276]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b42      	ldr	r3, [pc, #264]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a41      	ldr	r2, [pc, #260]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe f989 	bl	8001e04 <HAL_GetTick>
 8003af2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe f985 	bl	8001e04 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	@ 0x64
 8003b02:	d901      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1d6      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b38      	ldr	r3, [pc, #224]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b14:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8084 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d07c      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b34:	4b2c      	ldr	r3, [pc, #176]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b26      	ldr	r3, [pc, #152]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2301      	movs	r3, #1
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b86:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d04b      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe f935 	bl	8001e04 <HAL_GetTick>
 8003b9a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fe f931 	bl	8001e04 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e180      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	61fb      	str	r3, [r7, #28]
  return result;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d108      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003be2:	4b01      	ldr	r3, [pc, #4]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	e00d      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	10908100 	.word	0x10908100
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	4b9a      	ldr	r3, [pc, #616]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	2202      	movs	r2, #2
 8003c06:	613a      	str	r2, [r7, #16]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	fa92 f2a2 	rbit	r2, r2
 8003c0e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	fab2 f282 	clz	r2, r2
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f002 021f 	and.w	r2, r2, #31
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f202 	lsl.w	r2, r1, r2
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0b7      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c2e:	4b8f      	ldr	r3, [pc, #572]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	498c      	ldr	r1, [pc, #560]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b88      	ldr	r3, [pc, #544]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a87      	ldr	r2, [pc, #540]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c60:	4b82      	ldr	r3, [pc, #520]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	f023 0203 	bic.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	497f      	ldr	r1, [pc, #508]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4978      	ldr	r1, [pc, #480]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c9c:	4b73      	ldr	r3, [pc, #460]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	4970      	ldr	r1, [pc, #448]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cba:	4b6c      	ldr	r3, [pc, #432]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	f023 0210 	bic.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4969      	ldr	r1, [pc, #420]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003cd8:	4b64      	ldr	r3, [pc, #400]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	4961      	ldr	r1, [pc, #388]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	f023 0220 	bic.w	r2, r3, #32
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	495a      	ldr	r1, [pc, #360]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d14:	4b55      	ldr	r3, [pc, #340]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	4952      	ldr	r1, [pc, #328]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d32:	4b4e      	ldr	r3, [pc, #312]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	494b      	ldr	r1, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d50:	4b46      	ldr	r3, [pc, #280]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4943      	ldr	r1, [pc, #268]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	493c      	ldr	r1, [pc, #240]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d8c:	4b37      	ldr	r3, [pc, #220]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	4934      	ldr	r1, [pc, #208]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003daa:	4b30      	ldr	r3, [pc, #192]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	492d      	ldr	r1, [pc, #180]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dc8:	4b28      	ldr	r3, [pc, #160]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd4:	4925      	ldr	r1, [pc, #148]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003de6:	4b21      	ldr	r3, [pc, #132]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	491e      	ldr	r1, [pc, #120]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e04:	4b19      	ldr	r3, [pc, #100]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e10:	4916      	ldr	r1, [pc, #88]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e22:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2e:	490f      	ldr	r1, [pc, #60]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e40:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	4907      	ldr	r1, [pc, #28]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e5e:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e72:	4913      	ldr	r1, [pc, #76]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e90:	490b      	ldr	r1, [pc, #44]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eae:	4904      	ldr	r1, [pc, #16]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3748      	adds	r7, #72	@ 0x48
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e09d      	b.n	8004012 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d108      	bne.n	8003ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee6:	d009      	beq.n	8003efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
 8003eee:	e005      	b.n	8003efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd fda2 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f3c:	d902      	bls.n	8003f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e002      	b.n	8003f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f52:	d007      	beq.n	8003f64 <HAL_SPI_Init+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	f003 0204 	and.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_SPI_Transmit+0x22>
 8004038:	2302      	movs	r3, #2
 800403a:	e15f      	b.n	80042fc <HAL_SPI_Transmit+0x2e2>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004044:	f7fd fede 	bl	8001e04 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800405e:	e148      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0x52>
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004070:	e13f      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2203      	movs	r2, #3
 8004076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040bc:	d10f      	bne.n	80040de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b40      	cmp	r3, #64	@ 0x40
 80040ea:	d007      	beq.n	80040fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004104:	d94f      	bls.n	80041a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Transmit+0xfa>
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d142      	bne.n	800419a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004138:	e02f      	b.n	800419a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d112      	bne.n	800416e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800416c:	e015      	b.n	800419a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416e:	f7fd fe49 	bl	8001e04 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d803      	bhi.n	8004186 <HAL_SPI_Transmit+0x16c>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x172>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004198:	e0ab      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ca      	bne.n	800413a <HAL_SPI_Transmit+0x120>
 80041a4:	e080      	b.n	80042a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Transmit+0x19a>
 80041ae:	8afb      	ldrh	r3, [r7, #22]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d174      	bne.n	800429e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d912      	bls.n	80041e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b02      	subs	r3, #2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041e2:	e05c      	b.n	800429e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800420a:	e048      	b.n	800429e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d12b      	bne.n	8004272 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d912      	bls.n	800424a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b02      	subs	r3, #2
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004248:	e029      	b.n	800429e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004270:	e015      	b.n	800429e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004272:	f7fd fdc7 	bl	8001e04 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d803      	bhi.n	800428a <HAL_SPI_Transmit+0x270>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d102      	bne.n	8004290 <HAL_SPI_Transmit+0x276>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800429c:	e029      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1b1      	bne.n	800420c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fcf9 	bl	8004ca4 <SPI_EndRxTxTransaction>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e003      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d002      	beq.n	800432a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004328:	e11a      	b.n	8004560 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004332:	d112      	bne.n	800435a <HAL_SPI_Receive+0x56>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10e      	bne.n	800435a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2204      	movs	r2, #4
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f90e 	bl	8004572 <HAL_SPI_TransmitReceive>
 8004356:	4603      	mov	r3, r0
 8004358:	e107      	b.n	800456a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_SPI_Receive+0x64>
 8004364:	2302      	movs	r3, #2
 8004366:	e100      	b.n	800456a <HAL_SPI_Receive+0x266>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004370:	f7fd fd48 	bl	8001e04 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Receive+0x7e>
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004386:	e0eb      	b.n	8004560 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2204      	movs	r2, #4
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043d2:	d908      	bls.n	80043e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	e007      	b.n	80043f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fe:	d10f      	bne.n	8004420 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800441e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442a:	2b40      	cmp	r3, #64	@ 0x40
 800442c:	d007      	beq.n	800443e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004446:	d86f      	bhi.n	8004528 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004448:	e034      	b.n	80044b4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d117      	bne.n	8004488 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f103 020c 	add.w	r2, r3, #12
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004486:	e015      	b.n	80044b4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004488:	f7fd fcbc 	bl	8001e04 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d803      	bhi.n	80044a0 <HAL_SPI_Receive+0x19c>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Receive+0x1a2>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80044b2:	e055      	b.n	8004560 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1c4      	bne.n	800444a <HAL_SPI_Receive+0x146>
 80044c0:	e038      	b.n	8004534 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d115      	bne.n	80044fc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	b292      	uxth	r2, r2
 80044dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	1c9a      	adds	r2, r3, #2
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044fa:	e015      	b.n	8004528 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fc:	f7fd fc82 	bl	8001e04 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d803      	bhi.n	8004514 <HAL_SPI_Receive+0x210>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d102      	bne.n	800451a <HAL_SPI_Receive+0x216>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004526:	e01b      	b.n	8004560 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1c6      	bne.n	80044c2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fb5b 	bl	8004bf4 <SPI_EndRxTransaction>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e003      	b.n	8004560 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08a      	sub	sp, #40	@ 0x28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004580:	2301      	movs	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x26>
 8004594:	2302      	movs	r3, #2
 8004596:	e20a      	b.n	80049ae <HAL_SPI_TransmitReceive+0x43c>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a0:	f7fd fc30 	bl	8001e04 <HAL_GetTick>
 80045a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045b4:	887b      	ldrh	r3, [r7, #2]
 80045b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d00e      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x6e>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c8:	d106      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x66>
 80045d2:	7efb      	ldrb	r3, [r7, #27]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d003      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80045de:	e1e0      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x80>
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80045f8:	e1d3      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b04      	cmp	r3, #4
 8004604:	d003      	beq.n	800460e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2205      	movs	r2, #5
 800460a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	887a      	ldrh	r2, [r7, #2]
 8004626:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	887a      	ldrh	r2, [r7, #2]
 8004634:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	887a      	ldrh	r2, [r7, #2]
 800463a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004650:	d802      	bhi.n	8004658 <HAL_SPI_TransmitReceive+0xe6>
 8004652:	8a3b      	ldrh	r3, [r7, #16]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d908      	bls.n	800466a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	e007      	b.n	800467a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d007      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046a0:	f240 8081 	bls.w	80047a6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x140>
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d16d      	bne.n	800478e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d6:	e05a      	b.n	800478e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d11b      	bne.n	800471e <HAL_SPI_TransmitReceive+0x1ac>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d016      	beq.n	800471e <HAL_SPI_TransmitReceive+0x1ac>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d113      	bne.n	800471e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11c      	bne.n	8004766 <HAL_SPI_TransmitReceive+0x1f4>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d016      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	b292      	uxth	r2, r2
 8004744:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004762:	2301      	movs	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004766:	f7fd fb4d 	bl	8001e04 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004772:	429a      	cmp	r2, r3
 8004774:	d80b      	bhi.n	800478e <HAL_SPI_TransmitReceive+0x21c>
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d007      	beq.n	800478e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800478c:	e109      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d19f      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x166>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d199      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x166>
 80047a4:	e0e3      	b.n	800496e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x244>
 80047ae:	8a7b      	ldrh	r3, [r7, #18]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	f040 80cf 	bne.w	8004954 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d912      	bls.n	80047e6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	881a      	ldrh	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b02      	subs	r3, #2
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047e4:	e0b6      	b.n	8004954 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480c:	e0a2      	b.n	8004954 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b02      	cmp	r3, #2
 800481a:	d134      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x314>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d02f      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x314>
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	2b01      	cmp	r3, #1
 800482a:	d12c      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d912      	bls.n	800485c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b02      	subs	r3, #2
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800485a:	e012      	b.n	8004882 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d148      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x3b4>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d042      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d923      	bls.n	80048f4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	b292      	uxth	r2, r2
 80048b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	1c9a      	adds	r2, r3, #2
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b02      	subs	r3, #2
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d81f      	bhi.n	8004922 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	e016      	b.n	8004922 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f103 020c 	add.w	r2, r3, #12
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004926:	f7fd fa6d 	bl	8001e04 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004932:	429a      	cmp	r2, r3
 8004934:	d803      	bhi.n	800493e <HAL_SPI_TransmitReceive+0x3cc>
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d102      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x3d2>
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	2b00      	cmp	r3, #0
 8004942:	d107      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004952:	e026      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	f47f af57 	bne.w	800480e <HAL_SPI_TransmitReceive+0x29c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f47f af50 	bne.w	800480e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f996 	bl	8004ca4 <SPI_EndRxTxTransaction>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004998:	e003      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80049aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	@ 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049c8:	f7fd fa1c 	bl	8001e04 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049d8:	f7fd fa14 	bl	8001e04 <HAL_GetTick>
 80049dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049de:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	015b      	lsls	r3, r3, #5
 80049e4:	0d1b      	lsrs	r3, r3, #20
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ee:	e054      	b.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d050      	beq.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049f8:	f7fd fa04 	bl	8001e04 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d902      	bls.n	8004a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d13d      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a26:	d111      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a30:	d004      	beq.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d107      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a54:	d10f      	bne.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e017      	b.n	8004aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d19b      	bne.n	80049f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000034 	.word	0x20000034

08004ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	@ 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ada:	f7fd f993 	bl	8001e04 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004aea:	f7fd f98b 	bl	8001e04 <HAL_GetTick>
 8004aee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004af8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00da      	lsls	r2, r3, #3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	0d1b      	lsrs	r3, r3, #20
 8004b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b10:	e060      	b.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b18:	d107      	bne.n	8004b2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d050      	beq.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b32:	f7fd f967 	bl	8001e04 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d902      	bls.n	8004b48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d13d      	bne.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b60:	d111      	bne.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6a:	d004      	beq.n	8004b76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b74:	d107      	bne.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b8e:	d10f      	bne.n	8004bb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e010      	b.n	8004be6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d196      	bne.n	8004b12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3728      	adds	r7, #40	@ 0x28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000034 	.word	0x20000034

08004bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c08:	d111      	bne.n	8004c2e <SPI_EndRxTransaction+0x3a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c12:	d004      	beq.n	8004c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1c:	d107      	bne.n	8004c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff febd 	bl	80049b8 <SPI_WaitFlagStateUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e023      	b.n	8004c9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c5c:	d11d      	bne.n	8004c9a <SPI_EndRxTransaction+0xa6>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c66:	d004      	beq.n	8004c72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c70:	d113      	bne.n	8004c9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7ff ff22 	bl	8004ac8 <SPI_WaitFifoStateUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8e:	f043 0220 	orr.w	r2, r3, #32
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e000      	b.n	8004c9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff ff03 	bl	8004ac8 <SPI_WaitFifoStateUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e027      	b.n	8004d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2180      	movs	r1, #128	@ 0x80
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff fe68 	bl	80049b8 <SPI_WaitFlagStateUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e014      	b.n	8004d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fedc 	bl	8004ac8 <SPI_WaitFifoStateUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e000      	b.n	8004d28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e040      	b.n	8004dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc fec8 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	@ 0x24
 8004d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa86 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8af 	bl	8004ee0 <UART_SetConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e01b      	b.n	8004dc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fb05 	bl	80053cc <UART_CheckIdleState>
 8004dc2:	4603      	mov	r3, r0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	@ 0x28
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d177      	bne.n	8004ed4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_UART_Transmit+0x24>
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e070      	b.n	8004ed6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2221      	movs	r2, #33	@ 0x21
 8004e00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e02:	f7fc ffff 	bl	8001e04 <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e20:	d108      	bne.n	8004e34 <HAL_UART_Transmit+0x68>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e003      	b.n	8004e3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e3c:	e02f      	b.n	8004e9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2180      	movs	r1, #128	@ 0x80
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fb67 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d004      	beq.n	8004e5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e03b      	b.n	8004ed6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	881a      	ldrh	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e70:	b292      	uxth	r2, r2
 8004e72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	3302      	adds	r3, #2
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e007      	b.n	8004e8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1c9      	bne.n	8004e3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2140      	movs	r1, #64	@ 0x40
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fb31 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e005      	b.n	8004ed6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b92      	ldr	r3, [pc, #584]	@ (8005154 <UART_SetConfig+0x274>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a80      	ldr	r2, [pc, #512]	@ (8005158 <UART_SetConfig+0x278>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d120      	bne.n	8004f9e <UART_SetConfig+0xbe>
 8004f5c:	4b7f      	ldr	r3, [pc, #508]	@ (800515c <UART_SetConfig+0x27c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d817      	bhi.n	8004f98 <UART_SetConfig+0xb8>
 8004f68:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0x90>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f93 	.word	0x08004f93
 8004f7c:	08004f87 	.word	0x08004f87
 8004f80:	2301      	movs	r3, #1
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e0b5      	b.n	80050f2 <UART_SetConfig+0x212>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e0b2      	b.n	80050f2 <UART_SetConfig+0x212>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e0af      	b.n	80050f2 <UART_SetConfig+0x212>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e0ac      	b.n	80050f2 <UART_SetConfig+0x212>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e0a9      	b.n	80050f2 <UART_SetConfig+0x212>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6f      	ldr	r2, [pc, #444]	@ (8005160 <UART_SetConfig+0x280>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d124      	bne.n	8004ff2 <UART_SetConfig+0x112>
 8004fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800515c <UART_SetConfig+0x27c>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fb4:	d011      	beq.n	8004fda <UART_SetConfig+0xfa>
 8004fb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0x10c>
 8004fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fc0:	d011      	beq.n	8004fe6 <UART_SetConfig+0x106>
 8004fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fc6:	d811      	bhi.n	8004fec <UART_SetConfig+0x10c>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0xf4>
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x100>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x10c>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e08b      	b.n	80050f2 <UART_SetConfig+0x212>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e088      	b.n	80050f2 <UART_SetConfig+0x212>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e085      	b.n	80050f2 <UART_SetConfig+0x212>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e082      	b.n	80050f2 <UART_SetConfig+0x212>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e07f      	b.n	80050f2 <UART_SetConfig+0x212>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8005164 <UART_SetConfig+0x284>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d124      	bne.n	8005046 <UART_SetConfig+0x166>
 8004ffc:	4b57      	ldr	r3, [pc, #348]	@ (800515c <UART_SetConfig+0x27c>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005000:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005004:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005008:	d011      	beq.n	800502e <UART_SetConfig+0x14e>
 800500a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800500e:	d817      	bhi.n	8005040 <UART_SetConfig+0x160>
 8005010:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005014:	d011      	beq.n	800503a <UART_SetConfig+0x15a>
 8005016:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800501a:	d811      	bhi.n	8005040 <UART_SetConfig+0x160>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <UART_SetConfig+0x148>
 8005020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005024:	d006      	beq.n	8005034 <UART_SetConfig+0x154>
 8005026:	e00b      	b.n	8005040 <UART_SetConfig+0x160>
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e061      	b.n	80050f2 <UART_SetConfig+0x212>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e05e      	b.n	80050f2 <UART_SetConfig+0x212>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e05b      	b.n	80050f2 <UART_SetConfig+0x212>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e058      	b.n	80050f2 <UART_SetConfig+0x212>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e055      	b.n	80050f2 <UART_SetConfig+0x212>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a47      	ldr	r2, [pc, #284]	@ (8005168 <UART_SetConfig+0x288>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d124      	bne.n	800509a <UART_SetConfig+0x1ba>
 8005050:	4b42      	ldr	r3, [pc, #264]	@ (800515c <UART_SetConfig+0x27c>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005058:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800505c:	d011      	beq.n	8005082 <UART_SetConfig+0x1a2>
 800505e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005062:	d817      	bhi.n	8005094 <UART_SetConfig+0x1b4>
 8005064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005068:	d011      	beq.n	800508e <UART_SetConfig+0x1ae>
 800506a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800506e:	d811      	bhi.n	8005094 <UART_SetConfig+0x1b4>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x19c>
 8005074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005078:	d006      	beq.n	8005088 <UART_SetConfig+0x1a8>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x1b4>
 800507c:	2300      	movs	r3, #0
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e037      	b.n	80050f2 <UART_SetConfig+0x212>
 8005082:	2302      	movs	r3, #2
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e034      	b.n	80050f2 <UART_SetConfig+0x212>
 8005088:	2304      	movs	r3, #4
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e031      	b.n	80050f2 <UART_SetConfig+0x212>
 800508e:	2308      	movs	r3, #8
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e02e      	b.n	80050f2 <UART_SetConfig+0x212>
 8005094:	2310      	movs	r3, #16
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e02b      	b.n	80050f2 <UART_SetConfig+0x212>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a33      	ldr	r2, [pc, #204]	@ (800516c <UART_SetConfig+0x28c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d124      	bne.n	80050ee <UART_SetConfig+0x20e>
 80050a4:	4b2d      	ldr	r3, [pc, #180]	@ (800515c <UART_SetConfig+0x27c>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80050ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050b0:	d011      	beq.n	80050d6 <UART_SetConfig+0x1f6>
 80050b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050b6:	d817      	bhi.n	80050e8 <UART_SetConfig+0x208>
 80050b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050bc:	d011      	beq.n	80050e2 <UART_SetConfig+0x202>
 80050be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050c2:	d811      	bhi.n	80050e8 <UART_SetConfig+0x208>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <UART_SetConfig+0x1f0>
 80050c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050cc:	d006      	beq.n	80050dc <UART_SetConfig+0x1fc>
 80050ce:	e00b      	b.n	80050e8 <UART_SetConfig+0x208>
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x212>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e00a      	b.n	80050f2 <UART_SetConfig+0x212>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e007      	b.n	80050f2 <UART_SetConfig+0x212>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e004      	b.n	80050f2 <UART_SetConfig+0x212>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e001      	b.n	80050f2 <UART_SetConfig+0x212>
 80050ee:	2310      	movs	r3, #16
 80050f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fa:	d16b      	bne.n	80051d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80050fc:	7ffb      	ldrb	r3, [r7, #31]
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d838      	bhi.n	8005174 <UART_SetConfig+0x294>
 8005102:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <UART_SetConfig+0x228>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	08005175 	.word	0x08005175
 8005118:	08005143 	.word	0x08005143
 800511c:	08005175 	.word	0x08005175
 8005120:	08005175 	.word	0x08005175
 8005124:	08005175 	.word	0x08005175
 8005128:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe fc68 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8005130:	61b8      	str	r0, [r7, #24]
        break;
 8005132:	e024      	b.n	800517e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7fe fc86 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8005138:	61b8      	str	r0, [r7, #24]
        break;
 800513a:	e020      	b.n	800517e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <UART_SetConfig+0x290>)
 800513e:	61bb      	str	r3, [r7, #24]
        break;
 8005140:	e01d      	b.n	800517e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7fe fbfd 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 8005146:	61b8      	str	r0, [r7, #24]
        break;
 8005148:	e019      	b.n	800517e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514e:	61bb      	str	r3, [r7, #24]
        break;
 8005150:	e015      	b.n	800517e <UART_SetConfig+0x29e>
 8005152:	bf00      	nop
 8005154:	efff69f3 	.word	0xefff69f3
 8005158:	40013800 	.word	0x40013800
 800515c:	40021000 	.word	0x40021000
 8005160:	40004400 	.word	0x40004400
 8005164:	40004800 	.word	0x40004800
 8005168:	40004c00 	.word	0x40004c00
 800516c:	40005000 	.word	0x40005000
 8005170:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	77bb      	strb	r3, [r7, #30]
        break;
 800517c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d073      	beq.n	800526c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	005a      	lsls	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b0f      	cmp	r3, #15
 800519e:	d916      	bls.n	80051ce <UART_SetConfig+0x2ee>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a6:	d212      	bcs.n	80051ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	b29a      	uxth	r2, r3
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	89fa      	ldrh	r2, [r7, #14]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e04e      	b.n	800526c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	77bb      	strb	r3, [r7, #30]
 80051d2:	e04b      	b.n	800526c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d4:	7ffb      	ldrb	r3, [r7, #31]
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d827      	bhi.n	800522a <UART_SetConfig+0x34a>
 80051da:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x300>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800522b 	.word	0x0800522b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fe fbfc 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e013      	b.n	8005234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe fc1a 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8005210:	61b8      	str	r0, [r7, #24]
        break;
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <UART_SetConfig+0x3a4>)
 8005216:	61bb      	str	r3, [r7, #24]
        break;
 8005218:	e00c      	b.n	8005234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe fb91 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 800521e:	61b8      	str	r0, [r7, #24]
        break;
 8005220:	e008      	b.n	8005234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005226:	61bb      	str	r3, [r7, #24]
        break;
 8005228:	e004      	b.n	8005234 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	77bb      	strb	r3, [r7, #30]
        break;
 8005232:	bf00      	nop
    }

    if (pclk != 0U)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085a      	lsrs	r2, r3, #1
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	441a      	add	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d909      	bls.n	8005268 <UART_SetConfig+0x388>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d205      	bcs.n	8005268 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e001      	b.n	800526c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005278:	7fbb      	ldrb	r3, [r7, #30]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	007a1200 	.word	0x007a1200

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b098      	sub	sp, #96	@ 0x60
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fc fd12 	bl	8001e04 <HAL_GetTick>
 80053e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d12e      	bne.n	800544e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f88c 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005428:	647b      	str	r3, [r7, #68]	@ 0x44
 800542a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800542e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e062      	b.n	8005514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b04      	cmp	r3, #4
 800545a:	d149      	bne.n	80054f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005464:	2200      	movs	r2, #0
 8005466:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f856 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d03c      	beq.n	80054f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	623b      	str	r3, [r7, #32]
   return(result);
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c8:	61fa      	str	r2, [r7, #28]
 80054ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	617b      	str	r3, [r7, #20]
   return(result);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e011      	b.n	8005514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3758      	adds	r7, #88	@ 0x58
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552c:	e04f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d04b      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fc fc65 	bl	8001e04 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <UART_WaitOnFlagUntilTimeout+0x30>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e04e      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d037      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b80      	cmp	r3, #128	@ 0x80
 8005562:	d034      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	d031      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b08      	cmp	r3, #8
 8005576:	d110      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2208      	movs	r2, #8
 800557e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f838 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2208      	movs	r2, #8
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e029      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a8:	d111      	bne.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f81e 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00f      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d0a0      	beq.n	800552e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b095      	sub	sp, #84	@ 0x54
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
 800561e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e5      	bne.n	8005630 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005668:	2b01      	cmp	r3, #1
 800566a:	d118      	bne.n	800569e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	60bb      	str	r3, [r7, #8]
   return(result);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0310 	bic.w	r3, r3, #16
 8005680:	647b      	str	r3, [r7, #68]	@ 0x44
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	613b      	str	r3, [r7, #16]
   return(result);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e6      	bne.n	800566c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056b2:	bf00      	nop
 80056b4:	3754      	adds	r7, #84	@ 0x54
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80056c4:	4904      	ldr	r1, [pc, #16]	@ (80056d8 <MX_FATFS_Init+0x18>)
 80056c6:	4805      	ldr	r0, [pc, #20]	@ (80056dc <MX_FATFS_Init+0x1c>)
 80056c8:	f003 fbac 	bl	8008e24 <FATFS_LinkDriver>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b03      	ldr	r3, [pc, #12]	@ (80056e0 <MX_FATFS_Init+0x20>)
 80056d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056d4:	bf00      	nop
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200003b4 	.word	0x200003b4
 80056dc:	20000040 	.word	0x20000040
 80056e0:	200003b0 	.word	0x200003b0

080056e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80056e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 f9d9 	bl	8005ab8 <USER_SPI_initialize>
 8005706:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 facf 	bl	8005cc0 <USER_SPI_status>
 8005722:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800573c:	7bf8      	ldrb	r0, [r7, #15]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	f000 fad2 	bl	8005cec <USER_SPI_read>
 8005748:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4603      	mov	r3, r0
 8005760:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005762:	7bf8      	ldrb	r0, [r7, #15]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	f000 fb25 	bl	8005db8 <USER_SPI_write>
 800576e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	603a      	str	r2, [r7, #0]
 8005782:	71fb      	strb	r3, [r7, #7]
 8005784:	460b      	mov	r3, r1
 8005786:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005788:	79b9      	ldrb	r1, [r7, #6]
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fb8e 	bl	8005eb0 <USER_SPI_ioctl>
 8005794:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80057a8:	f7fc fb2c 	bl	8001e04 <HAL_GetTick>
 80057ac:	4603      	mov	r3, r0
 80057ae:	4a04      	ldr	r2, [pc, #16]	@ (80057c0 <SPI_Timer_On+0x20>)
 80057b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80057b2:	4a04      	ldr	r2, [pc, #16]	@ (80057c4 <SPI_Timer_On+0x24>)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6013      	str	r3, [r2, #0]
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200003bc 	.word	0x200003bc
 80057c4:	200003c0 	.word	0x200003c0

080057c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80057cc:	f7fc fb1a 	bl	8001e04 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <SPI_Timer_Status+0x24>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <SPI_Timer_Status+0x28>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	bf34      	ite	cc
 80057e0:	2301      	movcc	r3, #1
 80057e2:	2300      	movcs	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200003bc 	.word	0x200003bc
 80057f0:	200003c0 	.word	0x200003c0

080057f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80057fe:	f107 020f 	add.w	r2, r7, #15
 8005802:	1df9      	adds	r1, r7, #7
 8005804:	2332      	movs	r3, #50	@ 0x32
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2301      	movs	r3, #1
 800580a:	4804      	ldr	r0, [pc, #16]	@ (800581c <xchg_spi+0x28>)
 800580c:	f7fe feb1 	bl	8004572 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	200000ec 	.word	0x200000ec

08005820 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e00a      	b.n	8005846 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	18d4      	adds	r4, r2, r3
 8005836:	20ff      	movs	r0, #255	@ 0xff
 8005838:	f7ff ffdc 	bl	80057f4 <xchg_spi>
 800583c:	4603      	mov	r3, r0
 800583e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d3f0      	bcc.n	8005830 <rcvr_spi_multi+0x10>
	}
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bd90      	pop	{r4, r7, pc}

08005858 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	b29a      	uxth	r2, r3
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4803      	ldr	r0, [pc, #12]	@ (800587c <xmit_spi_multi+0x24>)
 800586e:	f7fe fbd4 	bl	800401a <HAL_SPI_Transmit>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200000ec 	.word	0x200000ec

08005880 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005888:	f7fc fabc 	bl	8001e04 <HAL_GetTick>
 800588c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005892:	20ff      	movs	r0, #255	@ 0xff
 8005894:	f7ff ffae 	bl	80057f4 <xchg_spi>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2bff      	cmp	r3, #255	@ 0xff
 80058a0:	d007      	beq.n	80058b2 <wait_ready+0x32>
 80058a2:	f7fc faaf 	bl	8001e04 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d8ef      	bhi.n	8005892 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2bff      	cmp	r3, #255	@ 0xff
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80058cc:	2201      	movs	r2, #1
 80058ce:	2102      	movs	r1, #2
 80058d0:	4803      	ldr	r0, [pc, #12]	@ (80058e0 <despiselect+0x18>)
 80058d2:	f7fc fe33 	bl	800253c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80058d6:	20ff      	movs	r0, #255	@ 0xff
 80058d8:	f7ff ff8c 	bl	80057f4 <xchg_spi>

}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	48000400 	.word	0x48000400

080058e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80058e8:	2200      	movs	r2, #0
 80058ea:	2102      	movs	r1, #2
 80058ec:	4809      	ldr	r0, [pc, #36]	@ (8005914 <spiselect+0x30>)
 80058ee:	f7fc fe25 	bl	800253c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80058f2:	20ff      	movs	r0, #255	@ 0xff
 80058f4:	f7ff ff7e 	bl	80057f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80058f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80058fc:	f7ff ffc0 	bl	8005880 <wait_ready>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <spiselect+0x26>
 8005906:	2301      	movs	r3, #1
 8005908:	e002      	b.n	8005910 <spiselect+0x2c>

	despiselect();
 800590a:	f7ff ffdd 	bl	80058c8 <despiselect>
	return 0;	/* Timeout */
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	48000400 	.word	0x48000400

08005918 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005922:	20c8      	movs	r0, #200	@ 0xc8
 8005924:	f7ff ff3c 	bl	80057a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005928:	20ff      	movs	r0, #255	@ 0xff
 800592a:	f7ff ff63 	bl	80057f4 <xchg_spi>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2bff      	cmp	r3, #255	@ 0xff
 8005936:	d104      	bne.n	8005942 <rcvr_datablock+0x2a>
 8005938:	f7ff ff46 	bl	80057c8 <SPI_Timer_Status>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f2      	bne.n	8005928 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2bfe      	cmp	r3, #254	@ 0xfe
 8005946:	d001      	beq.n	800594c <rcvr_datablock+0x34>
 8005948:	2300      	movs	r3, #0
 800594a:	e00a      	b.n	8005962 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff ff66 	bl	8005820 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005954:	20ff      	movs	r0, #255	@ 0xff
 8005956:	f7ff ff4d 	bl	80057f4 <xchg_spi>
 800595a:	20ff      	movs	r0, #255	@ 0xff
 800595c:	f7ff ff4a 	bl	80057f4 <xchg_spi>

	return 1;						/* Function succeeded */
 8005960:	2301      	movs	r3, #1
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800597a:	f7ff ff81 	bl	8005880 <wait_ready>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <xmit_datablock+0x1e>
 8005984:	2300      	movs	r3, #0
 8005986:	e01e      	b.n	80059c6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff ff32 	bl	80057f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2bfd      	cmp	r3, #253	@ 0xfd
 8005994:	d016      	beq.n	80059c4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005996:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ff5c 	bl	8005858 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80059a0:	20ff      	movs	r0, #255	@ 0xff
 80059a2:	f7ff ff27 	bl	80057f4 <xchg_spi>
 80059a6:	20ff      	movs	r0, #255	@ 0xff
 80059a8:	f7ff ff24 	bl	80057f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80059ac:	20ff      	movs	r0, #255	@ 0xff
 80059ae:	f7ff ff21 	bl	80057f4 <xchg_spi>
 80059b2:	4603      	mov	r3, r0
 80059b4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d001      	beq.n	80059c4 <xmit_datablock+0x5a>
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <xmit_datablock+0x5c>
	}
	return 1;
 80059c4:	2301      	movs	r3, #1
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	6039      	str	r1, [r7, #0]
 80059d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	xchg_spi(0xFF);
 80059da:	20ff      	movs	r0, #255	@ 0xff
 80059dc:	f7ff ff0a 	bl	80057f4 <xchg_spi>
	xchg_spi(0xFF);
 80059e0:	20ff      	movs	r0, #255	@ 0xff
 80059e2:	f7ff ff07 	bl	80057f4 <xchg_spi>
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80059e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da0e      	bge.n	8005a0c <send_cmd+0x3e>
		cmd &= 0x7F;
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80059f6:	2100      	movs	r1, #0
 80059f8:	2037      	movs	r0, #55	@ 0x37
 80059fa:	f7ff ffe8 	bl	80059ce <send_cmd>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d901      	bls.n	8005a0c <send_cmd+0x3e>
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	e051      	b.n	8005ab0 <send_cmd+0xe2>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	d008      	beq.n	8005a24 <send_cmd+0x56>
		despiselect();
 8005a12:	f7ff ff59 	bl	80058c8 <despiselect>
		if (!spiselect()) return 0xFF;
 8005a16:	f7ff ff65 	bl	80058e4 <spiselect>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <send_cmd+0x56>
 8005a20:	23ff      	movs	r3, #255	@ 0xff
 8005a22:	e045      	b.n	8005ab0 <send_cmd+0xe2>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fee1 	bl	80057f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fedb 	bl	80057f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fed5 	bl	80057f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fecf 	bl	80057f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff feca 	bl	80057f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <send_cmd+0xa0>
 8005a6a:	2395      	movs	r3, #149	@ 0x95
 8005a6c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d101      	bne.n	8005a78 <send_cmd+0xaa>
 8005a74:	2387      	movs	r3, #135	@ 0x87
 8005a76:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff feba 	bl	80057f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d102      	bne.n	8005a8c <send_cmd+0xbe>
 8005a86:	20ff      	movs	r0, #255	@ 0xff
 8005a88:	f7ff feb4 	bl	80057f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005a8c:	230a      	movs	r3, #10
 8005a8e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005a90:	20ff      	movs	r0, #255	@ 0xff
 8005a92:	f7ff feaf 	bl	80057f4 <xchg_spi>
 8005a96:	4603      	mov	r3, r0
 8005a98:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005a9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da05      	bge.n	8005aae <send_cmd+0xe0>
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <send_cmd+0xc2>

	return res;							/* Return received response */
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4], init;

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <USER_SPI_initialize+0x14>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0ee      	b.n	8005caa <USER_SPI_initialize+0x1f2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005acc:	4b79      	ldr	r3, [pc, #484]	@ (8005cb4 <USER_SPI_initialize+0x1fc>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <USER_SPI_initialize+0x2a>
 8005ada:	4b76      	ldr	r3, [pc, #472]	@ (8005cb4 <USER_SPI_initialize+0x1fc>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	e0e3      	b.n	8005caa <USER_SPI_initialize+0x1f2>

	FCLK_SLOW();
 8005ae2:	4b75      	ldr	r3, [pc, #468]	@ (8005cb8 <USER_SPI_initialize+0x200>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005aec:	4b72      	ldr	r3, [pc, #456]	@ (8005cb8 <USER_SPI_initialize+0x200>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005af4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005af6:	230a      	movs	r3, #10
 8005af8:	75fb      	strb	r3, [r7, #23]
 8005afa:	e005      	b.n	8005b08 <USER_SPI_initialize+0x50>
 8005afc:	20ff      	movs	r0, #255	@ 0xff
 8005afe:	f7ff fe79 	bl	80057f4 <xchg_spi>
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	75fb      	strb	r3, [r7, #23]
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f6      	bne.n	8005afc <USER_SPI_initialize+0x44>

	ty = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	757b      	strb	r3, [r7, #21]
	int counter = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]
	init = send_cmd(CMD0, 0);
 8005b16:	2100      	movs	r1, #0
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7ff ff58 	bl	80059ce <send_cmd>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	753b      	strb	r3, [r7, #20]
	while(init!=1 && counter < 100)
 8005b22:	e008      	b.n	8005b36 <USER_SPI_initialize+0x7e>
	{
		counter++;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3301      	adds	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
		init = send_cmd(CMD0, 0);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f7ff ff4e 	bl	80059ce <send_cmd>
 8005b32:	4603      	mov	r3, r0
 8005b34:	753b      	strb	r3, [r7, #20]
	while(init!=1 && counter < 100)
 8005b36:	7d3b      	ldrb	r3, [r7, #20]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d002      	beq.n	8005b42 <USER_SPI_initialize+0x8a>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b63      	cmp	r3, #99	@ 0x63
 8005b40:	ddf0      	ble.n	8005b24 <USER_SPI_initialize+0x6c>
		//myprintf("(%i)\r\n", init);
	}
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005b42:	2100      	movs	r1, #0
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7ff ff42 	bl	80059ce <send_cmd>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f040 808b 	bne.w	8005c68 <USER_SPI_initialize+0x1b0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005b52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b56:	f7ff fe23 	bl	80057a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005b5a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005b5e:	2008      	movs	r0, #8
 8005b60:	f7ff ff35 	bl	80059ce <send_cmd>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d151      	bne.n	8005c0e <USER_SPI_initialize+0x156>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
 8005b6e:	e00d      	b.n	8005b8c <USER_SPI_initialize+0xd4>
 8005b70:	7dfc      	ldrb	r4, [r7, #23]
 8005b72:	20ff      	movs	r0, #255	@ 0xff
 8005b74:	f7ff fe3e 	bl	80057f4 <xchg_spi>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f104 0318 	add.w	r3, r4, #24
 8005b80:	443b      	add	r3, r7
 8005b82:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d9ee      	bls.n	8005b70 <USER_SPI_initialize+0xb8>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d167      	bne.n	8005c68 <USER_SPI_initialize+0x1b0>
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2baa      	cmp	r3, #170	@ 0xaa
 8005b9c:	d164      	bne.n	8005c68 <USER_SPI_initialize+0x1b0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005b9e:	bf00      	nop
 8005ba0:	f7ff fe12 	bl	80057c8 <SPI_Timer_Status>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <USER_SPI_initialize+0x102>
 8005baa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005bae:	20a9      	movs	r0, #169	@ 0xa9
 8005bb0:	f7ff ff0d 	bl	80059ce <send_cmd>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f2      	bne.n	8005ba0 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005bba:	f7ff fe05 	bl	80057c8 <SPI_Timer_Status>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d051      	beq.n	8005c68 <USER_SPI_initialize+0x1b0>
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	203a      	movs	r0, #58	@ 0x3a
 8005bc8:	f7ff ff01 	bl	80059ce <send_cmd>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d14a      	bne.n	8005c68 <USER_SPI_initialize+0x1b0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
 8005bd6:	e00d      	b.n	8005bf4 <USER_SPI_initialize+0x13c>
 8005bd8:	7dfc      	ldrb	r4, [r7, #23]
 8005bda:	20ff      	movs	r0, #255	@ 0xff
 8005bdc:	f7ff fe0a 	bl	80057f4 <xchg_spi>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	f104 0318 	add.w	r3, r4, #24
 8005be8:	443b      	add	r3, r7
 8005bea:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d9ee      	bls.n	8005bd8 <USER_SPI_initialize+0x120>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005bfa:	7b3b      	ldrb	r3, [r7, #12]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <USER_SPI_initialize+0x150>
 8005c04:	230c      	movs	r3, #12
 8005c06:	e000      	b.n	8005c0a <USER_SPI_initialize+0x152>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	757b      	strb	r3, [r7, #21]
 8005c0c:	e02c      	b.n	8005c68 <USER_SPI_initialize+0x1b0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005c0e:	2100      	movs	r1, #0
 8005c10:	20a9      	movs	r0, #169	@ 0xa9
 8005c12:	f7ff fedc 	bl	80059ce <send_cmd>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d804      	bhi.n	8005c26 <USER_SPI_initialize+0x16e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	757b      	strb	r3, [r7, #21]
 8005c20:	23a9      	movs	r3, #169	@ 0xa9
 8005c22:	75bb      	strb	r3, [r7, #22]
 8005c24:	e003      	b.n	8005c2e <USER_SPI_initialize+0x176>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005c26:	2301      	movs	r3, #1
 8005c28:	757b      	strb	r3, [r7, #21]
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75bb      	strb	r3, [r7, #22]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005c2e:	bf00      	nop
 8005c30:	f7ff fdca 	bl	80057c8 <SPI_Timer_Status>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <USER_SPI_initialize+0x192>
 8005c3a:	7dbb      	ldrb	r3, [r7, #22]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fec5 	bl	80059ce <send_cmd>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f2      	bne.n	8005c30 <USER_SPI_initialize+0x178>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005c4a:	f7ff fdbd 	bl	80057c8 <SPI_Timer_Status>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <USER_SPI_initialize+0x1ac>
 8005c54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c58:	2010      	movs	r0, #16
 8005c5a:	f7ff feb8 	bl	80059ce <send_cmd>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <USER_SPI_initialize+0x1b0>
				ty = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	757b      	strb	r3, [r7, #21]
		}
	}
	CardType = ty;	/* Card type */
 8005c68:	4a14      	ldr	r2, [pc, #80]	@ (8005cbc <USER_SPI_initialize+0x204>)
 8005c6a:	7d7b      	ldrb	r3, [r7, #21]
 8005c6c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005c6e:	f7ff fe2b 	bl	80058c8 <despiselect>

	if (ty) {			/* OK */
 8005c72:	7d7b      	ldrb	r3, [r7, #21]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <USER_SPI_initialize+0x1e6>
		FCLK_FAST();			/* Set fast clock */
 8005c78:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <USER_SPI_initialize+0x200>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <USER_SPI_initialize+0x200>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0210 	orr.w	r2, r2, #16
 8005c8a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005c8c:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <USER_SPI_initialize+0x1fc>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <USER_SPI_initialize+0x1fc>)
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e002      	b.n	8005ca4 <USER_SPI_initialize+0x1ec>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005c9e:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <USER_SPI_initialize+0x1fc>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005ca4:	4b03      	ldr	r3, [pc, #12]	@ (8005cb4 <USER_SPI_initialize+0x1fc>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd90      	pop	{r4, r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000054 	.word	0x20000054
 8005cb8:	200000ec 	.word	0x200000ec
 8005cbc:	200003b8 	.word	0x200003b8

08005cc0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <USER_SPI_status+0x14>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e002      	b.n	8005cda <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <USER_SPI_status+0x28>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	b2db      	uxtb	r3, r3
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000054 	.word	0x20000054

08005cec <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <USER_SPI_read+0x1c>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USER_SPI_read+0x20>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	e04d      	b.n	8005da8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005d0c:	4b28      	ldr	r3, [pc, #160]	@ (8005db0 <USER_SPI_read+0xc4>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <USER_SPI_read+0x32>
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e044      	b.n	8005da8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005d1e:	4b25      	ldr	r3, [pc, #148]	@ (8005db4 <USER_SPI_read+0xc8>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <USER_SPI_read+0x44>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	025b      	lsls	r3, r3, #9
 8005d2e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d111      	bne.n	8005d5a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	2011      	movs	r0, #17
 8005d3a:	f7ff fe48 	bl	80059ce <send_cmd>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d129      	bne.n	8005d98 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005d44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f7ff fde5 	bl	8005918 <rcvr_datablock>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d021      	beq.n	8005d98 <USER_SPI_read+0xac>
			count = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	e01e      	b.n	8005d98 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	2012      	movs	r0, #18
 8005d5e:	f7ff fe36 	bl	80059ce <send_cmd>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d117      	bne.n	8005d98 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f7ff fdd3 	bl	8005918 <rcvr_datablock>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <USER_SPI_read+0xa2>
				buff += 512;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005d7e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ed      	bne.n	8005d68 <USER_SPI_read+0x7c>
 8005d8c:	e000      	b.n	8005d90 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005d8e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005d90:	2100      	movs	r1, #0
 8005d92:	200c      	movs	r0, #12
 8005d94:	f7ff fe1b 	bl	80059ce <send_cmd>
		}
	}
	despiselect();
 8005d98:	f7ff fd96 	bl	80058c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000054 	.word	0x20000054
 8005db4:	200003b8 	.word	0x200003b8

08005db8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <USER_SPI_write+0x1c>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <USER_SPI_write+0x20>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	e063      	b.n	8005ea0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005dd8:	4b33      	ldr	r3, [pc, #204]	@ (8005ea8 <USER_SPI_write+0xf0>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <USER_SPI_write+0x32>
 8005de6:	2303      	movs	r3, #3
 8005de8:	e05a      	b.n	8005ea0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005dea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea8 <USER_SPI_write+0xf0>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <USER_SPI_write+0x44>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e051      	b.n	8005ea0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8005eac <USER_SPI_write+0xf4>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <USER_SPI_write+0x56>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	025b      	lsls	r3, r3, #9
 8005e0c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d110      	bne.n	8005e36 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	2018      	movs	r0, #24
 8005e18:	f7ff fdd9 	bl	80059ce <send_cmd>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d136      	bne.n	8005e90 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005e22:	21fe      	movs	r1, #254	@ 0xfe
 8005e24:	68b8      	ldr	r0, [r7, #8]
 8005e26:	f7ff fda0 	bl	800596a <xmit_datablock>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d02f      	beq.n	8005e90 <USER_SPI_write+0xd8>
			count = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	e02c      	b.n	8005e90 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005e36:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <USER_SPI_write+0xf4>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f003 0306 	and.w	r3, r3, #6
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <USER_SPI_write+0x92>
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	2097      	movs	r0, #151	@ 0x97
 8005e46:	f7ff fdc2 	bl	80059ce <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	2019      	movs	r0, #25
 8005e4e:	f7ff fdbe 	bl	80059ce <send_cmd>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11b      	bne.n	8005e90 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005e58:	21fc      	movs	r1, #252	@ 0xfc
 8005e5a:	68b8      	ldr	r0, [r7, #8]
 8005e5c:	f7ff fd85 	bl	800596a <xmit_datablock>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <USER_SPI_write+0xc4>
				buff += 512;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005e6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1ee      	bne.n	8005e58 <USER_SPI_write+0xa0>
 8005e7a:	e000      	b.n	8005e7e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005e7c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005e7e:	21fd      	movs	r1, #253	@ 0xfd
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7ff fd72 	bl	800596a <xmit_datablock>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <USER_SPI_write+0xd8>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005e90:	f7ff fd1a 	bl	80058c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bf14      	ite	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	2300      	moveq	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000054 	.word	0x20000054
 8005eac:	200003b8 	.word	0x200003b8

08005eb0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	@ 0x30
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	603a      	str	r2, [r7, #0]
 8005eba:	71fb      	strb	r3, [r7, #7]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <USER_SPI_ioctl+0x1a>
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	e15a      	b.n	8006180 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005eca:	4baf      	ldr	r3, [pc, #700]	@ (8006188 <USER_SPI_ioctl+0x2d8>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <USER_SPI_ioctl+0x2c>
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e151      	b.n	8006180 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005ee2:	79bb      	ldrb	r3, [r7, #6]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	f200 8136 	bhi.w	8006156 <USER_SPI_ioctl+0x2a6>
 8005eea:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <USER_SPI_ioctl+0x40>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f05 	.word	0x08005f05
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08006157 	.word	0x08006157
 8005efc:	08005fc5 	.word	0x08005fc5
 8005f00:	080060bb 	.word	0x080060bb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005f04:	f7ff fcee 	bl	80058e4 <spiselect>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8127 	beq.w	800615e <USER_SPI_ioctl+0x2ae>
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005f16:	e122      	b.n	800615e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005f18:	2100      	movs	r1, #0
 8005f1a:	2009      	movs	r0, #9
 8005f1c:	f7ff fd57 	bl	80059ce <send_cmd>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 811d 	bne.w	8006162 <USER_SPI_ioctl+0x2b2>
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	2110      	movs	r1, #16
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fcf2 	bl	8005918 <rcvr_datablock>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8113 	beq.w	8006162 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005f3c:	7b3b      	ldrb	r3, [r7, #12]
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d111      	bne.n	8005f6a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005f46:	7d7b      	ldrb	r3, [r7, #21]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	7d3b      	ldrb	r3, [r7, #20]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	4413      	add	r3, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	7cfb      	ldrb	r3, [r7, #19]
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	029a      	lsls	r2, r3, #10
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e028      	b.n	8005fbc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005f6a:	7c7b      	ldrb	r3, [r7, #17]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	7dbb      	ldrb	r3, [r7, #22]
 8005f74:	09db      	lsrs	r3, r3, #7
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	7d7b      	ldrb	r3, [r7, #21]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0306 	and.w	r3, r3, #6
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005f92:	7d3b      	ldrb	r3, [r7, #20]
 8005f94:	099b      	lsrs	r3, r3, #6
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	7cbb      	ldrb	r3, [r7, #18]
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fa8:	4413      	add	r3, r2
 8005faa:	3301      	adds	r3, #1
 8005fac:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005fae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fb2:	3b09      	subs	r3, #9
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005fc2:	e0ce      	b.n	8006162 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005fc4:	4b71      	ldr	r3, [pc, #452]	@ (800618c <USER_SPI_ioctl+0x2dc>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d031      	beq.n	8006034 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	208d      	movs	r0, #141	@ 0x8d
 8005fd4:	f7ff fcfb 	bl	80059ce <send_cmd>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 80c3 	bne.w	8006166 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005fe0:	20ff      	movs	r0, #255	@ 0xff
 8005fe2:	f7ff fc07 	bl	80057f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	2110      	movs	r1, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fc93 	bl	8005918 <rcvr_datablock>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80b6 	beq.w	8006166 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005ffa:	2330      	movs	r3, #48	@ 0x30
 8005ffc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006000:	e007      	b.n	8006012 <USER_SPI_ioctl+0x162>
 8006002:	20ff      	movs	r0, #255	@ 0xff
 8006004:	f7ff fbf6 	bl	80057f4 <xchg_spi>
 8006008:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800600c:	3b01      	subs	r3, #1
 800600e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006012:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f3      	bne.n	8006002 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800601a:	7dbb      	ldrb	r3, [r7, #22]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	2310      	movs	r3, #16
 8006024:	fa03 f202 	lsl.w	r2, r3, r2
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006032:	e098      	b.n	8006166 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006034:	2100      	movs	r1, #0
 8006036:	2009      	movs	r0, #9
 8006038:	f7ff fcc9 	bl	80059ce <send_cmd>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	f040 8091 	bne.w	8006166 <USER_SPI_ioctl+0x2b6>
 8006044:	f107 030c 	add.w	r3, r7, #12
 8006048:	2110      	movs	r1, #16
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fc64 	bl	8005918 <rcvr_datablock>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8087 	beq.w	8006166 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006058:	4b4c      	ldr	r3, [pc, #304]	@ (800618c <USER_SPI_ioctl+0x2dc>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006064:	7dbb      	ldrb	r3, [r7, #22]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800606c:	7dfa      	ldrb	r2, [r7, #23]
 800606e:	09d2      	lsrs	r2, r2, #7
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	4413      	add	r3, r2
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	7e7b      	ldrb	r3, [r7, #25]
 8006078:	099b      	lsrs	r3, r3, #6
 800607a:	b2db      	uxtb	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	461a      	mov	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	e013      	b.n	80060b2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800608a:	7dbb      	ldrb	r3, [r7, #22]
 800608c:	109b      	asrs	r3, r3, #2
 800608e:	b29b      	uxth	r3, r3
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	3301      	adds	r3, #1
 8006096:	7dfa      	ldrb	r2, [r7, #23]
 8006098:	00d2      	lsls	r2, r2, #3
 800609a:	f002 0218 	and.w	r2, r2, #24
 800609e:	7df9      	ldrb	r1, [r7, #23]
 80060a0:	0949      	lsrs	r1, r1, #5
 80060a2:	b2c9      	uxtb	r1, r1
 80060a4:	440a      	add	r2, r1
 80060a6:	3201      	adds	r2, #1
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80060b8:	e055      	b.n	8006166 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80060ba:	4b34      	ldr	r3, [pc, #208]	@ (800618c <USER_SPI_ioctl+0x2dc>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 0306 	and.w	r3, r3, #6
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d051      	beq.n	800616a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80060c6:	f107 020c 	add.w	r2, r7, #12
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	210b      	movs	r1, #11
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff feee 	bl	8005eb0 <USER_SPI_ioctl>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d149      	bne.n	800616e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80060da:	7b3b      	ldrb	r3, [r7, #12]
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <USER_SPI_ioctl+0x23e>
 80060e4:	7dbb      	ldrb	r3, [r7, #22]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d041      	beq.n	8006172 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	623b      	str	r3, [r7, #32]
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80060fe:	4b23      	ldr	r3, [pc, #140]	@ (800618c <USER_SPI_ioctl+0x2dc>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	025b      	lsls	r3, r3, #9
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	025b      	lsls	r3, r3, #9
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006118:	2020      	movs	r0, #32
 800611a:	f7ff fc58 	bl	80059ce <send_cmd>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d128      	bne.n	8006176 <USER_SPI_ioctl+0x2c6>
 8006124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006126:	2021      	movs	r0, #33	@ 0x21
 8006128:	f7ff fc51 	bl	80059ce <send_cmd>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d121      	bne.n	8006176 <USER_SPI_ioctl+0x2c6>
 8006132:	2100      	movs	r1, #0
 8006134:	2026      	movs	r0, #38	@ 0x26
 8006136:	f7ff fc4a 	bl	80059ce <send_cmd>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d11a      	bne.n	8006176 <USER_SPI_ioctl+0x2c6>
 8006140:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006144:	f7ff fb9c 	bl	8005880 <wait_ready>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d013      	beq.n	8006176 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800614e:	2300      	movs	r3, #0
 8006150:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006154:	e00f      	b.n	8006176 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006156:	2304      	movs	r3, #4
 8006158:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800615c:	e00c      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		break;
 800615e:	bf00      	nop
 8006160:	e00a      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		break;
 8006162:	bf00      	nop
 8006164:	e008      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		break;
 8006166:	bf00      	nop
 8006168:	e006      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800616a:	bf00      	nop
 800616c:	e004      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800616e:	bf00      	nop
 8006170:	e002      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006172:	bf00      	nop
 8006174:	e000      	b.n	8006178 <USER_SPI_ioctl+0x2c8>
		break;
 8006176:	bf00      	nop
	}

	despiselect();
 8006178:	f7ff fba6 	bl	80058c8 <despiselect>

	return res;
 800617c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006180:	4618      	mov	r0, r3
 8006182:	3730      	adds	r7, #48	@ 0x30
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000054 	.word	0x20000054
 800618c:	200003b8 	.word	0x200003b8

08006190 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	4a08      	ldr	r2, [pc, #32]	@ (80061c0 <disk_status+0x30>)
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	79fa      	ldrb	r2, [r7, #7]
 80061a8:	4905      	ldr	r1, [pc, #20]	@ (80061c0 <disk_status+0x30>)
 80061aa:	440a      	add	r2, r1
 80061ac:	7a12      	ldrb	r2, [r2, #8]
 80061ae:	4610      	mov	r0, r2
 80061b0:	4798      	blx	r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200003e4 	.word	0x200003e4

080061c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	4a0d      	ldr	r2, [pc, #52]	@ (800620c <disk_initialize+0x48>)
 80061d6:	5cd3      	ldrb	r3, [r2, r3]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d111      	bne.n	8006200 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	4a0b      	ldr	r2, [pc, #44]	@ (800620c <disk_initialize+0x48>)
 80061e0:	2101      	movs	r1, #1
 80061e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	4a09      	ldr	r2, [pc, #36]	@ (800620c <disk_initialize+0x48>)
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	79fa      	ldrb	r2, [r7, #7]
 80061f2:	4906      	ldr	r1, [pc, #24]	@ (800620c <disk_initialize+0x48>)
 80061f4:	440a      	add	r2, r1
 80061f6:	7a12      	ldrb	r2, [r2, #8]
 80061f8:	4610      	mov	r0, r2
 80061fa:	4798      	blx	r3
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	200003e4 	.word	0x200003e4

08006210 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <disk_read+0x3c>)
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	689c      	ldr	r4, [r3, #8]
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	4a07      	ldr	r2, [pc, #28]	@ (800624c <disk_read+0x3c>)
 8006230:	4413      	add	r3, r2
 8006232:	7a18      	ldrb	r0, [r3, #8]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	47a0      	blx	r4
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
}
 8006242:	4618      	mov	r0, r3
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd90      	pop	{r4, r7, pc}
 800624a:	bf00      	nop
 800624c:	200003e4 	.word	0x200003e4

08006250 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	4a0a      	ldr	r2, [pc, #40]	@ (800628c <disk_write+0x3c>)
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68dc      	ldr	r4, [r3, #12]
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	4a07      	ldr	r2, [pc, #28]	@ (800628c <disk_write+0x3c>)
 8006270:	4413      	add	r3, r2
 8006272:	7a18      	ldrb	r0, [r3, #8]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	47a0      	blx	r4
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd90      	pop	{r4, r7, pc}
 800628a:	bf00      	nop
 800628c:	200003e4 	.word	0x200003e4

08006290 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	603a      	str	r2, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
 800629c:	460b      	mov	r3, r1
 800629e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4a09      	ldr	r2, [pc, #36]	@ (80062c8 <disk_ioctl+0x38>)
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	79fa      	ldrb	r2, [r7, #7]
 80062ae:	4906      	ldr	r1, [pc, #24]	@ (80062c8 <disk_ioctl+0x38>)
 80062b0:	440a      	add	r2, r1
 80062b2:	7a10      	ldrb	r0, [r2, #8]
 80062b4:	79b9      	ldrb	r1, [r7, #6]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	4798      	blx	r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200003e4 	.word	0x200003e4

080062cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80062e0:	e007      	b.n	80062f2 <mem_cpy+0x26>
		*d++ = *s++;
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	1c53      	adds	r3, r2, #1
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	6179      	str	r1, [r7, #20]
 80062ee:	7812      	ldrb	r2, [r2, #0]
 80062f0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1e5a      	subs	r2, r3, #1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f2      	bne.n	80062e2 <mem_cpy+0x16>
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800631a:	e005      	b.n	8006328 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	617a      	str	r2, [r7, #20]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	1e5a      	subs	r2, r3, #1
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f4      	bne.n	800631c <mem_set+0x12>
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	@ 0x24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006358:	bf00      	nop
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00d      	beq.n	8006380 <mem_cmp+0x40>
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	61fa      	str	r2, [r7, #28]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	4619      	mov	r1, r3
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	61ba      	str	r2, [r7, #24]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	1acb      	subs	r3, r1, r3
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0ec      	beq.n	800635a <mem_cmp+0x1a>
	return r;
 8006380:	697b      	ldr	r3, [r7, #20]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	@ 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006398:	e002      	b.n	80063a0 <chk_chr+0x12>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3301      	adds	r3, #1
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <chk_chr+0x26>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d1f2      	bne.n	800639a <chk_chr+0xc>
	return *str;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	781b      	ldrb	r3, [r3, #0]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e038      	b.n	800644a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80063d8:	4930      	ldr	r1, [pc, #192]	@ (800649c <chk_lock+0xd8>)
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d029      	beq.n	8006440 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80063ec:	492b      	ldr	r1, [pc, #172]	@ (800649c <chk_lock+0xd8>)
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006402:	429a      	cmp	r2, r3
 8006404:	d11e      	bne.n	8006444 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006406:	4925      	ldr	r1, [pc, #148]	@ (800649c <chk_lock+0xd8>)
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	3304      	adds	r3, #4
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800641e:	429a      	cmp	r2, r3
 8006420:	d110      	bne.n	8006444 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006422:	491e      	ldr	r1, [pc, #120]	@ (800649c <chk_lock+0xd8>)
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	3308      	adds	r3, #8
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800643a:	429a      	cmp	r2, r3
 800643c:	d102      	bne.n	8006444 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800643e:	e007      	b.n	8006450 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006440:	2301      	movs	r3, #1
 8006442:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d9c3      	bls.n	80063d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d109      	bne.n	800646a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <chk_lock+0x9e>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d101      	bne.n	8006466 <chk_lock+0xa2>
 8006462:	2300      	movs	r3, #0
 8006464:	e013      	b.n	800648e <chk_lock+0xca>
 8006466:	2312      	movs	r3, #18
 8006468:	e011      	b.n	800648e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <chk_lock+0xc4>
 8006470:	490a      	ldr	r1, [pc, #40]	@ (800649c <chk_lock+0xd8>)
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	330a      	adds	r3, #10
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006486:	d101      	bne.n	800648c <chk_lock+0xc8>
 8006488:	2310      	movs	r3, #16
 800648a:	e000      	b.n	800648e <chk_lock+0xca>
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200003cc 	.word	0x200003cc

080064a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	e002      	b.n	80064b2 <enq_lock+0x12>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3301      	adds	r3, #1
 80064b0:	607b      	str	r3, [r7, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d809      	bhi.n	80064cc <enq_lock+0x2c>
 80064b8:	490a      	ldr	r1, [pc, #40]	@ (80064e4 <enq_lock+0x44>)
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ef      	bne.n	80064ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	bf14      	ite	ne
 80064d2:	2301      	movne	r3, #1
 80064d4:	2300      	moveq	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	200003cc 	.word	0x200003cc

080064e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e02b      	b.n	8006550 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80064f8:	4956      	ldr	r1, [pc, #344]	@ (8006654 <inc_lock+0x16c>)
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800650e:	429a      	cmp	r2, r3
 8006510:	d11b      	bne.n	800654a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8006512:	4950      	ldr	r1, [pc, #320]	@ (8006654 <inc_lock+0x16c>)
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4613      	mov	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	3304      	adds	r3, #4
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800652a:	429a      	cmp	r2, r3
 800652c:	d10d      	bne.n	800654a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800652e:	4949      	ldr	r1, [pc, #292]	@ (8006654 <inc_lock+0x16c>)
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4613      	mov	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3308      	adds	r3, #8
 800653e:	881a      	ldrh	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 8006546:	429a      	cmp	r2, r3
 8006548:	d006      	beq.n	8006558 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d9d0      	bls.n	80064f8 <inc_lock+0x10>
 8006556:	e000      	b.n	800655a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8006558:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d145      	bne.n	80065ec <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e002      	b.n	800656c <inc_lock+0x84>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d809      	bhi.n	8006586 <inc_lock+0x9e>
 8006572:	4938      	ldr	r1, [pc, #224]	@ (8006654 <inc_lock+0x16c>)
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ef      	bne.n	8006566 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d101      	bne.n	8006590 <inc_lock+0xa8>
 800658c:	2300      	movs	r3, #0
 800658e:	e05a      	b.n	8006646 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8006596:	482f      	ldr	r0, [pc, #188]	@ (8006654 <inc_lock+0x16c>)
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4403      	add	r3, r0
 80065a4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80065ac:	4829      	ldr	r0, [pc, #164]	@ (8006654 <inc_lock+0x16c>)
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4613      	mov	r3, r2
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4403      	add	r3, r0
 80065ba:	3304      	adds	r3, #4
 80065bc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 80065c4:	4923      	ldr	r1, [pc, #140]	@ (8006654 <inc_lock+0x16c>)
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4613      	mov	r3, r2
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	3308      	adds	r3, #8
 80065d4:	4602      	mov	r2, r0
 80065d6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80065d8:	491e      	ldr	r1, [pc, #120]	@ (8006654 <inc_lock+0x16c>)
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	330a      	adds	r3, #10
 80065e8:	2200      	movs	r2, #0
 80065ea:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <inc_lock+0x124>
 80065f2:	4918      	ldr	r1, [pc, #96]	@ (8006654 <inc_lock+0x16c>)
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4613      	mov	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	330a      	adds	r3, #10
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <inc_lock+0x124>
 8006608:	2300      	movs	r3, #0
 800660a:	e01c      	b.n	8006646 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10b      	bne.n	800662a <inc_lock+0x142>
 8006612:	4910      	ldr	r1, [pc, #64]	@ (8006654 <inc_lock+0x16c>)
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4613      	mov	r3, r2
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	330a      	adds	r3, #10
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	b299      	uxth	r1, r3
 8006628:	e001      	b.n	800662e <inc_lock+0x146>
 800662a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800662e:	4809      	ldr	r0, [pc, #36]	@ (8006654 <inc_lock+0x16c>)
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4613      	mov	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4403      	add	r3, r0
 800663c:	330a      	adds	r3, #10
 800663e:	460a      	mov	r2, r1
 8006640:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	200003cc 	.word	0x200003cc

08006658 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3b01      	subs	r3, #1
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d82e      	bhi.n	80066ca <dec_lock+0x72>
		n = Files[i].ctr;
 800666c:	491b      	ldr	r1, [pc, #108]	@ (80066dc <dec_lock+0x84>)
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	330a      	adds	r3, #10
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006686:	d101      	bne.n	800668c <dec_lock+0x34>
 8006688:	2300      	movs	r3, #0
 800668a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800668c:	89fb      	ldrh	r3, [r7, #14]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <dec_lock+0x40>
 8006692:	89fb      	ldrh	r3, [r7, #14]
 8006694:	3b01      	subs	r3, #1
 8006696:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006698:	4910      	ldr	r1, [pc, #64]	@ (80066dc <dec_lock+0x84>)
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	330a      	adds	r3, #10
 80066a8:	89fa      	ldrh	r2, [r7, #14]
 80066aa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d108      	bne.n	80066c4 <dec_lock+0x6c>
 80066b2:	490a      	ldr	r1, [pc, #40]	@ (80066dc <dec_lock+0x84>)
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	737b      	strb	r3, [r7, #13]
 80066c8:	e001      	b.n	80066ce <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80066ca:	2302      	movs	r3, #2
 80066cc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	200003cc 	.word	0x200003cc

080066e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	e016      	b.n	800671c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80066ee:	4910      	ldr	r1, [pc, #64]	@ (8006730 <clear_lock+0x50>)
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4613      	mov	r3, r2
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d108      	bne.n	8006716 <clear_lock+0x36>
 8006704:	490a      	ldr	r1, [pc, #40]	@ (8006730 <clear_lock+0x50>)
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4613      	mov	r3, r2
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d9e5      	bls.n	80066ee <clear_lock+0xe>
	}
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	200003cc 	.word	0x200003cc

08006734 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8006746:	2b00      	cmp	r3, #0
 8006748:	d038      	beq.n	80067bc <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8006750:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	2301      	movs	r3, #1
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	f7ff fd77 	bl	8006250 <disk_write>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e026      	b.n	80067bc <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	1ad2      	subs	r2, r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006786:	429a      	cmp	r2, r3
 8006788:	d218      	bcs.n	80067bc <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	e010      	b.n	80067b6 <sync_window+0x82>
					wsect += fs->fsize;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	2301      	movs	r3, #1
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	f7ff fd50 	bl	8006250 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d8eb      	bhi.n	8006794 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d01b      	beq.n	8006818 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ffa7 	bl	8006734 <sync_window>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d113      	bne.n	8006818 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	2301      	movs	r3, #1
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	f7ff fd08 	bl	8006210 <disk_read>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ff82 	bl	8006734 <sync_window>
 8006830:	4603      	mov	r3, r0
 8006832:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 809b 	bne.w	8006972 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006842:	2b03      	cmp	r3, #3
 8006844:	f040 8088 	bne.w	8006958 <sync_fs+0x136>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800684e:	2b01      	cmp	r3, #1
 8006850:	f040 8082 	bne.w	8006958 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fd54 	bl	800630a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2255      	movs	r2, #85	@ 0x55
 8006866:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	22aa      	movs	r2, #170	@ 0xaa
 800686e:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2252      	movs	r2, #82	@ 0x52
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2252      	movs	r2, #82	@ 0x52
 800687c:	705a      	strb	r2, [r3, #1]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2261      	movs	r2, #97	@ 0x61
 8006882:	709a      	strb	r2, [r3, #2]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2241      	movs	r2, #65	@ 0x41
 8006888:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2272      	movs	r2, #114	@ 0x72
 800688e:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2272      	movs	r2, #114	@ 0x72
 8006896:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2241      	movs	r2, #65	@ 0x41
 800689e:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2261      	movs	r2, #97	@ 0x61
 80068a6:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80068be:	b29b      	uxth	r3, r3
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80068e2:	0e1b      	lsrs	r3, r3, #24
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006900:	b29b      	uxth	r3, r3
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	b29b      	uxth	r3, r3
 8006906:	b2da      	uxtb	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	b2da      	uxtb	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006924:	0e1b      	lsrs	r3, r3, #24
 8006926:	b2da      	uxtb	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800694a:	2301      	movs	r3, #1
 800694c:	f7ff fc80 	bl	8006250 <disk_write>
			fs->fsi_flag = 0;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fc94 	bl	8006290 <disk_ioctl>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	3b02      	subs	r3, #2
 800698a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006992:	3b02      	subs	r3, #2
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d301      	bcc.n	800699e <clust2sect+0x22>
 800699a:	2300      	movs	r3, #0
 800699c:	e00a      	b.n	80069b4 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80069a4:	461a      	mov	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	fb03 f202 	mul.w	r2, r3, r2
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80069b2:	4413      	add	r3, r2
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d905      	bls.n	80069dc <get_fat+0x1c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d302      	bcc.n	80069e2 <get_fat+0x22>
		val = 1;	/* Internal error */
 80069dc:	2301      	movs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e0a2      	b.n	8006b28 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d067      	beq.n	8006ac2 <get_fat+0x102>
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	f300 808e 	bgt.w	8006b14 <get_fat+0x154>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d002      	beq.n	8006a02 <get_fat+0x42>
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d03f      	beq.n	8006a80 <get_fat+0xc0>
 8006a00:	e088      	b.n	8006b14 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0a5b      	lsrs	r3, r3, #9
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fed1 	bl	80067c6 <move_window>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d177      	bne.n	8006b1a <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	60fa      	str	r2, [r7, #12]
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	5cd3      	ldrb	r3, [r2, r3]
 8006a38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	0a5b      	lsrs	r3, r3, #9
 8006a44:	4413      	add	r3, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff febc 	bl	80067c6 <move_window>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d164      	bne.n	8006b1e <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	5cd3      	ldrb	r3, [r2, r3]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <get_fat+0xb6>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	091b      	lsrs	r3, r3, #4
 8006a74:	e002      	b.n	8006a7c <get_fat+0xbc>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7c:	617b      	str	r3, [r7, #20]
			break;
 8006a7e:	e053      	b.n	8006b28 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	4413      	add	r3, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fe99 	bl	80067c6 <move_window>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d143      	bne.n	8006b22 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	b21a      	sxth	r2, r3
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	617b      	str	r3, [r7, #20]
			break;
 8006ac0:	e032      	b.n	8006b28 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	4413      	add	r3, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fe78 	bl	80067c6 <move_window>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d124      	bne.n	8006b26 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3303      	adds	r3, #3
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	061a      	lsls	r2, r3, #24
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3302      	adds	r3, #2
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	041b      	lsls	r3, r3, #16
 8006afa:	431a      	orrs	r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3301      	adds	r3, #1
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	4313      	orrs	r3, r2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006b10:	617b      	str	r3, [r7, #20]
			break;
 8006b12:	e009      	b.n	8006b28 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e006      	b.n	8006b28 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b1a:	bf00      	nop
 8006b1c:	e004      	b.n	8006b28 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b1e:	bf00      	nop
 8006b20:	e002      	b.n	8006b28 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b22:	bf00      	nop
 8006b24:	e000      	b.n	8006b28 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b26:	bf00      	nop
		}
	}

	return val;
 8006b28:	697b      	ldr	r3, [r7, #20]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b088      	sub	sp, #32
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d905      	bls.n	8006b50 <put_fat+0x1e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <put_fat+0x24>
		res = FR_INT_ERR;
 8006b50:	2302      	movs	r3, #2
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e0f6      	b.n	8006d44 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	f000 809e 	beq.w	8006c9e <put_fat+0x16c>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	f300 80e4 	bgt.w	8006d30 <put_fat+0x1fe>
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d002      	beq.n	8006b72 <put_fat+0x40>
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d06f      	beq.n	8006c50 <put_fat+0x11e>
 8006b70:	e0de      	b.n	8006d30 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	085b      	lsrs	r3, r3, #1
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	0a5b      	lsrs	r3, r3, #9
 8006b8a:	4413      	add	r3, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fe19 	bl	80067c6 <move_window>
 8006b94:	4603      	mov	r3, r0
 8006b96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b98:	7ffb      	ldrb	r3, [r7, #31]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 80cb 	bne.w	8006d36 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	617a      	str	r2, [r7, #20]
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <put_fat+0xa4>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	b25a      	sxtb	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	e001      	b.n	8006bda <put_fat+0xa8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	0a5b      	lsrs	r3, r3, #9
 8006bf0:	4413      	add	r3, r2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fde6 	bl	80067c6 <move_window>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bfe:	7ffb      	ldrb	r3, [r7, #31]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 809a 	bne.w	8006d3a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <put_fat+0xf2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	091b      	lsrs	r3, r3, #4
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e00e      	b.n	8006c42 <put_fat+0x110>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	b25b      	sxtb	r3, r3
 8006c2a:	f023 030f 	bic.w	r3, r3, #15
 8006c2e:	b25a      	sxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	b25b      	sxtb	r3, r3
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	b25b      	sxtb	r3, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006c4e:	e079      	b.n	8006d44 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	4413      	add	r3, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7ff fdb1 	bl	80067c6 <move_window>
 8006c64:	4603      	mov	r3, r0
 8006c66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c68:	7ffb      	ldrb	r3, [r7, #31]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d167      	bne.n	8006d3e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006c9c:	e052      	b.n	8006d44 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	09db      	lsrs	r3, r3, #7
 8006ca8:	4413      	add	r3, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fd8a 	bl	80067c6 <move_window>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cb6:	7ffb      	ldrb	r3, [r7, #31]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d142      	bne.n	8006d42 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3303      	adds	r3, #3
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	061a      	lsls	r2, r3, #24
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	7812      	ldrb	r2, [r2, #0]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0c1a      	lsrs	r2, r3, #16
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	3302      	adds	r3, #2
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	0e1a      	lsrs	r2, r3, #24
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	3303      	adds	r3, #3
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006d2e:	e009      	b.n	8006d44 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8006d30:	2302      	movs	r3, #2
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e006      	b.n	8006d44 <put_fat+0x212>
			if (res != FR_OK) break;
 8006d36:	bf00      	nop
 8006d38:	e004      	b.n	8006d44 <put_fat+0x212>
			if (res != FR_OK) break;
 8006d3a:	bf00      	nop
 8006d3c:	e002      	b.n	8006d44 <put_fat+0x212>
			if (res != FR_OK) break;
 8006d3e:	bf00      	nop
 8006d40:	e000      	b.n	8006d44 <put_fat+0x212>
			if (res != FR_OK) break;
 8006d42:	bf00      	nop
		}
	}

	return res;
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d905      	bls.n	8006d6a <remove_chain+0x1c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d302      	bcc.n	8006d70 <remove_chain+0x22>
		res = FR_INT_ERR;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	e043      	b.n	8006df8 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006d74:	e036      	b.n	8006de4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fe21 	bl	80069c0 <get_fat>
 8006d7e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d035      	beq.n	8006df2 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <remove_chain+0x44>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	e032      	b.n	8006df8 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d102      	bne.n	8006da0 <remove_chain+0x52>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	73fb      	strb	r3, [r7, #15]
 8006d9e:	e02b      	b.n	8006df8 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006da0:	2200      	movs	r2, #0
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff fec4 	bl	8006b32 <put_fat>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d120      	bne.n	8006df6 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d00f      	beq.n	8006de0 <remove_chain+0x92>
				fs->free_clust++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d3c2      	bcc.n	8006d76 <remove_chain+0x28>
 8006df0:	e002      	b.n	8006df8 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006df6:	bf00      	nop
		}
	}

	return res;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b086      	sub	sp, #24
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10f      	bne.n	8006e32 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006e18:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <create_chain+0x2a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d31c      	bcc.n	8006e66 <create_chain+0x64>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e019      	b.n	8006e66 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fdc3 	bl	80069c0 <get_fat>
 8006e3a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d801      	bhi.n	8006e46 <create_chain+0x44>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e076      	b.n	8006f34 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d101      	bne.n	8006e52 <create_chain+0x50>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	e070      	b.n	8006f34 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d201      	bcs.n	8006e62 <create_chain+0x60>
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	e068      	b.n	8006f34 <create_chain+0x132>
		scl = clst;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d307      	bcc.n	8006e8c <create_chain+0x8a>
			ncl = 2;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d901      	bls.n	8006e8c <create_chain+0x8a>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e053      	b.n	8006f34 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006e8c:	6979      	ldr	r1, [r7, #20]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff fd96 	bl	80069c0 <get_fat>
 8006e94:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea2:	d002      	beq.n	8006eaa <create_chain+0xa8>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <create_chain+0xac>
			return cs;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	e042      	b.n	8006f34 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d1d9      	bne.n	8006e6a <create_chain+0x68>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e03c      	b.n	8006f34 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006eba:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006ebc:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff fe35 	bl	8006b32 <put_fat>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <create_chain+0xe4>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff fe28 	bl	8006b32 <put_fat>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11a      	bne.n	8006f22 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d018      	beq.n	8006f32 <create_chain+0x130>
			fs->free_clust--;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006f06:	1e5a      	subs	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8006f14:	f043 0301 	orr.w	r3, r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 8006f20:	e007      	b.n	8006f32 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d102      	bne.n	8006f2e <create_chain+0x12c>
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	e000      	b.n	8006f30 <create_chain+0x12e>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006f32:	697b      	ldr	r3, [r7, #20]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	0a5b      	lsrs	r3, r3, #9
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8006f5a:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8006f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	613a      	str	r2, [r7, #16]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <clmt_clust+0x3c>
 8006f74:	2300      	movs	r3, #0
 8006f76:	e010      	b.n	8006f9a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d307      	bcc.n	8006f90 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f8e:	e7e9      	b.n	8006f64 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006f90:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006fc0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d007      	beq.n	8006fd8 <dir_sdi+0x32>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d301      	bcc.n	8006fdc <dir_sdi+0x36>
		return FR_INT_ERR;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e074      	b.n	80070c6 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10c      	bne.n	8006ffc <dir_sdi+0x56>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006fe8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d105      	bne.n	8006ffc <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006ff6:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006ffa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d111      	bne.n	8007026 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007008:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800700c:	461a      	mov	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	4293      	cmp	r3, r2
 8007012:	d301      	bcc.n	8007018 <dir_sdi+0x72>
			return FR_INT_ERR;
 8007014:	2302      	movs	r3, #2
 8007016:	e056      	b.n	80070c6 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800701e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	e032      	b.n	800708c <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800702c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007034:	e01e      	b.n	8007074 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fcbe 	bl	80069c0 <get_fat>
 8007044:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d101      	bne.n	8007052 <dir_sdi+0xac>
 800704e:	2301      	movs	r3, #1
 8007050:	e039      	b.n	80070c6 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d907      	bls.n	8007068 <dir_sdi+0xc2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800705e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	429a      	cmp	r2, r3
 8007066:	d301      	bcc.n	800706c <dir_sdi+0xc6>
				return FR_INT_ERR;
 8007068:	2302      	movs	r3, #2
 800706a:	e02c      	b.n	80070c6 <dir_sdi+0x120>
			idx -= ic;
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	429a      	cmp	r2, r3
 800707a:	d2dc      	bcs.n	8007036 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007082:	6979      	ldr	r1, [r7, #20]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fc79 	bl	800697c <clust2sect>
 800708a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <dir_sdi+0xf8>
 800709a:	2302      	movs	r3, #2
 800709c:	e013      	b.n	80070c6 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	091a      	lsrs	r2, r3, #4
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80070b2:	461a      	mov	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	015b      	lsls	r3, r3, #5
 80070bc:	441a      	add	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070ce:	b590      	push	{r4, r7, lr}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <dir_next+0x26>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <dir_next+0x2a>
		return FR_NO_FILE;
 80070f4:	2304      	movs	r3, #4
 80070f6:	e0dd      	b.n	80072b4 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f040 80c6 	bne.w	8007290 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007122:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007126:	461a      	mov	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4293      	cmp	r3, r2
 800712c:	f0c0 80b0 	bcc.w	8007290 <dir_next+0x1c2>
				return FR_NO_FILE;
 8007130:	2304      	movs	r3, #4
 8007132:	e0bf      	b.n	80072b4 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	091b      	lsrs	r3, r3, #4
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800713e:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007142:	3a01      	subs	r2, #1
 8007144:	4013      	ands	r3, r2
 8007146:	2b00      	cmp	r3, #0
 8007148:	f040 80a2 	bne.w	8007290 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7ff fc30 	bl	80069c0 <get_fat>
 8007160:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d801      	bhi.n	800716c <dir_next+0x9e>
 8007168:	2302      	movs	r3, #2
 800716a:	e0a3      	b.n	80072b4 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d101      	bne.n	8007178 <dir_next+0xaa>
 8007174:	2301      	movs	r3, #1
 8007176:	e09d      	b.n	80072b4 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800717e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	429a      	cmp	r2, r3
 8007186:	d374      	bcc.n	8007272 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <dir_next+0xc4>
 800718e:	2304      	movs	r3, #4
 8007190:	e090      	b.n	80072b4 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7ff fe2e 	bl	8006e02 <create_chain>
 80071a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <dir_next+0xe4>
 80071ae:	2307      	movs	r3, #7
 80071b0:	e080      	b.n	80072b4 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <dir_next+0xee>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e07b      	b.n	80072b4 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	d101      	bne.n	80071c8 <dir_next+0xfa>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e075      	b.n	80072b4 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fab0 	bl	8006734 <sync_window>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <dir_next+0x110>
 80071da:	2301      	movs	r3, #1
 80071dc:	e06a      	b.n	80072b4 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80071e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff f88d 	bl	800630a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	4610      	mov	r0, r2
 8007200:	f7ff fbbc 	bl	800697c <clust2sect>
 8007204:	4603      	mov	r3, r0
 8007206:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800720a:	2300      	movs	r3, #0
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	e01b      	b.n	8007248 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fa86 	bl	8006734 <sync_window>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <dir_next+0x164>
 800722e:	2301      	movs	r3, #1
 8007230:	e040      	b.n	80072b4 <dir_next+0x1e6>
						dp->fs->winsect++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007238:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800723c:	3201      	adds	r2, #1
 800723e:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3301      	adds	r3, #1
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800724e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007252:	461a      	mov	r2, r3
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4293      	cmp	r3, r2
 8007258:	d3da      	bcc.n	8007210 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007260:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	1a8a      	subs	r2, r1, r2
 800726e:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fb7a 	bl	800697c <clust2sect>
 8007288:	4602      	mov	r2, r0
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80072a0:	461a      	mov	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	015b      	lsls	r3, r3, #5
 80072aa:	441a      	add	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd90      	pop	{r4, r7, pc}

080072bc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80072c6:	2100      	movs	r1, #0
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fe6c 	bl	8006fa6 <dir_sdi>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d131      	bne.n	800733c <dir_alloc+0x80>
		n = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7ff fa6b 	bl	80067c6 <move_window>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11f      	bne.n	800733a <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2be5      	cmp	r3, #229	@ 0xe5
 8007304:	d005      	beq.n	8007312 <dir_alloc+0x56>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d107      	bne.n	8007322 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3301      	adds	r3, #1
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d102      	bne.n	8007326 <dir_alloc+0x6a>
 8007320:	e00c      	b.n	800733c <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007326:	2101      	movs	r1, #1
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff fed0 	bl	80070ce <dir_next>
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0d1      	beq.n	80072dc <dir_alloc+0x20>
 8007338:	e000      	b.n	800733c <dir_alloc+0x80>
			if (res != FR_OK) break;
 800733a:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	2b04      	cmp	r3, #4
 8007340:	d101      	bne.n	8007346 <dir_alloc+0x8a>
 8007342:	2307      	movs	r3, #7
 8007344:	73fb      	strb	r3, [r7, #15]
	return res;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	331b      	adds	r3, #27
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	b21a      	sxth	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	331a      	adds	r3, #26
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	b21b      	sxth	r3, r3
 800736c:	4313      	orrs	r3, r2
 800736e:	b21b      	sxth	r3, r3
 8007370:	b29b      	uxth	r3, r3
 8007372:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800737a:	2b03      	cmp	r3, #3
 800737c:	d10f      	bne.n	800739e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	3315      	adds	r3, #21
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	b21a      	sxth	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	3314      	adds	r3, #20
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b21b      	sxth	r3, r3
 8007390:	4313      	orrs	r3, r2
 8007392:	b21b      	sxth	r3, r3
 8007394:	b29b      	uxth	r3, r3
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

	return cl;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	331a      	adds	r3, #26
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	331b      	adds	r3, #27
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	0c1a      	lsrs	r2, r3, #16
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3314      	adds	r3, #20
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	0c1b      	lsrs	r3, r3, #16
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	0a1b      	lsrs	r3, r3, #8
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3315      	adds	r3, #21
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b086      	sub	sp, #24
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007402:	2100      	movs	r1, #0
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fdce 	bl	8006fa6 <dir_sdi>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <dir_find+0x1e>
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	e03b      	b.n	8007490 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7ff f9cd 	bl	80067c6 <move_window>
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d128      	bne.n	8007488 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800743c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <dir_find+0x56>
 800744a:	2304      	movs	r3, #4
 800744c:	75fb      	strb	r3, [r7, #23]
 800744e:	e01e      	b.n	800748e <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	330b      	adds	r3, #11
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <dir_find+0x7a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007464:	220b      	movs	r2, #11
 8007466:	4619      	mov	r1, r3
 8007468:	6938      	ldr	r0, [r7, #16]
 800746a:	f7fe ff69 	bl	8006340 <mem_cmp>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fe29 	bl	80070ce <dir_next>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0c8      	beq.n	8007418 <dir_find+0x1e>
 8007486:	e002      	b.n	800748e <dir_find+0x94>
		if (res != FR_OK) break;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <dir_find+0x94>
			break;
 800748c:	bf00      	nop

	return res;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff ff0a 	bl	80072bc <dir_alloc>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d126      	bne.n	8007500 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7ff f980 	bl	80067c6 <move_window>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d117      	bne.n	8007500 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80074d6:	2220      	movs	r2, #32
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe ff15 	bl	800630a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80074ec:	220b      	movs	r2, #11
 80074ee:	4619      	mov	r1, r3
 80074f0:	f7fe feec 	bl	80062cc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e002      	b.n	8007524 <create_name+0x18>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b2f      	cmp	r3, #47	@ 0x2f
 800752a:	d0f8      	beq.n	800751e <create_name+0x12>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b5c      	cmp	r3, #92	@ 0x5c
 8007532:	d0f4      	beq.n	800751e <create_name+0x12>
	sfn = dp->fn;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800753a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800753c:	220b      	movs	r2, #11
 800753e:	2120      	movs	r1, #32
 8007540:	68b8      	ldr	r0, [r7, #8]
 8007542:	f7fe fee2 	bl	800630a <mem_set>
	si = i = b = 0; ni = 8;
 8007546:	2300      	movs	r3, #0
 8007548:	77fb      	strb	r3, [r7, #31]
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	2308      	movs	r3, #8
 8007554:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	617a      	str	r2, [r7, #20]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007564:	7fbb      	ldrb	r3, [r7, #30]
 8007566:	2b20      	cmp	r3, #32
 8007568:	d953      	bls.n	8007612 <create_name+0x106>
 800756a:	7fbb      	ldrb	r3, [r7, #30]
 800756c:	2b2f      	cmp	r3, #47	@ 0x2f
 800756e:	d050      	beq.n	8007612 <create_name+0x106>
 8007570:	7fbb      	ldrb	r3, [r7, #30]
 8007572:	2b5c      	cmp	r3, #92	@ 0x5c
 8007574:	d04d      	beq.n	8007612 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8007576:	7fbb      	ldrb	r3, [r7, #30]
 8007578:	2b2e      	cmp	r3, #46	@ 0x2e
 800757a:	d003      	beq.n	8007584 <create_name+0x78>
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	d30f      	bcc.n	80075a4 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b08      	cmp	r3, #8
 8007588:	d102      	bne.n	8007590 <create_name+0x84>
 800758a:	7fbb      	ldrb	r3, [r7, #30]
 800758c:	2b2e      	cmp	r3, #46	@ 0x2e
 800758e:	d001      	beq.n	8007594 <create_name+0x88>
 8007590:	2306      	movs	r3, #6
 8007592:	e073      	b.n	800767c <create_name+0x170>
			i = 8; ni = 11;
 8007594:	2308      	movs	r3, #8
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	230b      	movs	r3, #11
 800759a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800759c:	7ffb      	ldrb	r3, [r7, #31]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e035      	b.n	8007610 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80075a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da08      	bge.n	80075be <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80075ac:	7ffb      	ldrb	r3, [r7, #31]
 80075ae:	f043 0303 	orr.w	r3, r3, #3
 80075b2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80075b4:	7fbb      	ldrb	r3, [r7, #30]
 80075b6:	3b80      	subs	r3, #128	@ 0x80
 80075b8:	4a32      	ldr	r2, [pc, #200]	@ (8007684 <create_name+0x178>)
 80075ba:	5cd3      	ldrb	r3, [r2, r3]
 80075bc:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80075be:	7fbb      	ldrb	r3, [r7, #30]
 80075c0:	4619      	mov	r1, r3
 80075c2:	4831      	ldr	r0, [pc, #196]	@ (8007688 <create_name+0x17c>)
 80075c4:	f7fe fee3 	bl	800638e <chk_chr>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <create_name+0xc6>
				return FR_INVALID_NAME;
 80075ce:	2306      	movs	r3, #6
 80075d0:	e054      	b.n	800767c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80075d2:	7fbb      	ldrb	r3, [r7, #30]
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	d907      	bls.n	80075e8 <create_name+0xdc>
 80075d8:	7fbb      	ldrb	r3, [r7, #30]
 80075da:	2b5a      	cmp	r3, #90	@ 0x5a
 80075dc:	d804      	bhi.n	80075e8 <create_name+0xdc>
				b |= 2;
 80075de:	7ffb      	ldrb	r3, [r7, #31]
 80075e0:	f043 0302 	orr.w	r3, r3, #2
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e00c      	b.n	8007602 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80075e8:	7fbb      	ldrb	r3, [r7, #30]
 80075ea:	2b60      	cmp	r3, #96	@ 0x60
 80075ec:	d909      	bls.n	8007602 <create_name+0xf6>
 80075ee:	7fbb      	ldrb	r3, [r7, #30]
 80075f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80075f2:	d806      	bhi.n	8007602 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80075f4:	7ffb      	ldrb	r3, [r7, #31]
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	77fb      	strb	r3, [r7, #31]
 80075fc:	7fbb      	ldrb	r3, [r7, #30]
 80075fe:	3b20      	subs	r3, #32
 8007600:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	613a      	str	r2, [r7, #16]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	4413      	add	r3, r2
 800760c:	7fba      	ldrb	r2, [r7, #30]
 800760e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007610:	e7a1      	b.n	8007556 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	441a      	add	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800761c:	7fbb      	ldrb	r3, [r7, #30]
 800761e:	2b20      	cmp	r3, #32
 8007620:	d801      	bhi.n	8007626 <create_name+0x11a>
 8007622:	2304      	movs	r3, #4
 8007624:	e000      	b.n	8007628 <create_name+0x11c>
 8007626:	2300      	movs	r3, #0
 8007628:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <create_name+0x128>
 8007630:	2306      	movs	r3, #6
 8007632:	e023      	b.n	800767c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2be5      	cmp	r3, #229	@ 0xe5
 800763a:	d102      	bne.n	8007642 <create_name+0x136>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2205      	movs	r2, #5
 8007640:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d102      	bne.n	800764e <create_name+0x142>
 8007648:	7ffb      	ldrb	r3, [r7, #31]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800764e:	7ffb      	ldrb	r3, [r7, #31]
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d103      	bne.n	8007660 <create_name+0x154>
 8007658:	7fbb      	ldrb	r3, [r7, #30]
 800765a:	f043 0310 	orr.w	r3, r3, #16
 800765e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	f003 030c 	and.w	r3, r3, #12
 8007666:	2b04      	cmp	r3, #4
 8007668:	d103      	bne.n	8007672 <create_name+0x166>
 800766a:	7fbb      	ldrb	r3, [r7, #30]
 800766c:	f043 0308 	orr.w	r3, r3, #8
 8007670:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	330b      	adds	r3, #11
 8007676:	7fba      	ldrb	r2, [r7, #30]
 8007678:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800767a:	2300      	movs	r3, #0
#endif
}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	08009b74 	.word	0x08009b74
 8007688:	08009af8 	.word	0x08009af8

0800768c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b2f      	cmp	r3, #47	@ 0x2f
 800769c:	d003      	beq.n	80076a6 <follow_path+0x1a>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b5c      	cmp	r3, #92	@ 0x5c
 80076a4:	d102      	bne.n	80076ac <follow_path+0x20>
		path++;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b1f      	cmp	r3, #31
 80076ba:	d80a      	bhi.n	80076d2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fc71 	bl	8006fa6 <dir_sdi>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80076d0:	e045      	b.n	800775e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80076d2:	463b      	mov	r3, r7
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff ff18 	bl	800750c <create_name>
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d136      	bne.n	8007754 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fe87 	bl	80073fa <dir_find>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80076f6:	7adb      	ldrb	r3, [r3, #11]
 80076f8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b04      	cmp	r3, #4
 8007704:	d128      	bne.n	8007758 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d123      	bne.n	8007758 <follow_path+0xcc>
 8007710:	2305      	movs	r3, #5
 8007712:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007714:	e020      	b.n	8007758 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11d      	bne.n	800775c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007726:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	330b      	adds	r3, #11
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8007736:	2305      	movs	r3, #5
 8007738:	73fb      	strb	r3, [r7, #15]
 800773a:	e010      	b.n	800775e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fe03 	bl	8007350 <ld_clust>
 800774a:	4602      	mov	r2, r0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007752:	e7be      	b.n	80076d2 <follow_path+0x46>
			if (res != FR_OK) break;
 8007754:	bf00      	nop
 8007756:	e002      	b.n	800775e <follow_path+0xd2>
				break;
 8007758:	bf00      	nop
 800775a:	e000      	b.n	800775e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800775c:	bf00      	nop
		}
	}

	return res;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d031      	beq.n	80077e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	e002      	b.n	800778c <get_ldnumber+0x24>
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	3301      	adds	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b20      	cmp	r3, #32
 8007792:	d903      	bls.n	800779c <get_ldnumber+0x34>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b3a      	cmp	r3, #58	@ 0x3a
 800779a:	d1f4      	bne.n	8007786 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80077a2:	d11c      	bne.n	80077de <get_ldnumber+0x76>
			tp = *path;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	60fa      	str	r2, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	3b30      	subs	r3, #48	@ 0x30
 80077b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d80e      	bhi.n	80077da <get_ldnumber+0x72>
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d10a      	bne.n	80077da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d107      	bne.n	80077da <get_ldnumber+0x72>
					vol = (int)i;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	3301      	adds	r3, #1
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	e002      	b.n	80077e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80077e2:	693b      	ldr	r3, [r7, #16]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fe ffd9 	bl	80067c6 <move_window>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <check_fs+0x2e>
		return 3;
 800781a:	2303      	movs	r3, #3
 800781c:	e04a      	b.n	80078b4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007824:	3301      	adds	r3, #1
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	b21a      	sxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007832:	b21b      	sxth	r3, r3
 8007834:	4313      	orrs	r3, r2
 8007836:	b21b      	sxth	r3, r3
 8007838:	4a20      	ldr	r2, [pc, #128]	@ (80078bc <check_fs+0xcc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d001      	beq.n	8007842 <check_fs+0x52>
		return 2;
 800783e:	2302      	movs	r3, #2
 8007840:	e038      	b.n	80078b4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3336      	adds	r3, #54	@ 0x36
 8007846:	3303      	adds	r3, #3
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	061a      	lsls	r2, r3, #24
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3336      	adds	r3, #54	@ 0x36
 8007850:	3302      	adds	r3, #2
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3336      	adds	r3, #54	@ 0x36
 800785c:	3301      	adds	r3, #1
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	4313      	orrs	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800786a:	4313      	orrs	r3, r2
 800786c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007870:	4a13      	ldr	r2, [pc, #76]	@ (80078c0 <check_fs+0xd0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d101      	bne.n	800787a <check_fs+0x8a>
		return 0;
 8007876:	2300      	movs	r3, #0
 8007878:	e01c      	b.n	80078b4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3352      	adds	r3, #82	@ 0x52
 800787e:	3303      	adds	r3, #3
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	061a      	lsls	r2, r3, #24
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3352      	adds	r3, #82	@ 0x52
 8007888:	3302      	adds	r3, #2
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3352      	adds	r3, #82	@ 0x52
 8007894:	3301      	adds	r3, #1
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	4313      	orrs	r3, r2
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80078a8:	4a05      	ldr	r2, [pc, #20]	@ (80078c0 <check_fs+0xd0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d101      	bne.n	80078b2 <check_fs+0xc2>
		return 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <check_fs+0xc4>

	return 1;
 80078b2:	2301      	movs	r3, #1
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	ffffaa55 	.word	0xffffaa55
 80078c0:	00544146 	.word	0x00544146

080078c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b096      	sub	sp, #88	@ 0x58
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80078d8:	68b8      	ldr	r0, [r7, #8]
 80078da:	f7ff ff45 	bl	8007768 <get_ldnumber>
 80078de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80078e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da01      	bge.n	80078ea <find_volume+0x26>
 80078e6:	230b      	movs	r3, #11
 80078e8:	e2a8      	b.n	8007e3c <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80078ea:	4a9d      	ldr	r2, [pc, #628]	@ (8007b60 <find_volume+0x29c>)
 80078ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <find_volume+0x3a>
 80078fa:	230c      	movs	r3, #12
 80078fc:	e29e      	b.n	8007e3c <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007902:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01b      	beq.n	8007946 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fc3b 	bl	8006190 <disk_status>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d007      	beq.n	8007942 <find_volume+0x7e>
 8007932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800793e:	230a      	movs	r3, #10
 8007940:	e27c      	b.n	8007e3c <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8007942:	2300      	movs	r3, #0
 8007944:	e27a      	b.n	8007e3c <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800794e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fc30 	bl	80061c4 <disk_initialize>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800796a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007976:	2303      	movs	r3, #3
 8007978:	e260      	b.n	8007e3c <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <find_volume+0xcc>
 8007980:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800798c:	230a      	movs	r3, #10
 800798e:	e255      	b.n	8007e3c <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007994:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007996:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007998:	f7ff ff2a 	bl	80077f0 <check_fs>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80079a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d153      	bne.n	8007a52 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80079aa:	2300      	movs	r3, #0
 80079ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80079ae:	e028      	b.n	8007a02 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80079b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80079ba:	4413      	add	r3, r2
 80079bc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	3304      	adds	r3, #4
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <find_volume+0x12a>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	330b      	adds	r3, #11
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	061a      	lsls	r2, r3, #24
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	330a      	adds	r3, #10
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	3309      	adds	r3, #9
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	4313      	orrs	r3, r2
 80079e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e6:	3208      	adds	r2, #8
 80079e8:	7812      	ldrb	r2, [r2, #0]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	e000      	b.n	80079f0 <find_volume+0x12c>
 80079ee:	2200      	movs	r2, #0
 80079f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	3358      	adds	r3, #88	@ 0x58
 80079f6:	443b      	add	r3, r7
 80079f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80079fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fe:	3301      	adds	r3, #1
 8007a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d9d3      	bls.n	80079b0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007a08:	2300      	movs	r3, #0
 8007a0a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <find_volume+0x154>
 8007a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a14:	3b01      	subs	r3, #1
 8007a16:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	3358      	adds	r3, #88	@ 0x58
 8007a1e:	443b      	add	r3, r7
 8007a20:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007a24:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <find_volume+0x174>
 8007a2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a30:	f7ff fede 	bl	80077f0 <check_fs>
 8007a34:	4603      	mov	r3, r0
 8007a36:	e000      	b.n	8007a3a <find_volume+0x176>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007a3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <find_volume+0x18e>
 8007a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a48:	3301      	adds	r3, #1
 8007a4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d9e2      	bls.n	8007a18 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007a52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d101      	bne.n	8007a5e <find_volume+0x19a>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e1ee      	b.n	8007e3c <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007a5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <find_volume+0x1a6>
 8007a66:	230d      	movs	r3, #13
 8007a68:	e1e8      	b.n	8007e3c <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	7b1b      	ldrb	r3, [r3, #12]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	b21a      	sxth	r2, r3
 8007a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a74:	7adb      	ldrb	r3, [r3, #11]
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	b21b      	sxth	r3, r3
 8007a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a80:	d001      	beq.n	8007a86 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8007a82:	230d      	movs	r3, #13
 8007a84:	e1da      	b.n	8007e3c <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a88:	7ddb      	ldrb	r3, [r3, #23]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	b21a      	sxth	r2, r3
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a90:	7d9b      	ldrb	r3, [r3, #22]
 8007a92:	b21b      	sxth	r3, r3
 8007a94:	4313      	orrs	r3, r2
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d112      	bne.n	8007ac8 <find_volume+0x204>
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007aa8:	061a      	lsls	r2, r3, #24
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	4313      	orrs	r3, r2
 8007abe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ac0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007acc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	7c1a      	ldrb	r2, [r3, #16]
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad6:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d006      	beq.n	8007af2 <find_volume+0x22e>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d001      	beq.n	8007af2 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8007aee:	230d      	movs	r3, #13
 8007af0:	e1a4      	b.n	8007e3c <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007af8:	461a      	mov	r2, r3
 8007afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	7b5a      	ldrb	r2, [r3, #13]
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <find_volume+0x268>
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007b24:	3b01      	subs	r3, #1
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8007b2c:	230d      	movs	r3, #13
 8007b2e:	e185      	b.n	8007e3c <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	7c9b      	ldrb	r3, [r3, #18]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	b21a      	sxth	r2, r3
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	7c5b      	ldrb	r3, [r3, #17]
 8007b3c:	b21b      	sxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b21b      	sxth	r3, r3
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8007b5a:	230d      	movs	r3, #13
 8007b5c:	e16e      	b.n	8007e3c <find_volume+0x578>
 8007b5e:	bf00      	nop
 8007b60:	200003c4 	.word	0x200003c4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b66:	7d1b      	ldrb	r3, [r3, #20]
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	b21a      	sxth	r2, r3
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	7cdb      	ldrb	r3, [r3, #19]
 8007b70:	b21b      	sxth	r3, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	b21b      	sxth	r3, r3
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d112      	bne.n	8007ba6 <find_volume+0x2e2>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007b86:	061a      	lsls	r2, r3, #24
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007b8e:	041b      	lsls	r3, r3, #16
 8007b90:	431a      	orrs	r2, r3
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba8:	7bdb      	ldrb	r3, [r3, #15]
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	b21a      	sxth	r2, r3
 8007bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb0:	7b9b      	ldrb	r3, [r3, #14]
 8007bb2:	b21b      	sxth	r3, r3
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b21b      	sxth	r3, r3
 8007bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007bba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <find_volume+0x300>
 8007bc0:	230d      	movs	r3, #13
 8007bc2:	e13b      	b.n	8007e3c <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007bc4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc8:	4413      	add	r3, r2
 8007bca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bcc:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8007bd0:	0912      	lsrs	r2, r2, #4
 8007bd2:	b292      	uxth	r2, r2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007bd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d201      	bcs.n	8007be4 <find_volume+0x320>
 8007be0:	230d      	movs	r3, #13
 8007be2:	e12b      	b.n	8007e3c <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bec:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <find_volume+0x33c>
 8007bfc:	230d      	movs	r3, #13
 8007bfe:	e11d      	b.n	8007e3c <find_volume+0x578>
	fmt = FS_FAT12;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d902      	bls.n	8007c16 <find_volume+0x352>
 8007c10:	2302      	movs	r3, #2
 8007c12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d902      	bls.n	8007c26 <find_volume+0x362>
 8007c20:	2303      	movs	r3, #3
 8007c22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	1c9a      	adds	r2, r3, #2
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c34:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007c38:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c3c:	441a      	add	r2, r3
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007c44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c48:	441a      	add	r2, r3
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8007c50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d121      	bne.n	8007c9c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <find_volume+0x3a2>
 8007c62:	230d      	movs	r3, #13
 8007c64:	e0ea      	b.n	8007e3c <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007c6c:	061a      	lsls	r2, r3, #24
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	431a      	orrs	r2, r3
 8007c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	4313      	orrs	r3, r2
 8007c82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c84:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c9a:	e025      	b.n	8007ce8 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <find_volume+0x3e6>
 8007ca6:	230d      	movs	r3, #13
 8007ca8:	e0c8      	b.n	8007e3c <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8007cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cb2:	441a      	add	r2, r3
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb6:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007cba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d104      	bne.n	8007ccc <find_volume+0x408>
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	e00c      	b.n	8007ce6 <find_volume+0x422>
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	085a      	lsrs	r2, r3, #1
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007ce6:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cea:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cf0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007cf4:	0a5b      	lsrs	r3, r3, #9
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d201      	bcs.n	8007cfe <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8007cfa:	230d      	movs	r3, #13
 8007cfc:	e09e      	b.n	8007e3c <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295
 8007d04:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	2280      	movs	r2, #128	@ 0x80
 8007d18:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d177      	bne.n	8007e14 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	b21a      	sxth	r2, r3
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d34:	b21b      	sxth	r3, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	b21b      	sxth	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d16a      	bne.n	8007e14 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d40:	3301      	adds	r3, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d46:	f7fe fd3e 	bl	80067c6 <move_window>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d161      	bne.n	8007e14 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b21a      	sxth	r2, r3
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007d68:	b21b      	sxth	r3, r3
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	b21b      	sxth	r3, r3
 8007d6e:	4a35      	ldr	r2, [pc, #212]	@ (8007e44 <find_volume+0x580>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d14f      	bne.n	8007e14 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	78db      	ldrb	r3, [r3, #3]
 8007d78:	061a      	lsls	r2, r3, #24
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	789b      	ldrb	r3, [r3, #2]
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	431a      	orrs	r2, r3
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	4a2d      	ldr	r2, [pc, #180]	@ (8007e48 <find_volume+0x584>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d13e      	bne.n	8007e14 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d98:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8007d9c:	061a      	lsls	r2, r3, #24
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8007da4:	041b      	lsls	r3, r3, #16
 8007da6:	431a      	orrs	r2, r3
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	4313      	orrs	r3, r2
 8007db2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007db4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8007db8:	4313      	orrs	r3, r2
 8007dba:	4a24      	ldr	r2, [pc, #144]	@ (8007e4c <find_volume+0x588>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d129      	bne.n	8007e14 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8007dc6:	061a      	lsls	r2, r3, #24
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dde:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8007de2:	431a      	orrs	r2, r3
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8007df0:	061a      	lsls	r2, r3, #24
 8007df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df4:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8007df8:	041b      	lsls	r3, r3, #16
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	4313      	orrs	r3, r2
 8007e06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e08:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007e1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e50 <find_volume+0x58c>)
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	3301      	adds	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	4b0a      	ldr	r3, [pc, #40]	@ (8007e50 <find_volume+0x58c>)
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <find_volume+0x58c>)
 8007e2c:	881a      	ldrh	r2, [r3, #0]
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e30:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e36:	f7fe fc53 	bl	80066e0 <clear_lock>
#endif

	return FR_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3758      	adds	r7, #88	@ 0x58
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	ffffaa55 	.word	0xffffaa55
 8007e48:	41615252 	.word	0x41615252
 8007e4c:	61417272 	.word	0x61417272
 8007e50:	200003c8 	.word	0x200003c8

08007e54 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d022      	beq.n	8007eac <validate+0x58>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01d      	beq.n	8007eac <validate+0x58>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <validate+0x58>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e84:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d10c      	bne.n	8007eac <validate+0x58>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e98:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe f977 	bl	8006190 <disk_status>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007eac:	2309      	movs	r3, #9
 8007eae:	e000      	b.n	8007eb2 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007ece:	f107 0310 	add.w	r3, r7, #16
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fc48 	bl	8007768 <get_ldnumber>
 8007ed8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da01      	bge.n	8007ee4 <f_mount+0x28>
 8007ee0:	230b      	movs	r3, #11
 8007ee2:	e02d      	b.n	8007f40 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ee4:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <f_mount+0x8c>)
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d006      	beq.n	8007f02 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007ef4:	69b8      	ldr	r0, [r7, #24]
 8007ef6:	f7fe fbf3 	bl	80066e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	490d      	ldr	r1, [pc, #52]	@ (8007f48 <f_mount+0x8c>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <f_mount+0x6a>
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d001      	beq.n	8007f2a <f_mount+0x6e>
 8007f26:	2300      	movs	r3, #0
 8007f28:	e00a      	b.n	8007f40 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007f2a:	f107 0108 	add.w	r1, r7, #8
 8007f2e:	f107 030c 	add.w	r3, r7, #12
 8007f32:	2200      	movs	r2, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fcc5 	bl	80078c4 <find_volume>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200003c4 	.word	0x200003c4

08007f4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f58:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007f5c:	6018      	str	r0, [r3, #0]
 8007f5e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f62:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007f66:	6019      	str	r1, [r3, #0]
 8007f68:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f6c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007f70:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007f72:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f76:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <f_open+0x38>
 8007f80:	2309      	movs	r3, #9
 8007f82:	e253      	b.n	800842c <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 8007f84:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f88:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007f94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f98:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007f9c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007fa0:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	f002 021f 	and.w	r2, r2, #31
 8007faa:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007fac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007fb0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	f107 0108 	add.w	r1, r7, #8
 8007fc0:	f107 0320 	add.w	r3, r7, #32
 8007fc4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fc7b 	bl	80078c4 <find_volume>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007fd4:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 8225 	bne.w	8008428 <f_open+0x4dc>
		INIT_BUF(dj);
 8007fde:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007fe2:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007fe6:	f107 0214 	add.w	r2, r7, #20
 8007fea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007fee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007ff2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	f107 0320 	add.w	r3, r7, #32
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fb44 	bl	800768c <follow_path>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 800800a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800800e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008012:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008016:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800801a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11b      	bne.n	800805a <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8008022:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800802a:	2306      	movs	r3, #6
 800802c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8008030:	e013      	b.n	800805a <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008032:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008036:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	bf8c      	ite	hi
 8008040:	2301      	movhi	r3, #1
 8008042:	2300      	movls	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	f107 0320 	add.w	r3, r7, #32
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe f9b8 	bl	80063c4 <chk_lock>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800805a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800805e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 031c 	and.w	r3, r3, #28
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80e6 	beq.w	800823a <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 800806e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008072:	2b00      	cmp	r3, #0
 8008074:	d027      	beq.n	80080c6 <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008076:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800807a:	2b04      	cmp	r3, #4
 800807c:	d10e      	bne.n	800809c <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800807e:	f7fe fa0f 	bl	80064a0 <enq_lock>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d006      	beq.n	8008096 <f_open+0x14a>
 8008088:	f107 0320 	add.w	r3, r7, #32
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fa03 	bl	8007498 <dir_register>
 8008092:	4603      	mov	r3, r0
 8008094:	e000      	b.n	8008098 <f_open+0x14c>
 8008096:	2312      	movs	r3, #18
 8008098:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800809c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080a0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80080a4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80080a8:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80080ac:	7812      	ldrb	r2, [r2, #0]
 80080ae:	f042 0208 	orr.w	r2, r2, #8
 80080b2:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80080b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080b8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80080bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080c0:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80080c4:	e017      	b.n	80080f6 <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80080ca:	330b      	adds	r3, #11
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f003 0311 	and.w	r3, r3, #17
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <f_open+0x192>
					res = FR_DENIED;
 80080d6:	2307      	movs	r3, #7
 80080d8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80080dc:	e00b      	b.n	80080f6 <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80080de:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080e2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <f_open+0x1aa>
						res = FR_EXIST;
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80080f6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f040 80c1 	bne.w	8008282 <f_open+0x336>
 8008100:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008104:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80b7 	beq.w	8008282 <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8008114:	f7fd fae6 	bl	80056e4 <get_fattime>
 8008118:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800811c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008120:	330e      	adds	r3, #14
 8008122:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800812e:	b29b      	uxth	r3, r3
 8008130:	0a1b      	lsrs	r3, r3, #8
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008138:	330f      	adds	r3, #15
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008142:	0c1a      	lsrs	r2, r3, #16
 8008144:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008148:	3310      	adds	r3, #16
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008152:	0e1a      	lsrs	r2, r3, #24
 8008154:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008158:	3311      	adds	r3, #17
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800815e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008162:	330b      	adds	r3, #11
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008168:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800816c:	331c      	adds	r3, #28
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008176:	331d      	adds	r3, #29
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008180:	331e      	adds	r3, #30
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800818a:	331f      	adds	r3, #31
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008190:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008194:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008198:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800819c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff f8d5 	bl	8007350 <ld_clust>
 80081a6:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80081aa:	2100      	movs	r1, #0
 80081ac:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 80081b0:	f7ff f8fc 	bl	80073ac <st_clust>
				dj.fs->wflag = 1;
 80081b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80081b8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80081bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80081c6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d059      	beq.n	8008282 <f_open+0x336>
					dw = dj.fs->winsect;
 80081ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80081d2:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80081d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80081da:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80081de:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 80081e2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80081e6:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80081ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80081ee:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fdab 	bl	8006d4e <remove_chain>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 80081fe:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008202:	2b00      	cmp	r3, #0
 8008204:	d13d      	bne.n	8008282 <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008206:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800820a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800820e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008212:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8008216:	3a01      	subs	r2, #1
 8008218:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 800821c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008220:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008224:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008228:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe faca 	bl	80067c6 <move_window>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8008238:	e023      	b.n	8008282 <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800823a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800823e:	2b00      	cmp	r3, #0
 8008240:	d11f      	bne.n	8008282 <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008242:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008246:	330b      	adds	r3, #11
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <f_open+0x30e>
					res = FR_NO_FILE;
 8008252:	2304      	movs	r3, #4
 8008254:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8008258:	e013      	b.n	8008282 <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800825a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800825e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <f_open+0x336>
 800826c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008270:	330b      	adds	r3, #11
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <f_open+0x336>
						res = FR_DENIED;
 800827c:	2307      	movs	r3, #7
 800827e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8008282:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008286:	2b00      	cmp	r3, #0
 8008288:	d151      	bne.n	800832e <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800828a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800828e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <f_open+0x368>
				mode |= FA__WRITTEN;
 800829c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082a0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80082a4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80082a8:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	f042 0220 	orr.w	r2, r2, #32
 80082b2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80082b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082b8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80082bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80082c0:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80082c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082c8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 80082d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082d6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80082e0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082e8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	bf8c      	ite	hi
 80082f2:	2301      	movhi	r3, #1
 80082f4:	2300      	movls	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	f107 0320 	add.w	r3, r7, #32
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe f8f1 	bl	80064e8 <inc_lock>
 8008306:	4602      	mov	r2, r0
 8008308:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800830c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8008316:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800831a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <f_open+0x3e2>
 8008328:	2302      	movs	r3, #2
 800832a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800832e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008332:	2b00      	cmp	r3, #0
 8008334:	d178      	bne.n	8008428 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 8008336:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800833a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008344:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8008348:	7812      	ldrb	r2, [r2, #0]
 800834a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800834e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008352:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800835e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008362:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8008366:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800836a:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe ffee 	bl	8007350 <ld_clust>
 8008374:	4602      	mov	r2, r0
 8008376:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800837a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008384:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008388:	331f      	adds	r3, #31
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	061a      	lsls	r2, r3, #24
 800838e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008392:	331e      	adds	r3, #30
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	431a      	orrs	r2, r3
 800839a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800839e:	331d      	adds	r3, #29
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80083aa:	321c      	adds	r2, #28
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083b4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 80083be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083c2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 80083ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083d2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80083de:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083e2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80083ee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083f2:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80083f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80083fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083fe:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8008408:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800840c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008416:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800841a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800841e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8008428:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 800842c:	4618      	mov	r0, r3
 800842e:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b08c      	sub	sp, #48	@ 0x30
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
 8008442:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fd00 	bl	8007e54 <validate>
 8008454:	4603      	mov	r3, r0
 8008456:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008458:	7ffb      	ldrb	r3, [r7, #31]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <f_read+0x2c>
 800845e:	7ffb      	ldrb	r3, [r7, #31]
 8008460:	e150      	b.n	8008704 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8008472:	e147      	b.n	8008704 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008482:	2307      	movs	r3, #7
 8008484:	e13e      	b.n	8008704 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	429a      	cmp	r2, r3
 800849c:	f240 812d 	bls.w	80086fa <f_read+0x2c4>
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80084a4:	e129      	b.n	80086fa <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 80f2 	bne.w	800869a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80084c6:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	4013      	ands	r3, r2
 80084d0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d139      	bne.n	800854c <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80084e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084ea:	e018      	b.n	800851e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d008      	beq.n	8008508 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80084fc:	4619      	mov	r1, r3
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7fe fd1c 	bl	8006f3c <clmt_clust>
 8008504:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008506:	e00a      	b.n	800851e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fe fa52 	bl	80069c0 <get_fat>
 800851c:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d805      	bhi.n	8008530 <f_read+0xfa>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800852c:	2302      	movs	r3, #2
 800852e:	e0e9      	b.n	8008704 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008536:	d105      	bne.n	8008544 <f_read+0x10e>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008540:	2301      	movs	r3, #1
 8008542:	e0df      	b.n	8008704 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008548:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fe fa0e 	bl	800697c <clust2sect>
 8008560:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d105      	bne.n	8008574 <f_read+0x13e>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008570:	2302      	movs	r3, #2
 8008572:	e0c7      	b.n	8008704 <f_read+0x2ce>
			sect += csect;
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4413      	add	r3, r2
 800857a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	0a5b      	lsrs	r3, r3, #9
 8008580:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	2b00      	cmp	r3, #0
 8008586:	d046      	beq.n	8008616 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008588:	7dfa      	ldrb	r2, [r7, #23]
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	4413      	add	r3, r2
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8008594:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8008598:	4293      	cmp	r3, r2
 800859a:	d908      	bls.n	80085ae <f_read+0x178>
					cc = fp->fs->csize - csect;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80085a2:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80085a6:	461a      	mov	r2, r3
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80085b4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	6a39      	ldr	r1, [r7, #32]
 80085be:	f7fd fe27 	bl	8006210 <disk_read>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80085d0:	2301      	movs	r3, #1
 80085d2:	e097      	b.n	8008704 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80085da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d015      	beq.n	800860e <f_read+0x1d8>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d90d      	bls.n	800860e <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	025b      	lsls	r3, r3, #9
 80085fe:	6a3a      	ldr	r2, [r7, #32]
 8008600:	4413      	add	r3, r2
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fe5f 	bl	80062cc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	025b      	lsls	r3, r3, #9
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8008614:	e05b      	b.n	80086ce <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	429a      	cmp	r2, r3
 8008620:	d037      	beq.n	8008692 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01d      	beq.n	800866c <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008636:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008642:	2301      	movs	r3, #1
 8008644:	f7fd fe04 	bl	8006250 <disk_write>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008656:	2301      	movs	r3, #1
 8008658:	e054      	b.n	8008704 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008664:	b2da      	uxtb	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008672:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	2301      	movs	r3, #1
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	f7fd fdc8 	bl	8006210 <disk_read>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800868e:	2301      	movs	r3, #1
 8008690:	e038      	b.n	8008704 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80086a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80086a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 80086aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d901      	bls.n	80086b6 <f_read+0x280>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80086bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086c6:	4619      	mov	r1, r3
 80086c8:	6a38      	ldr	r0, [r7, #32]
 80086ca:	f7fd fdff 	bl	80062cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80086ce:	6a3a      	ldr	r2, [r7, #32]
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	4413      	add	r3, r2
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80086dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086de:	441a      	add	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	441a      	add	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f47f aed2 	bne.w	80084a6 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3730      	adds	r7, #48	@ 0x30
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff fb9d 	bl	8007e54 <validate>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f040 80a8 	bne.w	8008876 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800872c:	f003 0320 	and.w	r3, r3, #32
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 80a0 	beq.w	8008876 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800873c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d019      	beq.n	8008778 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800874a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008756:	2301      	movs	r3, #1
 8008758:	f7fd fd7a 	bl	8006250 <disk_write>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008762:	2301      	movs	r3, #1
 8008764:	e088      	b.n	8008878 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800876c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008770:	b2da      	uxtb	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe f81d 	bl	80067c6 <move_window>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d16f      	bne.n	8008876 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800879c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	330b      	adds	r3, #11
 80087a2:	781a      	ldrb	r2, [r3, #0]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	330b      	adds	r3, #11
 80087a8:	f042 0220 	orr.w	r2, r2, #32
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	331c      	adds	r3, #28
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	331d      	adds	r3, #29
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80087d8:	0c1a      	lsrs	r2, r3, #16
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	331e      	adds	r3, #30
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80087e8:	0e1a      	lsrs	r2, r3, #24
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	331f      	adds	r3, #31
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80087f8:	4619      	mov	r1, r3
 80087fa:	6938      	ldr	r0, [r7, #16]
 80087fc:	f7fe fdd6 	bl	80073ac <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008800:	f7fc ff70 	bl	80056e4 <get_fattime>
 8008804:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	3316      	adds	r3, #22
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	701a      	strb	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	b29b      	uxth	r3, r3
 8008814:	0a1b      	lsrs	r3, r3, #8
 8008816:	b29a      	uxth	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	3317      	adds	r3, #23
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	701a      	strb	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	0c1a      	lsrs	r2, r3, #16
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	3318      	adds	r3, #24
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	0e1a      	lsrs	r2, r3, #24
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3319      	adds	r3, #25
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	3312      	adds	r3, #18
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	3313      	adds	r3, #19
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800884e:	f023 0320 	bic.w	r3, r3, #32
 8008852:	b2da      	uxtb	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd ffd8 	bl	8006822 <sync_fs>
 8008872:	4603      	mov	r3, r0
 8008874:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008876:	7dfb      	ldrb	r3, [r7, #23]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff ff3f 	bl	800870c <f_sync>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d116      	bne.n	80088c6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff fadb 	bl	8007e54 <validate>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10e      	bne.n	80088c6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fd fed2 	bl	8006658 <dec_lock>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b090      	sub	sp, #64	@ 0x40
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff faba 	bl	8007e54 <validate>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80088e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <f_lseek+0x24>
 80088ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80088f2:	e247      	b.n	8008d84 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8008904:	e23e      	b.n	8008d84 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80f2 	beq.w	8008af6 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008918:	d164      	bne.n	80089e4 <f_lseek+0x114>
			tbl = fp->cltbl;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	1d1a      	adds	r2, r3, #4
 8008926:	627a      	str	r2, [r7, #36]	@ 0x24
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	2302      	movs	r3, #2
 800892e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008936:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2b00      	cmp	r3, #0
 800893c:	d041      	beq.n	80089c2 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	613b      	str	r3, [r7, #16]
 8008942:	2300      	movs	r3, #0
 8008944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	3302      	adds	r3, #2
 800894a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	3301      	adds	r3, #1
 8008954:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800895c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe f82e 	bl	80069c0 <get_fat>
 8008964:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	2b01      	cmp	r3, #1
 800896a:	d805      	bhi.n	8008978 <f_lseek+0xa8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008974:	2302      	movs	r3, #2
 8008976:	e205      	b.n	8008d84 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	d105      	bne.n	800898c <f_lseek+0xbc>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008988:	2301      	movs	r3, #1
 800898a:	e1fb      	b.n	8008d84 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008992:	429a      	cmp	r2, r3
 8008994:	d0da      	beq.n	800894c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008996:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	429a      	cmp	r2, r3
 800899c:	d809      	bhi.n	80089b2 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	1d1a      	adds	r2, r3, #4
 80089a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80089a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	1d1a      	adds	r2, r3, #4
 80089ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089be:	429a      	cmp	r2, r3
 80089c0:	d3bd      	bcc.n	800893e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80089c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089ca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80089cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d803      	bhi.n	80089dc <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e1d1      	b.n	8008d80 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80089dc:	2311      	movs	r3, #17
 80089de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80089e2:	e1cd      	b.n	8008d80 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d903      	bls.n	80089f8 <f_lseek+0x128>
				ofs = fp->fsize;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80089f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 81bc 	beq.w	8008d80 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fe fa94 	bl	8006f3c <clmt_clust>
 8008a14:	4602      	mov	r2, r0
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7fd ffa6 	bl	800697c <clust2sect>
 8008a30:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <f_lseek+0x174>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008a40:	2302      	movs	r3, #2
 8008a42:	e19f      	b.n	8008d84 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	0a5b      	lsrs	r3, r3, #9
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8008a50:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8008a54:	3a01      	subs	r2, #1
 8008a56:	4013      	ands	r3, r2
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8189 	beq.w	8008d80 <f_lseek+0x4b0>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	f000 8182 	beq.w	8008d80 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01d      	beq.n	8008ac6 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008a90:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f7fd fbd7 	bl	8006250 <disk_write>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e167      	b.n	8008d84 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008acc:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	f7fd fb9b 	bl	8006210 <disk_read>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e14b      	b.n	8008d84 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8008af4:	e144      	b.n	8008d80 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d90a      	bls.n	8008b18 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008b16:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008b1e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b28:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 80c6 	beq.w	8008cc0 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008b3a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8008b3e:	025b      	lsls	r3, r3, #9
 8008b40:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01e      	beq.n	8008b86 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	1e5a      	subs	r2, r3, #1
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	1e59      	subs	r1, r3, #1
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d312      	bcc.n	8008b86 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	1e5a      	subs	r2, r3, #1
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	425b      	negs	r3, r3
 8008b68:	401a      	ands	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b84:	e029      	b.n	8008bda <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11e      	bne.n	8008bd2 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe f930 	bl	8006e02 <create_chain>
 8008ba2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d105      	bne.n	8008bb6 <f_lseek+0x2e6>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2202      	movs	r2, #2
 8008bae:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e0e6      	b.n	8008d84 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d105      	bne.n	8008bca <f_lseek+0x2fa>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e0dc      	b.n	8008d84 <f_lseek+0x4b4>
					fp->sclust = clst;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d06f      	beq.n	8008cc0 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8008be0:	e047      	b.n	8008c72 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00d      	beq.n	8008c0c <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008bf6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe f902 	bl	8006e02 <create_chain>
 8008bfe:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <f_lseek+0x34c>
							ofs = bcs; break;
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	603b      	str	r3, [r7, #0]
 8008c0a:	e036      	b.n	8008c7a <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008c12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fd fed3 	bl	80069c0 <get_fat>
 8008c1a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d105      	bne.n	8008c30 <f_lseek+0x360>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0a9      	b.n	8008d84 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d907      	bls.n	8008c46 <f_lseek+0x376>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008c3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d305      	bcc.n	8008c52 <f_lseek+0x382>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e098      	b.n	8008d84 <f_lseek+0x4b4>
					fp->clust = clst;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	441a      	add	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d8b3      	bhi.n	8008be2 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	441a      	add	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d015      	beq.n	8008cc0 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008c9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fd fe6d 	bl	800697c <clust2sect>
 8008ca2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <f_lseek+0x3e6>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e066      	b.n	8008d84 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	0a5b      	lsrs	r3, r3, #9
 8008cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cbc:	4413      	add	r3, r2
 8008cbe:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d041      	beq.n	8008d52 <f_lseek+0x482>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d03b      	beq.n	8008d52 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01d      	beq.n	8008d24 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008cee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f7fd faa8 	bl	8006250 <disk_write>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e038      	b.n	8008d84 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008d2a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	2301      	movs	r3, #1
 8008d32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d34:	f7fd fa6c 	bl	8006210 <disk_read>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8008d46:	2301      	movs	r3, #1
 8008d48:	e01c      	b.n	8008d84 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d90e      	bls.n	8008d80 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8008d74:	f043 0320 	orr.w	r3, r3, #32
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008d80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3740      	adds	r7, #64	@ 0x40
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008da2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008da4:	7a5b      	ldrb	r3, [r3, #9]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d831      	bhi.n	8008e10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008dac:	4b1c      	ldr	r3, [pc, #112]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008dae:	7a5b      	ldrb	r3, [r3, #9]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	4b1a      	ldr	r3, [pc, #104]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008db6:	2100      	movs	r1, #0
 8008db8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008dba:	4b19      	ldr	r3, [pc, #100]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008dbc:	7a5b      	ldrb	r3, [r3, #9]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008dca:	4b15      	ldr	r3, [pc, #84]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008dcc:	7a5b      	ldrb	r3, [r3, #9]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008dd4:	4413      	add	r3, r2
 8008dd6:	79fa      	ldrb	r2, [r7, #7]
 8008dd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008dda:	4b11      	ldr	r3, [pc, #68]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008ddc:	7a5b      	ldrb	r3, [r3, #9]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	b2d1      	uxtb	r1, r2
 8008de4:	4a0e      	ldr	r2, [pc, #56]	@ (8008e20 <FATFS_LinkDriverEx+0x94>)
 8008de6:	7251      	strb	r1, [r2, #9]
 8008de8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008dea:	7dbb      	ldrb	r3, [r7, #22]
 8008dec:	3330      	adds	r3, #48	@ 0x30
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3301      	adds	r3, #1
 8008df8:	223a      	movs	r2, #58	@ 0x3a
 8008dfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	3302      	adds	r3, #2
 8008e00:	222f      	movs	r2, #47	@ 0x2f
 8008e02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3303      	adds	r3, #3
 8008e08:	2200      	movs	r2, #0
 8008e0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	200003e4 	.word	0x200003e4

08008e24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e2e:	2200      	movs	r2, #0
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ffaa 	bl	8008d8c <FATFS_LinkDriverEx>
 8008e38:	4603      	mov	r3, r0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <_vsniprintf_r>:
 8008e42:	b530      	push	{r4, r5, lr}
 8008e44:	4614      	mov	r4, r2
 8008e46:	2c00      	cmp	r4, #0
 8008e48:	b09b      	sub	sp, #108	@ 0x6c
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	da05      	bge.n	8008e5c <_vsniprintf_r+0x1a>
 8008e50:	238b      	movs	r3, #139	@ 0x8b
 8008e52:	6003      	str	r3, [r0, #0]
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	b01b      	add	sp, #108	@ 0x6c
 8008e5a:	bd30      	pop	{r4, r5, pc}
 8008e5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008e64:	bf14      	ite	ne
 8008e66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e6a:	4623      	moveq	r3, r4
 8008e6c:	9302      	str	r3, [sp, #8]
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e74:	9100      	str	r1, [sp, #0]
 8008e76:	9104      	str	r1, [sp, #16]
 8008e78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008e7c:	4669      	mov	r1, sp
 8008e7e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008e80:	f000 f9a0 	bl	80091c4 <_svfiprintf_r>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	bfbc      	itt	lt
 8008e88:	238b      	movlt	r3, #139	@ 0x8b
 8008e8a:	602b      	strlt	r3, [r5, #0]
 8008e8c:	2c00      	cmp	r4, #0
 8008e8e:	d0e3      	beq.n	8008e58 <_vsniprintf_r+0x16>
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e7df      	b.n	8008e58 <_vsniprintf_r+0x16>

08008e98 <vsniprintf>:
 8008e98:	b507      	push	{r0, r1, r2, lr}
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	460a      	mov	r2, r1
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	4803      	ldr	r0, [pc, #12]	@ (8008eb0 <vsniprintf+0x18>)
 8008ea4:	6800      	ldr	r0, [r0, #0]
 8008ea6:	f7ff ffcc 	bl	8008e42 <_vsniprintf_r>
 8008eaa:	b003      	add	sp, #12
 8008eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8008eb0:	20000058 	.word	0x20000058

08008eb4 <memset>:
 8008eb4:	4402      	add	r2, r0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d100      	bne.n	8008ebe <memset+0xa>
 8008ebc:	4770      	bx	lr
 8008ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec2:	e7f9      	b.n	8008eb8 <memset+0x4>

08008ec4 <__errno>:
 8008ec4:	4b01      	ldr	r3, [pc, #4]	@ (8008ecc <__errno+0x8>)
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000058 	.word	0x20000058

08008ed0 <__libc_init_array>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8008f08 <__libc_init_array+0x38>)
 8008ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8008f0c <__libc_init_array+0x3c>)
 8008ed6:	1b64      	subs	r4, r4, r5
 8008ed8:	10a4      	asrs	r4, r4, #2
 8008eda:	2600      	movs	r6, #0
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	d109      	bne.n	8008ef4 <__libc_init_array+0x24>
 8008ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8008f10 <__libc_init_array+0x40>)
 8008ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8008f14 <__libc_init_array+0x44>)
 8008ee4:	f000 fc66 	bl	80097b4 <_init>
 8008ee8:	1b64      	subs	r4, r4, r5
 8008eea:	10a4      	asrs	r4, r4, #2
 8008eec:	2600      	movs	r6, #0
 8008eee:	42a6      	cmp	r6, r4
 8008ef0:	d105      	bne.n	8008efe <__libc_init_array+0x2e>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef8:	4798      	blx	r3
 8008efa:	3601      	adds	r6, #1
 8008efc:	e7ee      	b.n	8008edc <__libc_init_array+0xc>
 8008efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f02:	4798      	blx	r3
 8008f04:	3601      	adds	r6, #1
 8008f06:	e7f2      	b.n	8008eee <__libc_init_array+0x1e>
 8008f08:	08009c30 	.word	0x08009c30
 8008f0c:	08009c30 	.word	0x08009c30
 8008f10:	08009c30 	.word	0x08009c30
 8008f14:	08009c34 	.word	0x08009c34

08008f18 <__retarget_lock_acquire_recursive>:
 8008f18:	4770      	bx	lr

08008f1a <__retarget_lock_release_recursive>:
 8008f1a:	4770      	bx	lr

08008f1c <_free_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4605      	mov	r5, r0
 8008f20:	2900      	cmp	r1, #0
 8008f22:	d041      	beq.n	8008fa8 <_free_r+0x8c>
 8008f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f28:	1f0c      	subs	r4, r1, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	bfb8      	it	lt
 8008f2e:	18e4      	addlt	r4, r4, r3
 8008f30:	f000 f8e0 	bl	80090f4 <__malloc_lock>
 8008f34:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <_free_r+0x90>)
 8008f36:	6813      	ldr	r3, [r2, #0]
 8008f38:	b933      	cbnz	r3, 8008f48 <_free_r+0x2c>
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	6014      	str	r4, [r2, #0]
 8008f3e:	4628      	mov	r0, r5
 8008f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f44:	f000 b8dc 	b.w	8009100 <__malloc_unlock>
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	d908      	bls.n	8008f5e <_free_r+0x42>
 8008f4c:	6820      	ldr	r0, [r4, #0]
 8008f4e:	1821      	adds	r1, r4, r0
 8008f50:	428b      	cmp	r3, r1
 8008f52:	bf01      	itttt	eq
 8008f54:	6819      	ldreq	r1, [r3, #0]
 8008f56:	685b      	ldreq	r3, [r3, #4]
 8008f58:	1809      	addeq	r1, r1, r0
 8008f5a:	6021      	streq	r1, [r4, #0]
 8008f5c:	e7ed      	b.n	8008f3a <_free_r+0x1e>
 8008f5e:	461a      	mov	r2, r3
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b10b      	cbz	r3, 8008f68 <_free_r+0x4c>
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d9fa      	bls.n	8008f5e <_free_r+0x42>
 8008f68:	6811      	ldr	r1, [r2, #0]
 8008f6a:	1850      	adds	r0, r2, r1
 8008f6c:	42a0      	cmp	r0, r4
 8008f6e:	d10b      	bne.n	8008f88 <_free_r+0x6c>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	4401      	add	r1, r0
 8008f74:	1850      	adds	r0, r2, r1
 8008f76:	4283      	cmp	r3, r0
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	d1e0      	bne.n	8008f3e <_free_r+0x22>
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	6053      	str	r3, [r2, #4]
 8008f82:	4408      	add	r0, r1
 8008f84:	6010      	str	r0, [r2, #0]
 8008f86:	e7da      	b.n	8008f3e <_free_r+0x22>
 8008f88:	d902      	bls.n	8008f90 <_free_r+0x74>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	e7d6      	b.n	8008f3e <_free_r+0x22>
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	1821      	adds	r1, r4, r0
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf04      	itt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	6063      	str	r3, [r4, #4]
 8008f9e:	bf04      	itt	eq
 8008fa0:	1809      	addeq	r1, r1, r0
 8008fa2:	6021      	streq	r1, [r4, #0]
 8008fa4:	6054      	str	r4, [r2, #4]
 8008fa6:	e7ca      	b.n	8008f3e <_free_r+0x22>
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	20000534 	.word	0x20000534

08008fb0 <sbrk_aligned>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8008ff0 <sbrk_aligned+0x40>)
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6831      	ldr	r1, [r6, #0]
 8008fb8:	4605      	mov	r5, r0
 8008fba:	b911      	cbnz	r1, 8008fc2 <sbrk_aligned+0x12>
 8008fbc:	f000 fba6 	bl	800970c <_sbrk_r>
 8008fc0:	6030      	str	r0, [r6, #0]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f000 fba1 	bl	800970c <_sbrk_r>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	d103      	bne.n	8008fd6 <sbrk_aligned+0x26>
 8008fce:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	bd70      	pop	{r4, r5, r6, pc}
 8008fd6:	1cc4      	adds	r4, r0, #3
 8008fd8:	f024 0403 	bic.w	r4, r4, #3
 8008fdc:	42a0      	cmp	r0, r4
 8008fde:	d0f8      	beq.n	8008fd2 <sbrk_aligned+0x22>
 8008fe0:	1a21      	subs	r1, r4, r0
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 fb92 	bl	800970c <_sbrk_r>
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d1f2      	bne.n	8008fd2 <sbrk_aligned+0x22>
 8008fec:	e7ef      	b.n	8008fce <sbrk_aligned+0x1e>
 8008fee:	bf00      	nop
 8008ff0:	20000530 	.word	0x20000530

08008ff4 <_malloc_r>:
 8008ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	1ccd      	adds	r5, r1, #3
 8008ffa:	f025 0503 	bic.w	r5, r5, #3
 8008ffe:	3508      	adds	r5, #8
 8009000:	2d0c      	cmp	r5, #12
 8009002:	bf38      	it	cc
 8009004:	250c      	movcc	r5, #12
 8009006:	2d00      	cmp	r5, #0
 8009008:	4606      	mov	r6, r0
 800900a:	db01      	blt.n	8009010 <_malloc_r+0x1c>
 800900c:	42a9      	cmp	r1, r5
 800900e:	d904      	bls.n	800901a <_malloc_r+0x26>
 8009010:	230c      	movs	r3, #12
 8009012:	6033      	str	r3, [r6, #0]
 8009014:	2000      	movs	r0, #0
 8009016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090f0 <_malloc_r+0xfc>
 800901e:	f000 f869 	bl	80090f4 <__malloc_lock>
 8009022:	f8d8 3000 	ldr.w	r3, [r8]
 8009026:	461c      	mov	r4, r3
 8009028:	bb44      	cbnz	r4, 800907c <_malloc_r+0x88>
 800902a:	4629      	mov	r1, r5
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff ffbf 	bl	8008fb0 <sbrk_aligned>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	4604      	mov	r4, r0
 8009036:	d158      	bne.n	80090ea <_malloc_r+0xf6>
 8009038:	f8d8 4000 	ldr.w	r4, [r8]
 800903c:	4627      	mov	r7, r4
 800903e:	2f00      	cmp	r7, #0
 8009040:	d143      	bne.n	80090ca <_malloc_r+0xd6>
 8009042:	2c00      	cmp	r4, #0
 8009044:	d04b      	beq.n	80090de <_malloc_r+0xea>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	4639      	mov	r1, r7
 800904a:	4630      	mov	r0, r6
 800904c:	eb04 0903 	add.w	r9, r4, r3
 8009050:	f000 fb5c 	bl	800970c <_sbrk_r>
 8009054:	4581      	cmp	r9, r0
 8009056:	d142      	bne.n	80090de <_malloc_r+0xea>
 8009058:	6821      	ldr	r1, [r4, #0]
 800905a:	1a6d      	subs	r5, r5, r1
 800905c:	4629      	mov	r1, r5
 800905e:	4630      	mov	r0, r6
 8009060:	f7ff ffa6 	bl	8008fb0 <sbrk_aligned>
 8009064:	3001      	adds	r0, #1
 8009066:	d03a      	beq.n	80090de <_malloc_r+0xea>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	442b      	add	r3, r5
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	f8d8 3000 	ldr.w	r3, [r8]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	bb62      	cbnz	r2, 80090d0 <_malloc_r+0xdc>
 8009076:	f8c8 7000 	str.w	r7, [r8]
 800907a:	e00f      	b.n	800909c <_malloc_r+0xa8>
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	1b52      	subs	r2, r2, r5
 8009080:	d420      	bmi.n	80090c4 <_malloc_r+0xd0>
 8009082:	2a0b      	cmp	r2, #11
 8009084:	d917      	bls.n	80090b6 <_malloc_r+0xc2>
 8009086:	1961      	adds	r1, r4, r5
 8009088:	42a3      	cmp	r3, r4
 800908a:	6025      	str	r5, [r4, #0]
 800908c:	bf18      	it	ne
 800908e:	6059      	strne	r1, [r3, #4]
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	bf08      	it	eq
 8009094:	f8c8 1000 	streq.w	r1, [r8]
 8009098:	5162      	str	r2, [r4, r5]
 800909a:	604b      	str	r3, [r1, #4]
 800909c:	4630      	mov	r0, r6
 800909e:	f000 f82f 	bl	8009100 <__malloc_unlock>
 80090a2:	f104 000b 	add.w	r0, r4, #11
 80090a6:	1d23      	adds	r3, r4, #4
 80090a8:	f020 0007 	bic.w	r0, r0, #7
 80090ac:	1ac2      	subs	r2, r0, r3
 80090ae:	bf1c      	itt	ne
 80090b0:	1a1b      	subne	r3, r3, r0
 80090b2:	50a3      	strne	r3, [r4, r2]
 80090b4:	e7af      	b.n	8009016 <_malloc_r+0x22>
 80090b6:	6862      	ldr	r2, [r4, #4]
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	bf0c      	ite	eq
 80090bc:	f8c8 2000 	streq.w	r2, [r8]
 80090c0:	605a      	strne	r2, [r3, #4]
 80090c2:	e7eb      	b.n	800909c <_malloc_r+0xa8>
 80090c4:	4623      	mov	r3, r4
 80090c6:	6864      	ldr	r4, [r4, #4]
 80090c8:	e7ae      	b.n	8009028 <_malloc_r+0x34>
 80090ca:	463c      	mov	r4, r7
 80090cc:	687f      	ldr	r7, [r7, #4]
 80090ce:	e7b6      	b.n	800903e <_malloc_r+0x4a>
 80090d0:	461a      	mov	r2, r3
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d1fb      	bne.n	80090d0 <_malloc_r+0xdc>
 80090d8:	2300      	movs	r3, #0
 80090da:	6053      	str	r3, [r2, #4]
 80090dc:	e7de      	b.n	800909c <_malloc_r+0xa8>
 80090de:	230c      	movs	r3, #12
 80090e0:	6033      	str	r3, [r6, #0]
 80090e2:	4630      	mov	r0, r6
 80090e4:	f000 f80c 	bl	8009100 <__malloc_unlock>
 80090e8:	e794      	b.n	8009014 <_malloc_r+0x20>
 80090ea:	6005      	str	r5, [r0, #0]
 80090ec:	e7d6      	b.n	800909c <_malloc_r+0xa8>
 80090ee:	bf00      	nop
 80090f0:	20000534 	.word	0x20000534

080090f4 <__malloc_lock>:
 80090f4:	4801      	ldr	r0, [pc, #4]	@ (80090fc <__malloc_lock+0x8>)
 80090f6:	f7ff bf0f 	b.w	8008f18 <__retarget_lock_acquire_recursive>
 80090fa:	bf00      	nop
 80090fc:	2000052c 	.word	0x2000052c

08009100 <__malloc_unlock>:
 8009100:	4801      	ldr	r0, [pc, #4]	@ (8009108 <__malloc_unlock+0x8>)
 8009102:	f7ff bf0a 	b.w	8008f1a <__retarget_lock_release_recursive>
 8009106:	bf00      	nop
 8009108:	2000052c 	.word	0x2000052c

0800910c <__ssputs_r>:
 800910c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009110:	688e      	ldr	r6, [r1, #8]
 8009112:	461f      	mov	r7, r3
 8009114:	42be      	cmp	r6, r7
 8009116:	680b      	ldr	r3, [r1, #0]
 8009118:	4682      	mov	sl, r0
 800911a:	460c      	mov	r4, r1
 800911c:	4690      	mov	r8, r2
 800911e:	d82d      	bhi.n	800917c <__ssputs_r+0x70>
 8009120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009128:	d026      	beq.n	8009178 <__ssputs_r+0x6c>
 800912a:	6965      	ldr	r5, [r4, #20]
 800912c:	6909      	ldr	r1, [r1, #16]
 800912e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009132:	eba3 0901 	sub.w	r9, r3, r1
 8009136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800913a:	1c7b      	adds	r3, r7, #1
 800913c:	444b      	add	r3, r9
 800913e:	106d      	asrs	r5, r5, #1
 8009140:	429d      	cmp	r5, r3
 8009142:	bf38      	it	cc
 8009144:	461d      	movcc	r5, r3
 8009146:	0553      	lsls	r3, r2, #21
 8009148:	d527      	bpl.n	800919a <__ssputs_r+0x8e>
 800914a:	4629      	mov	r1, r5
 800914c:	f7ff ff52 	bl	8008ff4 <_malloc_r>
 8009150:	4606      	mov	r6, r0
 8009152:	b360      	cbz	r0, 80091ae <__ssputs_r+0xa2>
 8009154:	6921      	ldr	r1, [r4, #16]
 8009156:	464a      	mov	r2, r9
 8009158:	f000 fae8 	bl	800972c <memcpy>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	6126      	str	r6, [r4, #16]
 800916a:	6165      	str	r5, [r4, #20]
 800916c:	444e      	add	r6, r9
 800916e:	eba5 0509 	sub.w	r5, r5, r9
 8009172:	6026      	str	r6, [r4, #0]
 8009174:	60a5      	str	r5, [r4, #8]
 8009176:	463e      	mov	r6, r7
 8009178:	42be      	cmp	r6, r7
 800917a:	d900      	bls.n	800917e <__ssputs_r+0x72>
 800917c:	463e      	mov	r6, r7
 800917e:	6820      	ldr	r0, [r4, #0]
 8009180:	4632      	mov	r2, r6
 8009182:	4641      	mov	r1, r8
 8009184:	f000 faa8 	bl	80096d8 <memmove>
 8009188:	68a3      	ldr	r3, [r4, #8]
 800918a:	1b9b      	subs	r3, r3, r6
 800918c:	60a3      	str	r3, [r4, #8]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	4433      	add	r3, r6
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	2000      	movs	r0, #0
 8009196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919a:	462a      	mov	r2, r5
 800919c:	f000 fad4 	bl	8009748 <_realloc_r>
 80091a0:	4606      	mov	r6, r0
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d1e0      	bne.n	8009168 <__ssputs_r+0x5c>
 80091a6:	6921      	ldr	r1, [r4, #16]
 80091a8:	4650      	mov	r0, sl
 80091aa:	f7ff feb7 	bl	8008f1c <_free_r>
 80091ae:	230c      	movs	r3, #12
 80091b0:	f8ca 3000 	str.w	r3, [sl]
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	e7e9      	b.n	8009196 <__ssputs_r+0x8a>
	...

080091c4 <_svfiprintf_r>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	4698      	mov	r8, r3
 80091ca:	898b      	ldrh	r3, [r1, #12]
 80091cc:	061b      	lsls	r3, r3, #24
 80091ce:	b09d      	sub	sp, #116	@ 0x74
 80091d0:	4607      	mov	r7, r0
 80091d2:	460d      	mov	r5, r1
 80091d4:	4614      	mov	r4, r2
 80091d6:	d510      	bpl.n	80091fa <_svfiprintf_r+0x36>
 80091d8:	690b      	ldr	r3, [r1, #16]
 80091da:	b973      	cbnz	r3, 80091fa <_svfiprintf_r+0x36>
 80091dc:	2140      	movs	r1, #64	@ 0x40
 80091de:	f7ff ff09 	bl	8008ff4 <_malloc_r>
 80091e2:	6028      	str	r0, [r5, #0]
 80091e4:	6128      	str	r0, [r5, #16]
 80091e6:	b930      	cbnz	r0, 80091f6 <_svfiprintf_r+0x32>
 80091e8:	230c      	movs	r3, #12
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	b01d      	add	sp, #116	@ 0x74
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	2340      	movs	r3, #64	@ 0x40
 80091f8:	616b      	str	r3, [r5, #20]
 80091fa:	2300      	movs	r3, #0
 80091fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fe:	2320      	movs	r3, #32
 8009200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009204:	f8cd 800c 	str.w	r8, [sp, #12]
 8009208:	2330      	movs	r3, #48	@ 0x30
 800920a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093a8 <_svfiprintf_r+0x1e4>
 800920e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009212:	f04f 0901 	mov.w	r9, #1
 8009216:	4623      	mov	r3, r4
 8009218:	469a      	mov	sl, r3
 800921a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800921e:	b10a      	cbz	r2, 8009224 <_svfiprintf_r+0x60>
 8009220:	2a25      	cmp	r2, #37	@ 0x25
 8009222:	d1f9      	bne.n	8009218 <_svfiprintf_r+0x54>
 8009224:	ebba 0b04 	subs.w	fp, sl, r4
 8009228:	d00b      	beq.n	8009242 <_svfiprintf_r+0x7e>
 800922a:	465b      	mov	r3, fp
 800922c:	4622      	mov	r2, r4
 800922e:	4629      	mov	r1, r5
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff ff6b 	bl	800910c <__ssputs_r>
 8009236:	3001      	adds	r0, #1
 8009238:	f000 80a7 	beq.w	800938a <_svfiprintf_r+0x1c6>
 800923c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800923e:	445a      	add	r2, fp
 8009240:	9209      	str	r2, [sp, #36]	@ 0x24
 8009242:	f89a 3000 	ldrb.w	r3, [sl]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 809f 	beq.w	800938a <_svfiprintf_r+0x1c6>
 800924c:	2300      	movs	r3, #0
 800924e:	f04f 32ff 	mov.w	r2, #4294967295
 8009252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009256:	f10a 0a01 	add.w	sl, sl, #1
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	9307      	str	r3, [sp, #28]
 800925e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009262:	931a      	str	r3, [sp, #104]	@ 0x68
 8009264:	4654      	mov	r4, sl
 8009266:	2205      	movs	r2, #5
 8009268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926c:	484e      	ldr	r0, [pc, #312]	@ (80093a8 <_svfiprintf_r+0x1e4>)
 800926e:	f7f6 ffbf 	bl	80001f0 <memchr>
 8009272:	9a04      	ldr	r2, [sp, #16]
 8009274:	b9d8      	cbnz	r0, 80092ae <_svfiprintf_r+0xea>
 8009276:	06d0      	lsls	r0, r2, #27
 8009278:	bf44      	itt	mi
 800927a:	2320      	movmi	r3, #32
 800927c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009280:	0711      	lsls	r1, r2, #28
 8009282:	bf44      	itt	mi
 8009284:	232b      	movmi	r3, #43	@ 0x2b
 8009286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800928a:	f89a 3000 	ldrb.w	r3, [sl]
 800928e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009290:	d015      	beq.n	80092be <_svfiprintf_r+0xfa>
 8009292:	9a07      	ldr	r2, [sp, #28]
 8009294:	4654      	mov	r4, sl
 8009296:	2000      	movs	r0, #0
 8009298:	f04f 0c0a 	mov.w	ip, #10
 800929c:	4621      	mov	r1, r4
 800929e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a2:	3b30      	subs	r3, #48	@ 0x30
 80092a4:	2b09      	cmp	r3, #9
 80092a6:	d94b      	bls.n	8009340 <_svfiprintf_r+0x17c>
 80092a8:	b1b0      	cbz	r0, 80092d8 <_svfiprintf_r+0x114>
 80092aa:	9207      	str	r2, [sp, #28]
 80092ac:	e014      	b.n	80092d8 <_svfiprintf_r+0x114>
 80092ae:	eba0 0308 	sub.w	r3, r0, r8
 80092b2:	fa09 f303 	lsl.w	r3, r9, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	46a2      	mov	sl, r4
 80092bc:	e7d2      	b.n	8009264 <_svfiprintf_r+0xa0>
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	1d19      	adds	r1, r3, #4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	9103      	str	r1, [sp, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfbb      	ittet	lt
 80092ca:	425b      	neglt	r3, r3
 80092cc:	f042 0202 	orrlt.w	r2, r2, #2
 80092d0:	9307      	strge	r3, [sp, #28]
 80092d2:	9307      	strlt	r3, [sp, #28]
 80092d4:	bfb8      	it	lt
 80092d6:	9204      	strlt	r2, [sp, #16]
 80092d8:	7823      	ldrb	r3, [r4, #0]
 80092da:	2b2e      	cmp	r3, #46	@ 0x2e
 80092dc:	d10a      	bne.n	80092f4 <_svfiprintf_r+0x130>
 80092de:	7863      	ldrb	r3, [r4, #1]
 80092e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e2:	d132      	bne.n	800934a <_svfiprintf_r+0x186>
 80092e4:	9b03      	ldr	r3, [sp, #12]
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	9203      	str	r2, [sp, #12]
 80092ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092f0:	3402      	adds	r4, #2
 80092f2:	9305      	str	r3, [sp, #20]
 80092f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093b8 <_svfiprintf_r+0x1f4>
 80092f8:	7821      	ldrb	r1, [r4, #0]
 80092fa:	2203      	movs	r2, #3
 80092fc:	4650      	mov	r0, sl
 80092fe:	f7f6 ff77 	bl	80001f0 <memchr>
 8009302:	b138      	cbz	r0, 8009314 <_svfiprintf_r+0x150>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	eba0 000a 	sub.w	r0, r0, sl
 800930a:	2240      	movs	r2, #64	@ 0x40
 800930c:	4082      	lsls	r2, r0
 800930e:	4313      	orrs	r3, r2
 8009310:	3401      	adds	r4, #1
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009318:	4824      	ldr	r0, [pc, #144]	@ (80093ac <_svfiprintf_r+0x1e8>)
 800931a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800931e:	2206      	movs	r2, #6
 8009320:	f7f6 ff66 	bl	80001f0 <memchr>
 8009324:	2800      	cmp	r0, #0
 8009326:	d036      	beq.n	8009396 <_svfiprintf_r+0x1d2>
 8009328:	4b21      	ldr	r3, [pc, #132]	@ (80093b0 <_svfiprintf_r+0x1ec>)
 800932a:	bb1b      	cbnz	r3, 8009374 <_svfiprintf_r+0x1b0>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	3307      	adds	r3, #7
 8009330:	f023 0307 	bic.w	r3, r3, #7
 8009334:	3308      	adds	r3, #8
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933a:	4433      	add	r3, r6
 800933c:	9309      	str	r3, [sp, #36]	@ 0x24
 800933e:	e76a      	b.n	8009216 <_svfiprintf_r+0x52>
 8009340:	fb0c 3202 	mla	r2, ip, r2, r3
 8009344:	460c      	mov	r4, r1
 8009346:	2001      	movs	r0, #1
 8009348:	e7a8      	b.n	800929c <_svfiprintf_r+0xd8>
 800934a:	2300      	movs	r3, #0
 800934c:	3401      	adds	r4, #1
 800934e:	9305      	str	r3, [sp, #20]
 8009350:	4619      	mov	r1, r3
 8009352:	f04f 0c0a 	mov.w	ip, #10
 8009356:	4620      	mov	r0, r4
 8009358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800935c:	3a30      	subs	r2, #48	@ 0x30
 800935e:	2a09      	cmp	r2, #9
 8009360:	d903      	bls.n	800936a <_svfiprintf_r+0x1a6>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0c6      	beq.n	80092f4 <_svfiprintf_r+0x130>
 8009366:	9105      	str	r1, [sp, #20]
 8009368:	e7c4      	b.n	80092f4 <_svfiprintf_r+0x130>
 800936a:	fb0c 2101 	mla	r1, ip, r1, r2
 800936e:	4604      	mov	r4, r0
 8009370:	2301      	movs	r3, #1
 8009372:	e7f0      	b.n	8009356 <_svfiprintf_r+0x192>
 8009374:	ab03      	add	r3, sp, #12
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	462a      	mov	r2, r5
 800937a:	4b0e      	ldr	r3, [pc, #56]	@ (80093b4 <_svfiprintf_r+0x1f0>)
 800937c:	a904      	add	r1, sp, #16
 800937e:	4638      	mov	r0, r7
 8009380:	f3af 8000 	nop.w
 8009384:	1c42      	adds	r2, r0, #1
 8009386:	4606      	mov	r6, r0
 8009388:	d1d6      	bne.n	8009338 <_svfiprintf_r+0x174>
 800938a:	89ab      	ldrh	r3, [r5, #12]
 800938c:	065b      	lsls	r3, r3, #25
 800938e:	f53f af2d 	bmi.w	80091ec <_svfiprintf_r+0x28>
 8009392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009394:	e72c      	b.n	80091f0 <_svfiprintf_r+0x2c>
 8009396:	ab03      	add	r3, sp, #12
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	462a      	mov	r2, r5
 800939c:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <_svfiprintf_r+0x1f0>)
 800939e:	a904      	add	r1, sp, #16
 80093a0:	4638      	mov	r0, r7
 80093a2:	f000 f879 	bl	8009498 <_printf_i>
 80093a6:	e7ed      	b.n	8009384 <_svfiprintf_r+0x1c0>
 80093a8:	08009bf4 	.word	0x08009bf4
 80093ac:	08009bfe 	.word	0x08009bfe
 80093b0:	00000000 	.word	0x00000000
 80093b4:	0800910d 	.word	0x0800910d
 80093b8:	08009bfa 	.word	0x08009bfa

080093bc <_printf_common>:
 80093bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	4616      	mov	r6, r2
 80093c2:	4698      	mov	r8, r3
 80093c4:	688a      	ldr	r2, [r1, #8]
 80093c6:	690b      	ldr	r3, [r1, #16]
 80093c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093cc:	4293      	cmp	r3, r2
 80093ce:	bfb8      	it	lt
 80093d0:	4613      	movlt	r3, r2
 80093d2:	6033      	str	r3, [r6, #0]
 80093d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093d8:	4607      	mov	r7, r0
 80093da:	460c      	mov	r4, r1
 80093dc:	b10a      	cbz	r2, 80093e2 <_printf_common+0x26>
 80093de:	3301      	adds	r3, #1
 80093e0:	6033      	str	r3, [r6, #0]
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	0699      	lsls	r1, r3, #26
 80093e6:	bf42      	ittt	mi
 80093e8:	6833      	ldrmi	r3, [r6, #0]
 80093ea:	3302      	addmi	r3, #2
 80093ec:	6033      	strmi	r3, [r6, #0]
 80093ee:	6825      	ldr	r5, [r4, #0]
 80093f0:	f015 0506 	ands.w	r5, r5, #6
 80093f4:	d106      	bne.n	8009404 <_printf_common+0x48>
 80093f6:	f104 0a19 	add.w	sl, r4, #25
 80093fa:	68e3      	ldr	r3, [r4, #12]
 80093fc:	6832      	ldr	r2, [r6, #0]
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	42ab      	cmp	r3, r5
 8009402:	dc26      	bgt.n	8009452 <_printf_common+0x96>
 8009404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	3b00      	subs	r3, #0
 800940c:	bf18      	it	ne
 800940e:	2301      	movne	r3, #1
 8009410:	0692      	lsls	r2, r2, #26
 8009412:	d42b      	bmi.n	800946c <_printf_common+0xb0>
 8009414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009418:	4641      	mov	r1, r8
 800941a:	4638      	mov	r0, r7
 800941c:	47c8      	blx	r9
 800941e:	3001      	adds	r0, #1
 8009420:	d01e      	beq.n	8009460 <_printf_common+0xa4>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	6922      	ldr	r2, [r4, #16]
 8009426:	f003 0306 	and.w	r3, r3, #6
 800942a:	2b04      	cmp	r3, #4
 800942c:	bf02      	ittt	eq
 800942e:	68e5      	ldreq	r5, [r4, #12]
 8009430:	6833      	ldreq	r3, [r6, #0]
 8009432:	1aed      	subeq	r5, r5, r3
 8009434:	68a3      	ldr	r3, [r4, #8]
 8009436:	bf0c      	ite	eq
 8009438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800943c:	2500      	movne	r5, #0
 800943e:	4293      	cmp	r3, r2
 8009440:	bfc4      	itt	gt
 8009442:	1a9b      	subgt	r3, r3, r2
 8009444:	18ed      	addgt	r5, r5, r3
 8009446:	2600      	movs	r6, #0
 8009448:	341a      	adds	r4, #26
 800944a:	42b5      	cmp	r5, r6
 800944c:	d11a      	bne.n	8009484 <_printf_common+0xc8>
 800944e:	2000      	movs	r0, #0
 8009450:	e008      	b.n	8009464 <_printf_common+0xa8>
 8009452:	2301      	movs	r3, #1
 8009454:	4652      	mov	r2, sl
 8009456:	4641      	mov	r1, r8
 8009458:	4638      	mov	r0, r7
 800945a:	47c8      	blx	r9
 800945c:	3001      	adds	r0, #1
 800945e:	d103      	bne.n	8009468 <_printf_common+0xac>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009468:	3501      	adds	r5, #1
 800946a:	e7c6      	b.n	80093fa <_printf_common+0x3e>
 800946c:	18e1      	adds	r1, r4, r3
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	2030      	movs	r0, #48	@ 0x30
 8009472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009476:	4422      	add	r2, r4
 8009478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800947c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009480:	3302      	adds	r3, #2
 8009482:	e7c7      	b.n	8009414 <_printf_common+0x58>
 8009484:	2301      	movs	r3, #1
 8009486:	4622      	mov	r2, r4
 8009488:	4641      	mov	r1, r8
 800948a:	4638      	mov	r0, r7
 800948c:	47c8      	blx	r9
 800948e:	3001      	adds	r0, #1
 8009490:	d0e6      	beq.n	8009460 <_printf_common+0xa4>
 8009492:	3601      	adds	r6, #1
 8009494:	e7d9      	b.n	800944a <_printf_common+0x8e>
	...

08009498 <_printf_i>:
 8009498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800949c:	7e0f      	ldrb	r7, [r1, #24]
 800949e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094a0:	2f78      	cmp	r7, #120	@ 0x78
 80094a2:	4691      	mov	r9, r2
 80094a4:	4680      	mov	r8, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	469a      	mov	sl, r3
 80094aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094ae:	d807      	bhi.n	80094c0 <_printf_i+0x28>
 80094b0:	2f62      	cmp	r7, #98	@ 0x62
 80094b2:	d80a      	bhi.n	80094ca <_printf_i+0x32>
 80094b4:	2f00      	cmp	r7, #0
 80094b6:	f000 80d2 	beq.w	800965e <_printf_i+0x1c6>
 80094ba:	2f58      	cmp	r7, #88	@ 0x58
 80094bc:	f000 80b9 	beq.w	8009632 <_printf_i+0x19a>
 80094c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094c8:	e03a      	b.n	8009540 <_printf_i+0xa8>
 80094ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094ce:	2b15      	cmp	r3, #21
 80094d0:	d8f6      	bhi.n	80094c0 <_printf_i+0x28>
 80094d2:	a101      	add	r1, pc, #4	@ (adr r1, 80094d8 <_printf_i+0x40>)
 80094d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094d8:	08009531 	.word	0x08009531
 80094dc:	08009545 	.word	0x08009545
 80094e0:	080094c1 	.word	0x080094c1
 80094e4:	080094c1 	.word	0x080094c1
 80094e8:	080094c1 	.word	0x080094c1
 80094ec:	080094c1 	.word	0x080094c1
 80094f0:	08009545 	.word	0x08009545
 80094f4:	080094c1 	.word	0x080094c1
 80094f8:	080094c1 	.word	0x080094c1
 80094fc:	080094c1 	.word	0x080094c1
 8009500:	080094c1 	.word	0x080094c1
 8009504:	08009645 	.word	0x08009645
 8009508:	0800956f 	.word	0x0800956f
 800950c:	080095ff 	.word	0x080095ff
 8009510:	080094c1 	.word	0x080094c1
 8009514:	080094c1 	.word	0x080094c1
 8009518:	08009667 	.word	0x08009667
 800951c:	080094c1 	.word	0x080094c1
 8009520:	0800956f 	.word	0x0800956f
 8009524:	080094c1 	.word	0x080094c1
 8009528:	080094c1 	.word	0x080094c1
 800952c:	08009607 	.word	0x08009607
 8009530:	6833      	ldr	r3, [r6, #0]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6032      	str	r2, [r6, #0]
 8009538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800953c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009540:	2301      	movs	r3, #1
 8009542:	e09d      	b.n	8009680 <_printf_i+0x1e8>
 8009544:	6833      	ldr	r3, [r6, #0]
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	1d19      	adds	r1, r3, #4
 800954a:	6031      	str	r1, [r6, #0]
 800954c:	0606      	lsls	r6, r0, #24
 800954e:	d501      	bpl.n	8009554 <_printf_i+0xbc>
 8009550:	681d      	ldr	r5, [r3, #0]
 8009552:	e003      	b.n	800955c <_printf_i+0xc4>
 8009554:	0645      	lsls	r5, r0, #25
 8009556:	d5fb      	bpl.n	8009550 <_printf_i+0xb8>
 8009558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800955c:	2d00      	cmp	r5, #0
 800955e:	da03      	bge.n	8009568 <_printf_i+0xd0>
 8009560:	232d      	movs	r3, #45	@ 0x2d
 8009562:	426d      	negs	r5, r5
 8009564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009568:	4859      	ldr	r0, [pc, #356]	@ (80096d0 <_printf_i+0x238>)
 800956a:	230a      	movs	r3, #10
 800956c:	e011      	b.n	8009592 <_printf_i+0xfa>
 800956e:	6821      	ldr	r1, [r4, #0]
 8009570:	6833      	ldr	r3, [r6, #0]
 8009572:	0608      	lsls	r0, r1, #24
 8009574:	f853 5b04 	ldr.w	r5, [r3], #4
 8009578:	d402      	bmi.n	8009580 <_printf_i+0xe8>
 800957a:	0649      	lsls	r1, r1, #25
 800957c:	bf48      	it	mi
 800957e:	b2ad      	uxthmi	r5, r5
 8009580:	2f6f      	cmp	r7, #111	@ 0x6f
 8009582:	4853      	ldr	r0, [pc, #332]	@ (80096d0 <_printf_i+0x238>)
 8009584:	6033      	str	r3, [r6, #0]
 8009586:	bf14      	ite	ne
 8009588:	230a      	movne	r3, #10
 800958a:	2308      	moveq	r3, #8
 800958c:	2100      	movs	r1, #0
 800958e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009592:	6866      	ldr	r6, [r4, #4]
 8009594:	60a6      	str	r6, [r4, #8]
 8009596:	2e00      	cmp	r6, #0
 8009598:	bfa2      	ittt	ge
 800959a:	6821      	ldrge	r1, [r4, #0]
 800959c:	f021 0104 	bicge.w	r1, r1, #4
 80095a0:	6021      	strge	r1, [r4, #0]
 80095a2:	b90d      	cbnz	r5, 80095a8 <_printf_i+0x110>
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	d04b      	beq.n	8009640 <_printf_i+0x1a8>
 80095a8:	4616      	mov	r6, r2
 80095aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80095ae:	fb03 5711 	mls	r7, r3, r1, r5
 80095b2:	5dc7      	ldrb	r7, [r0, r7]
 80095b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095b8:	462f      	mov	r7, r5
 80095ba:	42bb      	cmp	r3, r7
 80095bc:	460d      	mov	r5, r1
 80095be:	d9f4      	bls.n	80095aa <_printf_i+0x112>
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d10b      	bne.n	80095dc <_printf_i+0x144>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	07df      	lsls	r7, r3, #31
 80095c8:	d508      	bpl.n	80095dc <_printf_i+0x144>
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	6861      	ldr	r1, [r4, #4]
 80095ce:	4299      	cmp	r1, r3
 80095d0:	bfde      	ittt	le
 80095d2:	2330      	movle	r3, #48	@ 0x30
 80095d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095dc:	1b92      	subs	r2, r2, r6
 80095de:	6122      	str	r2, [r4, #16]
 80095e0:	f8cd a000 	str.w	sl, [sp]
 80095e4:	464b      	mov	r3, r9
 80095e6:	aa03      	add	r2, sp, #12
 80095e8:	4621      	mov	r1, r4
 80095ea:	4640      	mov	r0, r8
 80095ec:	f7ff fee6 	bl	80093bc <_printf_common>
 80095f0:	3001      	adds	r0, #1
 80095f2:	d14a      	bne.n	800968a <_printf_i+0x1f2>
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	b004      	add	sp, #16
 80095fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	f043 0320 	orr.w	r3, r3, #32
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	4833      	ldr	r0, [pc, #204]	@ (80096d4 <_printf_i+0x23c>)
 8009608:	2778      	movs	r7, #120	@ 0x78
 800960a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	6831      	ldr	r1, [r6, #0]
 8009612:	061f      	lsls	r7, r3, #24
 8009614:	f851 5b04 	ldr.w	r5, [r1], #4
 8009618:	d402      	bmi.n	8009620 <_printf_i+0x188>
 800961a:	065f      	lsls	r7, r3, #25
 800961c:	bf48      	it	mi
 800961e:	b2ad      	uxthmi	r5, r5
 8009620:	6031      	str	r1, [r6, #0]
 8009622:	07d9      	lsls	r1, r3, #31
 8009624:	bf44      	itt	mi
 8009626:	f043 0320 	orrmi.w	r3, r3, #32
 800962a:	6023      	strmi	r3, [r4, #0]
 800962c:	b11d      	cbz	r5, 8009636 <_printf_i+0x19e>
 800962e:	2310      	movs	r3, #16
 8009630:	e7ac      	b.n	800958c <_printf_i+0xf4>
 8009632:	4827      	ldr	r0, [pc, #156]	@ (80096d0 <_printf_i+0x238>)
 8009634:	e7e9      	b.n	800960a <_printf_i+0x172>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	f023 0320 	bic.w	r3, r3, #32
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	e7f6      	b.n	800962e <_printf_i+0x196>
 8009640:	4616      	mov	r6, r2
 8009642:	e7bd      	b.n	80095c0 <_printf_i+0x128>
 8009644:	6833      	ldr	r3, [r6, #0]
 8009646:	6825      	ldr	r5, [r4, #0]
 8009648:	6961      	ldr	r1, [r4, #20]
 800964a:	1d18      	adds	r0, r3, #4
 800964c:	6030      	str	r0, [r6, #0]
 800964e:	062e      	lsls	r6, r5, #24
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	d501      	bpl.n	8009658 <_printf_i+0x1c0>
 8009654:	6019      	str	r1, [r3, #0]
 8009656:	e002      	b.n	800965e <_printf_i+0x1c6>
 8009658:	0668      	lsls	r0, r5, #25
 800965a:	d5fb      	bpl.n	8009654 <_printf_i+0x1bc>
 800965c:	8019      	strh	r1, [r3, #0]
 800965e:	2300      	movs	r3, #0
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	4616      	mov	r6, r2
 8009664:	e7bc      	b.n	80095e0 <_printf_i+0x148>
 8009666:	6833      	ldr	r3, [r6, #0]
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	6032      	str	r2, [r6, #0]
 800966c:	681e      	ldr	r6, [r3, #0]
 800966e:	6862      	ldr	r2, [r4, #4]
 8009670:	2100      	movs	r1, #0
 8009672:	4630      	mov	r0, r6
 8009674:	f7f6 fdbc 	bl	80001f0 <memchr>
 8009678:	b108      	cbz	r0, 800967e <_printf_i+0x1e6>
 800967a:	1b80      	subs	r0, r0, r6
 800967c:	6060      	str	r0, [r4, #4]
 800967e:	6863      	ldr	r3, [r4, #4]
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	2300      	movs	r3, #0
 8009684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009688:	e7aa      	b.n	80095e0 <_printf_i+0x148>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	4632      	mov	r2, r6
 800968e:	4649      	mov	r1, r9
 8009690:	4640      	mov	r0, r8
 8009692:	47d0      	blx	sl
 8009694:	3001      	adds	r0, #1
 8009696:	d0ad      	beq.n	80095f4 <_printf_i+0x15c>
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	079b      	lsls	r3, r3, #30
 800969c:	d413      	bmi.n	80096c6 <_printf_i+0x22e>
 800969e:	68e0      	ldr	r0, [r4, #12]
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	4298      	cmp	r0, r3
 80096a4:	bfb8      	it	lt
 80096a6:	4618      	movlt	r0, r3
 80096a8:	e7a6      	b.n	80095f8 <_printf_i+0x160>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4632      	mov	r2, r6
 80096ae:	4649      	mov	r1, r9
 80096b0:	4640      	mov	r0, r8
 80096b2:	47d0      	blx	sl
 80096b4:	3001      	adds	r0, #1
 80096b6:	d09d      	beq.n	80095f4 <_printf_i+0x15c>
 80096b8:	3501      	adds	r5, #1
 80096ba:	68e3      	ldr	r3, [r4, #12]
 80096bc:	9903      	ldr	r1, [sp, #12]
 80096be:	1a5b      	subs	r3, r3, r1
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	dcf2      	bgt.n	80096aa <_printf_i+0x212>
 80096c4:	e7eb      	b.n	800969e <_printf_i+0x206>
 80096c6:	2500      	movs	r5, #0
 80096c8:	f104 0619 	add.w	r6, r4, #25
 80096cc:	e7f5      	b.n	80096ba <_printf_i+0x222>
 80096ce:	bf00      	nop
 80096d0:	08009c05 	.word	0x08009c05
 80096d4:	08009c16 	.word	0x08009c16

080096d8 <memmove>:
 80096d8:	4288      	cmp	r0, r1
 80096da:	b510      	push	{r4, lr}
 80096dc:	eb01 0402 	add.w	r4, r1, r2
 80096e0:	d902      	bls.n	80096e8 <memmove+0x10>
 80096e2:	4284      	cmp	r4, r0
 80096e4:	4623      	mov	r3, r4
 80096e6:	d807      	bhi.n	80096f8 <memmove+0x20>
 80096e8:	1e43      	subs	r3, r0, #1
 80096ea:	42a1      	cmp	r1, r4
 80096ec:	d008      	beq.n	8009700 <memmove+0x28>
 80096ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096f6:	e7f8      	b.n	80096ea <memmove+0x12>
 80096f8:	4402      	add	r2, r0
 80096fa:	4601      	mov	r1, r0
 80096fc:	428a      	cmp	r2, r1
 80096fe:	d100      	bne.n	8009702 <memmove+0x2a>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970a:	e7f7      	b.n	80096fc <memmove+0x24>

0800970c <_sbrk_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d06      	ldr	r5, [pc, #24]	@ (8009728 <_sbrk_r+0x1c>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	f7f8 faa8 	bl	8001c6c <_sbrk>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_sbrk_r+0x1a>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_sbrk_r+0x1a>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	20000528 	.word	0x20000528

0800972c <memcpy>:
 800972c:	440a      	add	r2, r1
 800972e:	4291      	cmp	r1, r2
 8009730:	f100 33ff 	add.w	r3, r0, #4294967295
 8009734:	d100      	bne.n	8009738 <memcpy+0xc>
 8009736:	4770      	bx	lr
 8009738:	b510      	push	{r4, lr}
 800973a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009742:	4291      	cmp	r1, r2
 8009744:	d1f9      	bne.n	800973a <memcpy+0xe>
 8009746:	bd10      	pop	{r4, pc}

08009748 <_realloc_r>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4680      	mov	r8, r0
 800974e:	4615      	mov	r5, r2
 8009750:	460c      	mov	r4, r1
 8009752:	b921      	cbnz	r1, 800975e <_realloc_r+0x16>
 8009754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009758:	4611      	mov	r1, r2
 800975a:	f7ff bc4b 	b.w	8008ff4 <_malloc_r>
 800975e:	b92a      	cbnz	r2, 800976c <_realloc_r+0x24>
 8009760:	f7ff fbdc 	bl	8008f1c <_free_r>
 8009764:	2400      	movs	r4, #0
 8009766:	4620      	mov	r0, r4
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	f000 f81a 	bl	80097a4 <_malloc_usable_size_r>
 8009770:	4285      	cmp	r5, r0
 8009772:	4606      	mov	r6, r0
 8009774:	d802      	bhi.n	800977c <_realloc_r+0x34>
 8009776:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800977a:	d8f4      	bhi.n	8009766 <_realloc_r+0x1e>
 800977c:	4629      	mov	r1, r5
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fc38 	bl	8008ff4 <_malloc_r>
 8009784:	4607      	mov	r7, r0
 8009786:	2800      	cmp	r0, #0
 8009788:	d0ec      	beq.n	8009764 <_realloc_r+0x1c>
 800978a:	42b5      	cmp	r5, r6
 800978c:	462a      	mov	r2, r5
 800978e:	4621      	mov	r1, r4
 8009790:	bf28      	it	cs
 8009792:	4632      	movcs	r2, r6
 8009794:	f7ff ffca 	bl	800972c <memcpy>
 8009798:	4621      	mov	r1, r4
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fbbe 	bl	8008f1c <_free_r>
 80097a0:	463c      	mov	r4, r7
 80097a2:	e7e0      	b.n	8009766 <_realloc_r+0x1e>

080097a4 <_malloc_usable_size_r>:
 80097a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a8:	1f18      	subs	r0, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfbc      	itt	lt
 80097ae:	580b      	ldrlt	r3, [r1, r0]
 80097b0:	18c0      	addlt	r0, r0, r3
 80097b2:	4770      	bx	lr

080097b4 <_init>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr

080097c0 <_fini>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr
