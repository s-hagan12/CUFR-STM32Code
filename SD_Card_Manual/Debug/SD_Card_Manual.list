
SD_Card_Manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  00007090  2**0
                  CONTENTS
  4 .ARM          00000008  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005010  08005010  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005018  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007090  2**0
                  CONTENTS
 10 .bss          00000370  20000090  20000090  00007090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  00007090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ace1  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001857  00000000  00000000  00011da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  000135f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069b  00000000  00000000  00013e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020140  00000000  00000000  00014523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c369  00000000  00000000  00034663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2531  00000000  00000000  000409cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102efd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002780  00000000  00000000  00102f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001056c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ea8 	.word	0x08004ea8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08004ea8 	.word	0x08004ea8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
int acdm55(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	@ (80002d4 <myprintf+0x44>)
 80002a8:	f004 f970 	bl	800458c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	@ (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	@ (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	@ (80002d8 <myprintf+0x48>)
 80002c2:	f003 fcbf 	bl	8003c44 <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	200001b0 	.word	0x200001b0
 80002d8:	20000110 	.word	0x20000110

080002dc <acdm55>:

int acdm55(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80002e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002e6:	2201      	movs	r2, #1
 80002e8:	4976      	ldr	r1, [pc, #472]	@ (80004c4 <acdm55+0x1e8>)
 80002ea:	4877      	ldr	r0, [pc, #476]	@ (80004c8 <acdm55+0x1ec>)
 80002ec:	f002 fdd1 	bl	8002e92 <HAL_SPI_Transmit>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b75      	ldr	r3, [pc, #468]	@ (80004cc <acdm55+0x1f0>)
 80002f6:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80002f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002fc:	2201      	movs	r2, #1
 80002fe:	4971      	ldr	r1, [pc, #452]	@ (80004c4 <acdm55+0x1e8>)
 8000300:	4871      	ldr	r0, [pc, #452]	@ (80004c8 <acdm55+0x1ec>)
 8000302:	f002 fdc6 	bl	8002e92 <HAL_SPI_Transmit>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	4b70      	ldr	r3, [pc, #448]	@ (80004cc <acdm55+0x1f0>)
 800030c:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD55, 6, 1000); //Sending in Blocking mode
 800030e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000312:	2206      	movs	r2, #6
 8000314:	496e      	ldr	r1, [pc, #440]	@ (80004d0 <acdm55+0x1f4>)
 8000316:	486c      	ldr	r0, [pc, #432]	@ (80004c8 <acdm55+0x1ec>)
 8000318:	f002 fdbb 	bl	8002e92 <HAL_SPI_Transmit>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b6a      	ldr	r3, [pc, #424]	@ (80004cc <acdm55+0x1f0>)
 8000322:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8000324:	200a      	movs	r0, #10
 8000326:	f000 fdb3 	bl	8000e90 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, CMD55_Response, 2, 1000);
 800032a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800032e:	2202      	movs	r2, #2
 8000330:	4968      	ldr	r1, [pc, #416]	@ (80004d4 <acdm55+0x1f8>)
 8000332:	4865      	ldr	r0, [pc, #404]	@ (80004c8 <acdm55+0x1ec>)
 8000334:	f002 ff22 	bl	800317c <HAL_SPI_Receive>
		//HAL_Delay(1000);
		count = 0;
 8000338:	4b67      	ldr	r3, [pc, #412]	@ (80004d8 <acdm55+0x1fc>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		while(count < 20 && CMD55_Response[0] != 0x0 && CMD55_Response[1] != 0x1){
 800033e:	e02d      	b.n	800039c <acdm55+0xc0>
				count++;
 8000340:	4b65      	ldr	r3, [pc, #404]	@ (80004d8 <acdm55+0x1fc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	4a64      	ldr	r2, [pc, #400]	@ (80004d8 <acdm55+0x1fc>)
 8000348:	6013      	str	r3, [r2, #0]
				for(int i = 0; i<2; i++){
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e00a      	b.n	8000366 <acdm55+0x8a>
							  myprintf("(%x)", CMD55_Response[i]);
 8000350:	4a60      	ldr	r2, [pc, #384]	@ (80004d4 <acdm55+0x1f8>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4860      	ldr	r0, [pc, #384]	@ (80004dc <acdm55+0x200>)
 800035c:	f7ff ff98 	bl	8000290 <myprintf>
				for(int i = 0; i<2; i++){
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b01      	cmp	r3, #1
 800036a:	ddf1      	ble.n	8000350 <acdm55+0x74>
						  }
				myprintf("\r\n");
 800036c:	485c      	ldr	r0, [pc, #368]	@ (80004e0 <acdm55+0x204>)
 800036e:	f7ff ff8f 	bl	8000290 <myprintf>
			  ok_notok = HAL_SPI_Transmit(&hspi2, CMD55, 6, 1000); //Sending in Blocking mode
 8000372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000376:	2206      	movs	r2, #6
 8000378:	4955      	ldr	r1, [pc, #340]	@ (80004d0 <acdm55+0x1f4>)
 800037a:	4853      	ldr	r0, [pc, #332]	@ (80004c8 <acdm55+0x1ec>)
 800037c:	f002 fd89 	bl	8002e92 <HAL_SPI_Transmit>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b51      	ldr	r3, [pc, #324]	@ (80004cc <acdm55+0x1f0>)
 8000386:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(10);
 8000388:	200a      	movs	r0, #10
 800038a:	f000 fd81 	bl	8000e90 <HAL_Delay>
			  HAL_SPI_Receive(&hspi2, CMD55_Response, 2, 1000);
 800038e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000392:	2202      	movs	r2, #2
 8000394:	494f      	ldr	r1, [pc, #316]	@ (80004d4 <acdm55+0x1f8>)
 8000396:	484c      	ldr	r0, [pc, #304]	@ (80004c8 <acdm55+0x1ec>)
 8000398:	f002 fef0 	bl	800317c <HAL_SPI_Receive>
		while(count < 20 && CMD55_Response[0] != 0x0 && CMD55_Response[1] != 0x1){
 800039c:	4b4e      	ldr	r3, [pc, #312]	@ (80004d8 <acdm55+0x1fc>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b13      	cmp	r3, #19
 80003a2:	dc07      	bgt.n	80003b4 <acdm55+0xd8>
 80003a4:	4b4b      	ldr	r3, [pc, #300]	@ (80004d4 <acdm55+0x1f8>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <acdm55+0xd8>
 80003ac:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <acdm55+0x1f8>)
 80003ae:	785b      	ldrb	r3, [r3, #1]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d1c5      	bne.n	8000340 <acdm55+0x64>
		}
		if(count == 20){
 80003b4:	4b48      	ldr	r3, [pc, #288]	@ (80004d8 <acdm55+0x1fc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b14      	cmp	r3, #20
 80003ba:	d101      	bne.n	80003c0 <acdm55+0xe4>
			//myprintf("CMD 55 Timeout \r\n");
				return 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	e07d      	b.n	80004bc <acdm55+0x1e0>
			}
		myprintf("CMD55: ");
 80003c0:	4848      	ldr	r0, [pc, #288]	@ (80004e4 <acdm55+0x208>)
 80003c2:	f7ff ff65 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	e00a      	b.n	80003e2 <acdm55+0x106>
				  myprintf("(%x)", CMD55_Response[i]);
 80003cc:	4a41      	ldr	r2, [pc, #260]	@ (80004d4 <acdm55+0x1f8>)
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4841      	ldr	r0, [pc, #260]	@ (80004dc <acdm55+0x200>)
 80003d8:	f7ff ff5a 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3301      	adds	r3, #1
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	ddf1      	ble.n	80003cc <acdm55+0xf0>
			  }
		myprintf("\r\n");
 80003e8:	483d      	ldr	r0, [pc, #244]	@ (80004e0 <acdm55+0x204>)
 80003ea:	f7ff ff51 	bl	8000290 <myprintf>
		ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80003ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003f2:	2201      	movs	r2, #1
 80003f4:	4933      	ldr	r1, [pc, #204]	@ (80004c4 <acdm55+0x1e8>)
 80003f6:	4834      	ldr	r0, [pc, #208]	@ (80004c8 <acdm55+0x1ec>)
 80003f8:	f002 fd4b 	bl	8002e92 <HAL_SPI_Transmit>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b32      	ldr	r3, [pc, #200]	@ (80004cc <acdm55+0x1f0>)
 8000402:	701a      	strb	r2, [r3, #0]
		ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 8000404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000408:	2201      	movs	r2, #1
 800040a:	492e      	ldr	r1, [pc, #184]	@ (80004c4 <acdm55+0x1e8>)
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <acdm55+0x1ec>)
 800040e:	f002 fd40 	bl	8002e92 <HAL_SPI_Transmit>
 8000412:	4603      	mov	r3, r0
 8000414:	461a      	mov	r2, r3
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <acdm55+0x1f0>)
 8000418:	701a      	strb	r2, [r3, #0]
		//ACMD41
		ok_notok = HAL_SPI_Transmit(&hspi2, ACMD41, 6, 1000); //Sending in Blocking mode
 800041a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800041e:	2206      	movs	r2, #6
 8000420:	4931      	ldr	r1, [pc, #196]	@ (80004e8 <acdm55+0x20c>)
 8000422:	4829      	ldr	r0, [pc, #164]	@ (80004c8 <acdm55+0x1ec>)
 8000424:	f002 fd35 	bl	8002e92 <HAL_SPI_Transmit>
 8000428:	4603      	mov	r3, r0
 800042a:	461a      	mov	r2, r3
 800042c:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <acdm55+0x1f0>)
 800042e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	@ 0x64
 8000432:	f000 fd2d 	bl	8000e90 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, ACMD41_Response, 2, 1000);
 8000436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043a:	2202      	movs	r2, #2
 800043c:	492b      	ldr	r1, [pc, #172]	@ (80004ec <acdm55+0x210>)
 800043e:	4822      	ldr	r0, [pc, #136]	@ (80004c8 <acdm55+0x1ec>)
 8000440:	f002 fe9c 	bl	800317c <HAL_SPI_Receive>
		count = 0;
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <acdm55+0x1fc>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
		if(ACMD41_Response[0] != 0x0 && ACMD41_Response[1] != 0x0)
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <acdm55+0x210>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d01c      	beq.n	800048c <acdm55+0x1b0>
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <acdm55+0x210>)
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d018      	beq.n	800048c <acdm55+0x1b0>
		{
			myprintf("ACMD41 Fail once: ");
 800045a:	4825      	ldr	r0, [pc, #148]	@ (80004f0 <acdm55+0x214>)
 800045c:	f7ff ff18 	bl	8000290 <myprintf>
			for(int i = 0; i<2; i++){
 8000460:	2300      	movs	r3, #0
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	e00a      	b.n	800047c <acdm55+0x1a0>
				myprintf("(%x)", ACMD41_Response[i]);
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <acdm55+0x210>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4413      	add	r3, r2
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	481a      	ldr	r0, [pc, #104]	@ (80004dc <acdm55+0x200>)
 8000472:	f7ff ff0d 	bl	8000290 <myprintf>
			for(int i = 0; i<2; i++){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3301      	adds	r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b01      	cmp	r3, #1
 8000480:	ddf1      	ble.n	8000466 <acdm55+0x18a>
			}
			myprintf("\r\n");
 8000482:	4817      	ldr	r0, [pc, #92]	@ (80004e0 <acdm55+0x204>)
 8000484:	f7ff ff04 	bl	8000290 <myprintf>
			return 0;
 8000488:	2300      	movs	r3, #0
 800048a:	e017      	b.n	80004bc <acdm55+0x1e0>
		}
		myprintf("ACMD41: ");
 800048c:	4819      	ldr	r0, [pc, #100]	@ (80004f4 <acdm55+0x218>)
 800048e:	f7ff feff 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 8000492:	2300      	movs	r3, #0
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	e00a      	b.n	80004ae <acdm55+0x1d2>
				  myprintf("(%x)", ACMD41_Response[i]);
 8000498:	4a14      	ldr	r2, [pc, #80]	@ (80004ec <acdm55+0x210>)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	4413      	add	r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	480e      	ldr	r0, [pc, #56]	@ (80004dc <acdm55+0x200>)
 80004a4:	f7ff fef4 	bl	8000290 <myprintf>
		for(int i = 0; i<2; i++){
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	ddf1      	ble.n	8000498 <acdm55+0x1bc>
			  }
		myprintf("\r\n");
 80004b4:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <acdm55+0x204>)
 80004b6:	f7ff feeb 	bl	8000290 <myprintf>
		return 1;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000030 	.word	0x20000030
 80004c8:	200000ac 	.word	0x200000ac
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000020 	.word	0x20000020
 80004d4:	200001a4 	.word	0x200001a4
 80004d8:	200001ac 	.word	0x200001ac
 80004dc:	08004ec0 	.word	0x08004ec0
 80004e0:	08004ec8 	.word	0x08004ec8
 80004e4:	08004ecc 	.word	0x08004ecc
 80004e8:	20000028 	.word	0x20000028
 80004ec:	200001a8 	.word	0x200001a8
 80004f0:	08004ed4 	.word	0x08004ed4
 80004f4:	08004ee8 	.word	0x08004ee8

080004f8 <configure_sd>:

void configure_sd(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	48ac      	ldr	r0, [pc, #688]	@ (80007b4 <configure_sd+0x2bc>)
 8000504:	f000 ff70 	bl	80013e8 <HAL_GPIO_WritePin>
	ok_notok = HAL_SPI_Transmit(&hspi2, high, 10, 1000); //Sending in Blocking mode
 8000508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050c:	220a      	movs	r2, #10
 800050e:	49aa      	ldr	r1, [pc, #680]	@ (80007b8 <configure_sd+0x2c0>)
 8000510:	48aa      	ldr	r0, [pc, #680]	@ (80007bc <configure_sd+0x2c4>)
 8000512:	f002 fcbe 	bl	8002e92 <HAL_SPI_Transmit>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4ba9      	ldr	r3, [pc, #676]	@ (80007c0 <configure_sd+0x2c8>)
 800051c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	48a4      	ldr	r0, [pc, #656]	@ (80007b4 <configure_sd+0x2bc>)
 8000524:	f000 ff60 	bl	80013e8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
	//		  ok_notok = HAL_UART_Transmit(&huart2, (uint8_t *)hw, len, 100);

	//CMD0:
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD0, 6, 1000); //Sending in Blocking mode
 8000528:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052c:	2206      	movs	r2, #6
 800052e:	49a5      	ldr	r1, [pc, #660]	@ (80007c4 <configure_sd+0x2cc>)
 8000530:	48a2      	ldr	r0, [pc, #648]	@ (80007bc <configure_sd+0x2c4>)
 8000532:	f002 fcae 	bl	8002e92 <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4ba1      	ldr	r3, [pc, #644]	@ (80007c0 <configure_sd+0x2c8>)
 800053c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800053e:	2064      	movs	r0, #100	@ 0x64
 8000540:	f000 fca6 	bl	8000e90 <HAL_Delay>
	HAL_SPI_Receive(&hspi2, CMD0_Response, 2, 1000);
 8000544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000548:	2202      	movs	r2, #2
 800054a:	499f      	ldr	r1, [pc, #636]	@ (80007c8 <configure_sd+0x2d0>)
 800054c:	489b      	ldr	r0, [pc, #620]	@ (80007bc <configure_sd+0x2c4>)
 800054e:	f002 fe15 	bl	800317c <HAL_SPI_Receive>
	count = 0;
 8000552:	4b9e      	ldr	r3, [pc, #632]	@ (80007cc <configure_sd+0x2d4>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	while(CMD0_Response[1] != 0x1 && count < 20){
 8000558:	e01c      	b.n	8000594 <configure_sd+0x9c>
	  count++;
 800055a:	4b9c      	ldr	r3, [pc, #624]	@ (80007cc <configure_sd+0x2d4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a9a      	ldr	r2, [pc, #616]	@ (80007cc <configure_sd+0x2d4>)
 8000562:	6013      	str	r3, [r2, #0]
	  myprintf("0 Failed once: \r\n");
 8000564:	489a      	ldr	r0, [pc, #616]	@ (80007d0 <configure_sd+0x2d8>)
 8000566:	f7ff fe93 	bl	8000290 <myprintf>
	  ok_notok = HAL_SPI_Transmit(&hspi2, CMD0, 6, 1000); //Sending in Blocking mode
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	2206      	movs	r2, #6
 8000570:	4994      	ldr	r1, [pc, #592]	@ (80007c4 <configure_sd+0x2cc>)
 8000572:	4892      	ldr	r0, [pc, #584]	@ (80007bc <configure_sd+0x2c4>)
 8000574:	f002 fc8d 	bl	8002e92 <HAL_SPI_Transmit>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b90      	ldr	r3, [pc, #576]	@ (80007c0 <configure_sd+0x2c8>)
 800057e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f000 fc85 	bl	8000e90 <HAL_Delay>
	  HAL_SPI_Receive(&hspi2, CMD0_Response, 2, 1000);
 8000586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800058a:	2202      	movs	r2, #2
 800058c:	498e      	ldr	r1, [pc, #568]	@ (80007c8 <configure_sd+0x2d0>)
 800058e:	488b      	ldr	r0, [pc, #556]	@ (80007bc <configure_sd+0x2c4>)
 8000590:	f002 fdf4 	bl	800317c <HAL_SPI_Receive>
	while(CMD0_Response[1] != 0x1 && count < 20){
 8000594:	4b8c      	ldr	r3, [pc, #560]	@ (80007c8 <configure_sd+0x2d0>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d003      	beq.n	80005a4 <configure_sd+0xac>
 800059c:	4b8b      	ldr	r3, [pc, #556]	@ (80007cc <configure_sd+0x2d4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b13      	cmp	r3, #19
 80005a2:	ddda      	ble.n	800055a <configure_sd+0x62>
	}
	if(count == 20){
 80005a4:	4b89      	ldr	r3, [pc, #548]	@ (80007cc <configure_sd+0x2d4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b14      	cmp	r3, #20
 80005aa:	d103      	bne.n	80005b4 <configure_sd+0xbc>
		myprintf("Timeout \r\n");
 80005ac:	4889      	ldr	r0, [pc, #548]	@ (80007d4 <configure_sd+0x2dc>)
 80005ae:	f7ff fe6f 	bl	8000290 <myprintf>
		return;
 80005b2:	e0fb      	b.n	80007ac <configure_sd+0x2b4>
	}
	myprintf("CMD0: ");
 80005b4:	4888      	ldr	r0, [pc, #544]	@ (80007d8 <configure_sd+0x2e0>)
 80005b6:	f7ff fe6b 	bl	8000290 <myprintf>
	for(int i = 0; i<2; i++){
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e00a      	b.n	80005d6 <configure_sd+0xde>
			  myprintf("(%x)", CMD0_Response[i]);
 80005c0:	4a81      	ldr	r2, [pc, #516]	@ (80007c8 <configure_sd+0x2d0>)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4884      	ldr	r0, [pc, #528]	@ (80007dc <configure_sd+0x2e4>)
 80005cc:	f7ff fe60 	bl	8000290 <myprintf>
	for(int i = 0; i<2; i++){
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	ddf1      	ble.n	80005c0 <configure_sd+0xc8>
		  }
	myprintf("\r\n");
 80005dc:	4880      	ldr	r0, [pc, #512]	@ (80007e0 <configure_sd+0x2e8>)
 80005de:	f7ff fe57 	bl	8000290 <myprintf>
	//HAL_Delay(100);
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80005e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e6:	2201      	movs	r2, #1
 80005e8:	497e      	ldr	r1, [pc, #504]	@ (80007e4 <configure_sd+0x2ec>)
 80005ea:	4874      	ldr	r0, [pc, #464]	@ (80007bc <configure_sd+0x2c4>)
 80005ec:	f002 fc51 	bl	8002e92 <HAL_SPI_Transmit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b72      	ldr	r3, [pc, #456]	@ (80007c0 <configure_sd+0x2c8>)
 80005f6:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80005f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fc:	2201      	movs	r2, #1
 80005fe:	4979      	ldr	r1, [pc, #484]	@ (80007e4 <configure_sd+0x2ec>)
 8000600:	486e      	ldr	r0, [pc, #440]	@ (80007bc <configure_sd+0x2c4>)
 8000602:	f002 fc46 	bl	8002e92 <HAL_SPI_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b6d      	ldr	r3, [pc, #436]	@ (80007c0 <configure_sd+0x2c8>)
 800060c:	701a      	strb	r2, [r3, #0]

	//CMD8:
	ok_notok = HAL_SPI_Transmit(&hspi2, CMD8, 6, 1000); //Sending in Blocking mode
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	2206      	movs	r2, #6
 8000614:	4974      	ldr	r1, [pc, #464]	@ (80007e8 <configure_sd+0x2f0>)
 8000616:	4869      	ldr	r0, [pc, #420]	@ (80007bc <configure_sd+0x2c4>)
 8000618:	f002 fc3b 	bl	8002e92 <HAL_SPI_Transmit>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b67      	ldr	r3, [pc, #412]	@ (80007c0 <configure_sd+0x2c8>)
 8000622:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	@ 0x64
 8000626:	f000 fc33 	bl	8000e90 <HAL_Delay>
	HAL_SPI_Receive(&hspi2, CMD8_Response, 7, 1000);
 800062a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062e:	2207      	movs	r2, #7
 8000630:	496e      	ldr	r1, [pc, #440]	@ (80007ec <configure_sd+0x2f4>)
 8000632:	4862      	ldr	r0, [pc, #392]	@ (80007bc <configure_sd+0x2c4>)
 8000634:	f002 fda2 	bl	800317c <HAL_SPI_Receive>
	//HAL_Delay(1000);
	count = 0;
 8000638:	4b64      	ldr	r3, [pc, #400]	@ (80007cc <configure_sd+0x2d4>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	while(count < 20 && (CMD8_Response[1] != 0x1 || CMD8_Response[5] != 0xAA)){
 800063e:	e02d      	b.n	800069c <configure_sd+0x1a4>
			count++;
 8000640:	4b62      	ldr	r3, [pc, #392]	@ (80007cc <configure_sd+0x2d4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a61      	ldr	r2, [pc, #388]	@ (80007cc <configure_sd+0x2d4>)
 8000648:	6013      	str	r3, [r2, #0]
			  myprintf("8 Failed once: \r\n");
 800064a:	4869      	ldr	r0, [pc, #420]	@ (80007f0 <configure_sd+0x2f8>)
 800064c:	f7ff fe20 	bl	8000290 <myprintf>
			  for(int i = 0; i<7; i++){
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	e00a      	b.n	800066c <configure_sd+0x174>
			  			  myprintf("(%x)", CMD8_Response[i]);
 8000656:	4a65      	ldr	r2, [pc, #404]	@ (80007ec <configure_sd+0x2f4>)
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	485e      	ldr	r0, [pc, #376]	@ (80007dc <configure_sd+0x2e4>)
 8000662:	f7ff fe15 	bl	8000290 <myprintf>
			  for(int i = 0; i<7; i++){
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b06      	cmp	r3, #6
 8000670:	ddf1      	ble.n	8000656 <configure_sd+0x15e>
			  		  }
			  ok_notok = HAL_SPI_Transmit(&hspi2, CMD8, 6, 1000); //Sending in Blocking mode
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	2206      	movs	r2, #6
 8000678:	495b      	ldr	r1, [pc, #364]	@ (80007e8 <configure_sd+0x2f0>)
 800067a:	4850      	ldr	r0, [pc, #320]	@ (80007bc <configure_sd+0x2c4>)
 800067c:	f002 fc09 	bl	8002e92 <HAL_SPI_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b4e      	ldr	r3, [pc, #312]	@ (80007c0 <configure_sd+0x2c8>)
 8000686:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f000 fc01 	bl	8000e90 <HAL_Delay>
			  HAL_SPI_Receive(&hspi2, CMD8_Response, 7, 1000);
 800068e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000692:	2207      	movs	r2, #7
 8000694:	4955      	ldr	r1, [pc, #340]	@ (80007ec <configure_sd+0x2f4>)
 8000696:	4849      	ldr	r0, [pc, #292]	@ (80007bc <configure_sd+0x2c4>)
 8000698:	f002 fd70 	bl	800317c <HAL_SPI_Receive>
	while(count < 20 && (CMD8_Response[1] != 0x1 || CMD8_Response[5] != 0xAA)){
 800069c:	4b4b      	ldr	r3, [pc, #300]	@ (80007cc <configure_sd+0x2d4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b13      	cmp	r3, #19
 80006a2:	dc07      	bgt.n	80006b4 <configure_sd+0x1bc>
 80006a4:	4b51      	ldr	r3, [pc, #324]	@ (80007ec <configure_sd+0x2f4>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d1c9      	bne.n	8000640 <configure_sd+0x148>
 80006ac:	4b4f      	ldr	r3, [pc, #316]	@ (80007ec <configure_sd+0x2f4>)
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2baa      	cmp	r3, #170	@ 0xaa
 80006b2:	d1c5      	bne.n	8000640 <configure_sd+0x148>
	}
	if(count == 20){
 80006b4:	4b45      	ldr	r3, [pc, #276]	@ (80007cc <configure_sd+0x2d4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b14      	cmp	r3, #20
 80006ba:	d103      	bne.n	80006c4 <configure_sd+0x1cc>
		myprintf("Timeout \r\n");
 80006bc:	4845      	ldr	r0, [pc, #276]	@ (80007d4 <configure_sd+0x2dc>)
 80006be:	f7ff fde7 	bl	8000290 <myprintf>
			return;
 80006c2:	e073      	b.n	80007ac <configure_sd+0x2b4>
		}
	myprintf("CMD8: ");
 80006c4:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <configure_sd+0x2fc>)
 80006c6:	f7ff fde3 	bl	8000290 <myprintf>
	for(int i = 0; i<7; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e00a      	b.n	80006e6 <configure_sd+0x1ee>
			  myprintf("(%x)", CMD8_Response[i]);
 80006d0:	4a46      	ldr	r2, [pc, #280]	@ (80007ec <configure_sd+0x2f4>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4840      	ldr	r0, [pc, #256]	@ (80007dc <configure_sd+0x2e4>)
 80006dc:	f7ff fdd8 	bl	8000290 <myprintf>
	for(int i = 0; i<7; i++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	ddf1      	ble.n	80006d0 <configure_sd+0x1d8>
		  }
	myprintf("\r\n");
 80006ec:	483c      	ldr	r0, [pc, #240]	@ (80007e0 <configure_sd+0x2e8>)
 80006ee:	f7ff fdcf 	bl	8000290 <myprintf>
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 80006f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f6:	2201      	movs	r2, #1
 80006f8:	493a      	ldr	r1, [pc, #232]	@ (80007e4 <configure_sd+0x2ec>)
 80006fa:	4830      	ldr	r0, [pc, #192]	@ (80007bc <configure_sd+0x2c4>)
 80006fc:	f002 fbc9 	bl	8002e92 <HAL_SPI_Transmit>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <configure_sd+0x2c8>)
 8000706:	701a      	strb	r2, [r3, #0]
	ok_notok = HAL_SPI_Transmit(&hspi2, highByte, 1, 1000);
 8000708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070c:	2201      	movs	r2, #1
 800070e:	4935      	ldr	r1, [pc, #212]	@ (80007e4 <configure_sd+0x2ec>)
 8000710:	482a      	ldr	r0, [pc, #168]	@ (80007bc <configure_sd+0x2c4>)
 8000712:	f002 fbbe 	bl	8002e92 <HAL_SPI_Transmit>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <configure_sd+0x2c8>)
 800071c:	701a      	strb	r2, [r3, #0]

	//CMD55:
	int counter = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
	int worked = acdm55();
 8000722:	f7ff fddb 	bl	80002dc <acdm55>
 8000726:	6078      	str	r0, [r7, #4]
	myprintf("Worked: (%i)\r\n", worked);
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <configure_sd+0x300>)
 800072c:	f7ff fdb0 	bl	8000290 <myprintf>
	while(worked == 0 && counter<20){
 8000730:	e00b      	b.n	800074a <configure_sd+0x252>
			worked = acdm55();
 8000732:	f7ff fdd3 	bl	80002dc <acdm55>
 8000736:	6078      	str	r0, [r7, #4]
			//myprintf("Worked: (%i)\r\n", worked);
			counter++;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3301      	adds	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
			//myprintf("Count: (%x)\r\n", count);
			if(worked==1){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d102      	bne.n	800074a <configure_sd+0x252>
				myprintf("yay!\r\n");
 8000744:	482d      	ldr	r0, [pc, #180]	@ (80007fc <configure_sd+0x304>)
 8000746:	f7ff fda3 	bl	8000290 <myprintf>
	while(worked == 0 && counter<20){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <configure_sd+0x25e>
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b13      	cmp	r3, #19
 8000754:	dded      	ble.n	8000732 <configure_sd+0x23a>
			}
	}
	myprintf("Count: %i\r\n", counter);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	4829      	ldr	r0, [pc, #164]	@ (8000800 <configure_sd+0x308>)
 800075a:	f7ff fd99 	bl	8000290 <myprintf>
	myprintf("Worked: %i\r\n", worked);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	4828      	ldr	r0, [pc, #160]	@ (8000804 <configure_sd+0x30c>)
 8000762:	f7ff fd95 	bl	8000290 <myprintf>
	if(counter==20){
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b14      	cmp	r3, #20
 800076a:	d103      	bne.n	8000774 <configure_sd+0x27c>
		myprintf("Timeout\r\n");
 800076c:	4826      	ldr	r0, [pc, #152]	@ (8000808 <configure_sd+0x310>)
 800076e:	f7ff fd8f 	bl	8000290 <myprintf>
		return;
 8000772:	e01b      	b.n	80007ac <configure_sd+0x2b4>
	}

	myprintf("End of Start Up\r\n");
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <configure_sd+0x314>)
 8000776:	f7ff fd8b 	bl	8000290 <myprintf>
	if(ok_notok == HAL_OK){
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <configure_sd+0x2c8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <configure_sd+0x296>
	  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2120      	movs	r1, #32
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f000 fe2d 	bl	80013e8 <HAL_GPIO_WritePin>
	}
	HAL_Delay(1000);
 800078e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000792:	f000 fb7d 	bl	8000e90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f000 fe23 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SD_CS_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2102      	movs	r1, #2
 80007a6:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <configure_sd+0x2bc>)
 80007a8:	f000 fe1e 	bl	80013e8 <HAL_GPIO_WritePin>
}
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	48000400 	.word	0x48000400
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	200000ac 	.word	0x200000ac
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000198 	.word	0x20000198
 80007cc:	200001ac 	.word	0x200001ac
 80007d0:	08004ef4 	.word	0x08004ef4
 80007d4:	08004f08 	.word	0x08004f08
 80007d8:	08004f14 	.word	0x08004f14
 80007dc:	08004ec0 	.word	0x08004ec0
 80007e0:	08004ec8 	.word	0x08004ec8
 80007e4:	20000030 	.word	0x20000030
 80007e8:	20000018 	.word	0x20000018
 80007ec:	2000019c 	.word	0x2000019c
 80007f0:	08004f1c 	.word	0x08004f1c
 80007f4:	08004f30 	.word	0x08004f30
 80007f8:	08004f38 	.word	0x08004f38
 80007fc:	08004f48 	.word	0x08004f48
 8000800:	08004f50 	.word	0x08004f50
 8000804:	08004f5c 	.word	0x08004f5c
 8000808:	08004f6c 	.word	0x08004f6c
 800080c:	08004f78 	.word	0x08004f78

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fad5 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f839 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f903 	bl	8000a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000822:	f000 f8d1 	bl	80009c8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000826:	f000 f891 	bl	800094c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  const char *hw = "Hello World! \r\n";
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <main+0x70>)
 800082c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000836:	f000 fdd7 	bl	80013e8 <HAL_GPIO_WritePin>
  HAL_Delay(3000); //a short delay is important to let the SD card settle
 800083a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800083e:	f000 fb27 	bl	8000e90 <HAL_Delay>
  GPIO_PinState pressed;

  int len = 15;
 8000842:	230f      	movs	r3, #15
 8000844:	60bb      	str	r3, [r7, #8]
  ok_notok = HAL_UART_Transmit(&huart2, (uint8_t *)hw, len, 100);
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	b29a      	uxth	r2, r3
 800084a:	2364      	movs	r3, #100	@ 0x64
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <main+0x74>)
 8000850:	f003 f9f8 	bl	8003c44 <HAL_UART_Transmit>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <main+0x78>)
 800085a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800085c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000860:	480a      	ldr	r0, [pc, #40]	@ (800088c <main+0x7c>)
 8000862:	f000 fda9 	bl	80013b8 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	  if(pressed == 0){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f5      	bne.n	800085c <main+0x4c>
		  configure_sd();
 8000870:	f7ff fe42 	bl	80004f8 <configure_sd>
		  HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000878:	f000 fb0a 	bl	8000e90 <HAL_Delay>
	  pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800087c:	e7ee      	b.n	800085c <main+0x4c>
 800087e:	bf00      	nop
 8000880:	08004f8c 	.word	0x08004f8c
 8000884:	20000110 	.word	0x20000110
 8000888:	20000000 	.word	0x20000000
 800088c:	48000800 	.word	0x48000800

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a6      	sub	sp, #152	@ 0x98
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800089a:	2228      	movs	r2, #40	@ 0x28
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fe82 	bl	80045a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2258      	movs	r2, #88	@ 0x58
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fe74 	bl	80045a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008dc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd92 	bl	8001418 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f911 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fdd0 	bl	80024c0 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000926:	f000 f8fb 	bl	8000b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800092a:	2302      	movs	r3, #2
 800092c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f001 ffe3 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000940:	f000 f8ee 	bl	8000b20 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3798      	adds	r7, #152	@ 0x98
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	@ (80009c4 <MX_SPI2_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000958:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000966:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800096a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_SPI2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_SPI2_Init+0x74>)
 800097a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800097e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000982:	2230      	movs	r2, #48	@ 0x30
 8000984:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_SPI2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_SPI2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_SPI2_Init+0x74>)
 800099a:	2207      	movs	r2, #7
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_SPI2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_SPI2_Init+0x74>)
 80009a6:	2208      	movs	r2, #8
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_SPI2_Init+0x74>)
 80009ac:	f002 f9c6 	bl	8002d3c <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f8b3 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000ac 	.word	0x200000ac
 80009c4:	40003800 	.word	0x40003800

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	@ (8000a24 <MX_USART2_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f003 f8cc 	bl	8003ba8 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f883 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000110 	.word	0x20000110
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a34      	ldr	r2, [pc, #208]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a56:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a28      	ldr	r2, [pc, #160]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <MX_GPIO_Init+0xec>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa6:	f000 fc9f 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2102      	movs	r1, #2
 8000aae:	481a      	ldr	r0, [pc, #104]	@ (8000b18 <MX_GPIO_Init+0xf0>)
 8000ab0:	f000 fc9a 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <MX_GPIO_Init+0xf4>)
 8000acc:	f000 faea 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f000 fadb 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000aee:	2302      	movs	r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_GPIO_Init+0xf0>)
 8000b06:	f000 facd 	bl	80010a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b62:	2007      	movs	r0, #7
 8000b64:	f000 fa6a 	bl	800103c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_SPI_MspInit+0x7c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d128      	bne.n	8000be8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a16      	ldr	r2, [pc, #88]	@ (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bc6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000be4:	f000 fa5e 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	@ 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40003800 	.word	0x40003800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <HAL_UART_MspInit+0x7c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d128      	bne.n	8000c70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6c:	f000 fa1a 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8bb 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fc52 	bl	80045b8 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20010000 	.word	0x20010000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200002b0 	.word	0x200002b0
 8000d48:	20000400 	.word	0x20000400

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fc11 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fd35 	bl	8000810 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000db4:	08005018 	.word	0x08005018
  ldr r2, =_sbss
 8000db8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dbc:	20000400 	.word	0x20000400

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f931 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fea4 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f93b 	bl	800108a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f911 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000034 	.word	0x20000034
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	20000038 	.word	0x20000038

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000003c 	.word	0x2000003c
 8000e74:	200002b4 	.word	0x200002b4

08000e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200002b4 	.word	0x200002b4

08000e90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000003c 	.word	0x2000003c

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff47 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff5c 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e160      	b.n	8001376 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8152 	beq.w	8001370 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <HAL_GPIO_Init+0x40>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f003 0201 	and.w	r2, r3, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	6939      	ldr	r1, [r7, #16]
 80011d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0203 	and.w	r2, r3, #3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80ac 	beq.w	8001370 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	4b5e      	ldr	r3, [pc, #376]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a5d      	ldr	r2, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001230:	4a59      	ldr	r2, [pc, #356]	@ (8001398 <HAL_GPIO_Init+0x2f4>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800125a:	d025      	beq.n	80012a8 <HAL_GPIO_Init+0x204>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4f      	ldr	r2, [pc, #316]	@ (800139c <HAL_GPIO_Init+0x2f8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d01f      	beq.n	80012a4 <HAL_GPIO_Init+0x200>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4e      	ldr	r2, [pc, #312]	@ (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d019      	beq.n	80012a0 <HAL_GPIO_Init+0x1fc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4d      	ldr	r2, [pc, #308]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d013      	beq.n	800129c <HAL_GPIO_Init+0x1f8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a4c      	ldr	r2, [pc, #304]	@ (80013a8 <HAL_GPIO_Init+0x304>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d00d      	beq.n	8001298 <HAL_GPIO_Init+0x1f4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a4b      	ldr	r2, [pc, #300]	@ (80013ac <HAL_GPIO_Init+0x308>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x1f0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a4a      	ldr	r2, [pc, #296]	@ (80013b0 <HAL_GPIO_Init+0x30c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_GPIO_Init+0x1ec>
 800128c:	2306      	movs	r3, #6
 800128e:	e00c      	b.n	80012aa <HAL_GPIO_Init+0x206>
 8001290:	2307      	movs	r3, #7
 8001292:	e00a      	b.n	80012aa <HAL_GPIO_Init+0x206>
 8001294:	2305      	movs	r3, #5
 8001296:	e008      	b.n	80012aa <HAL_GPIO_Init+0x206>
 8001298:	2304      	movs	r3, #4
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x206>
 800129c:	2303      	movs	r3, #3
 800129e:	e004      	b.n	80012aa <HAL_GPIO_Init+0x206>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x206>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_GPIO_Init+0x206>
 80012a8:	2300      	movs	r3, #0
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ba:	4937      	ldr	r1, [pc, #220]	@ (8001398 <HAL_GPIO_Init+0x2f4>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f2:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001316:	4a27      	ldr	r2, [pc, #156]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001340:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f ae97 	bne.w	80010b4 <HAL_GPIO_Init+0x10>
  }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00
 80013a8:	48001000 	.word	0x48001000
 80013ac:	48001400 	.word	0x48001400
 80013b0:	48001800 	.word	0x48001800
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e001      	b.n	80013da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001404:	e002      	b.n	800140c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800141e:	af00      	add	r7, sp, #0
 8001420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001424:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001428:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	f001 b83a 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 816f 	beq.w	8001732 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001454:	4bb5      	ldr	r3, [pc, #724]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b04      	cmp	r3, #4
 800145e:	d00c      	beq.n	800147a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001460:	4bb2      	ldr	r3, [pc, #712]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d15c      	bne.n	8001526 <HAL_RCC_OscConfig+0x10e>
 800146c:	4baf      	ldr	r3, [pc, #700]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001478:	d155      	bne.n	8001526 <HAL_RCC_OscConfig+0x10e>
 800147a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800147e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800148e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <HAL_RCC_OscConfig+0x94>
 80014a6:	4ba1      	ldr	r3, [pc, #644]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0xc0>
 80014ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80014c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80014c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80014d4:	4b95      	ldr	r3, [pc, #596]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014dc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80014e0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80014e4:	fa92 f2a2 	rbit	r2, r2
 80014e8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80014ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80014f0:	fab2 f282 	clz	r2, r2
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	f002 021f 	and.w	r2, r2, #31
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8111 	beq.w	8001730 <HAL_RCC_OscConfig+0x318>
 800150e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001512:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8108 	bne.w	8001730 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	f000 bfc6 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x12e>
 8001538:	4b7c      	ldr	r3, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a7b      	ldr	r2, [pc, #492]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e036      	b.n	80015b4 <HAL_RCC_OscConfig+0x19c>
 8001546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x158>
 8001556:	4b75      	ldr	r3, [pc, #468]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a74      	ldr	r2, [pc, #464]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 800155c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b72      	ldr	r3, [pc, #456]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a71      	ldr	r2, [pc, #452]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e021      	b.n	80015b4 <HAL_RCC_OscConfig+0x19c>
 8001570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001574:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x184>
 8001582:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a69      	ldr	r2, [pc, #420]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b67      	ldr	r3, [pc, #412]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a66      	ldr	r2, [pc, #408]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0x19c>
 800159c:	4b63      	ldr	r3, [pc, #396]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a62      	ldr	r2, [pc, #392]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b60      	ldr	r3, [pc, #384]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a5f      	ldr	r2, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d059      	beq.n	8001678 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc58 	bl	8000e78 <HAL_GetTick>
 80015c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ce:	f7ff fc53 	bl	8000e78 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	@ 0x64
 80015dc:	d902      	bls.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	f000 bf67 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
 80015e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015e8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80015f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d102      	bne.n	8001616 <HAL_RCC_OscConfig+0x1fe>
 8001610:	4b46      	ldr	r3, [pc, #280]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x22a>
 8001616:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800161a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800162a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800162e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001632:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001646:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800164a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800164e:	fa92 f2a2 	rbit	r2, r2
 8001652:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001656:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800165a:	fab2 f282 	clz	r2, r2
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	f042 0220 	orr.w	r2, r2, #32
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	f002 021f 	and.w	r2, r2, #31
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ab      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b6>
 8001676:	e05c      	b.n	8001732 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fbfe 	bl	8000e78 <HAL_GetTick>
 800167c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff fbf9 	bl	8000e78 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d902      	bls.n	8001698 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	f000 bf0d 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
 8001698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800169c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80016ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x2b2>
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x2de>
 80016ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80016de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80016e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <HAL_RCC_OscConfig+0x314>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016fa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80016fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001702:	fa92 f2a2 	rbit	r2, r2
 8001706:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800170a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800170e:	fab2 f282 	clz	r2, r2
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f042 0220 	orr.w	r2, r2, #32
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f002 021f 	and.w	r2, r2, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ab      	bne.n	8001682 <HAL_RCC_OscConfig+0x26a>
 800172a:	e002      	b.n	8001732 <HAL_RCC_OscConfig+0x31a>
 800172c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001736:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 817f 	beq.w	8001a46 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001748:	4ba7      	ldr	r3, [pc, #668]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00c      	beq.n	800176e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001754:	4ba4      	ldr	r3, [pc, #656]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d173      	bne.n	8001848 <HAL_RCC_OscConfig+0x430>
 8001760:	4ba1      	ldr	r3, [pc, #644]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800176c:	d16c      	bne.n	8001848 <HAL_RCC_OscConfig+0x430>
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001780:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HAL_RCC_OscConfig+0x386>
 8001798:	4b93      	ldr	r3, [pc, #588]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e013      	b.n	80017c6 <HAL_RCC_OscConfig+0x3ae>
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80017b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80017c2:	4b89      	ldr	r3, [pc, #548]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	2202      	movs	r2, #2
 80017c8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80017cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80017d0:	fa92 f2a2 	rbit	r2, r2
 80017d4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80017d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f002 021f 	and.w	r2, r2, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00a      	beq.n	800180e <HAL_RCC_OscConfig+0x3f6>
 80017f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d002      	beq.n	800180e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	f000 be52 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b76      	ldr	r3, [pc, #472]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	21f8      	movs	r1, #248	@ 0xf8
 8001824:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800182c:	fa91 f1a1 	rbit	r1, r1
 8001830:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001834:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001838:	fab1 f181 	clz	r1, r1
 800183c:	b2c9      	uxtb	r1, r1
 800183e:	408b      	lsls	r3, r1
 8001840:	4969      	ldr	r1, [pc, #420]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e0fe      	b.n	8001a46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8088 	beq.w	800196a <HAL_RCC_OscConfig+0x552>
 800185a:	2301      	movs	r3, #1
 800185c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800186c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800187a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	2301      	movs	r3, #1
 8001884:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff faf7 	bl	8000e78 <HAL_GetTick>
 800188a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff faf2 	bl	8000e78 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d902      	bls.n	80018a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f000 be06 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80018b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4be>
 80018d0:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e013      	b.n	80018fe <HAL_RCC_OscConfig+0x4e6>
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80018ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80018fa:	4b3b      	ldr	r3, [pc, #236]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	2202      	movs	r2, #2
 8001900:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001904:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001908:	fa92 f2a2 	rbit	r2, r2
 800190c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001910:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001914:	fab2 f282 	clz	r2, r2
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f042 0220 	orr.w	r2, r2, #32
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f002 021f 	and.w	r2, r2, #31
 8001924:	2101      	movs	r1, #1
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0af      	beq.n	8001890 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	21f8      	movs	r1, #248	@ 0xf8
 8001946:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800194e:	fa91 f1a1 	rbit	r1, r1
 8001952:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001956:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800195a:	fab1 f181 	clz	r1, r1
 800195e:	b2c9      	uxtb	r1, r1
 8001960:	408b      	lsls	r3, r1
 8001962:	4921      	ldr	r1, [pc, #132]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e06d      	b.n	8001a46 <HAL_RCC_OscConfig+0x62e>
 800196a:	2301      	movs	r3, #1
 800196c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800197c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800198a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	2300      	movs	r3, #0
 8001994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fa6f 	bl	8000e78 <HAL_GetTick>
 800199a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fa6a 	bl	8000e78 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d902      	bls.n	80019b6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f000 bd7e 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80019c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x5d4>
 80019e0:	4b01      	ldr	r3, [pc, #4]	@ (80019e8 <HAL_RCC_OscConfig+0x5d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e016      	b.n	8001a14 <HAL_RCC_OscConfig+0x5fc>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a04:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a10:	4bbf      	ldr	r3, [pc, #764]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2202      	movs	r2, #2
 8001a16:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001a26:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ac      	bne.n	80019a0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8113 	beq.w	8001c82 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d07c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x74e>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001a7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4ba2      	ldr	r3, [pc, #648]	@ (8001d14 <HAL_RCC_OscConfig+0x8fc>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	461a      	mov	r2, r3
 8001a92:	2301      	movs	r3, #1
 8001a94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f9ef 	bl	8000e78 <HAL_GetTick>
 8001a9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f9ea 	bl	8000e78 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d902      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f000 bcfe 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001afa:	2202      	movs	r2, #2
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4b7e      	ldr	r3, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b22:	2102      	movs	r1, #2
 8001b24:	6019      	str	r1, [r3, #0]
 8001b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f1a3 	rbit	r1, r3
 8001b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b3c:	6019      	str	r1, [r3, #0]
  return result;
 8001b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d09d      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x688>
 8001b64:	e08d      	b.n	8001c82 <HAL_RCC_OscConfig+0x86a>
 8001b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f2a3 	rbit	r2, r3
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b88:	601a      	str	r2, [r3, #0]
  return result;
 8001b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b92:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001d14 <HAL_RCC_OscConfig+0x8fc>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f966 	bl	8000e78 <HAL_GetTick>
 8001bac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f961 	bl	8000e78 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d902      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f000 bc75 	b.w	80024b2 <HAL_RCC_OscConfig+0x109a>
 8001bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bcc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c14:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c18:	2202      	movs	r2, #2
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c40:	2102      	movs	r1, #2
 8001c42:	6019      	str	r1, [r3, #0]
 8001c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f1a3 	rbit	r1, r3
 8001c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c56:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c5a:	6019      	str	r1, [r3, #0]
  return result;
 8001c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d197      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 81a5 	beq.w	8001fe2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <HAL_RCC_OscConfig+0x8f8>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cd0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_RCC_OscConfig+0x900>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d121      	bne.n	8001d28 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <HAL_RCC_OscConfig+0x900>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <HAL_RCC_OscConfig+0x900>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f8c2 	bl	8000e78 <HAL_GetTick>
 8001cf4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	e010      	b.n	8001d1c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff f8bd 	bl	8000e78 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d908      	bls.n	8001d1c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e3d1      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	10908120 	.word	0x10908120
 8001d18:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f54 <HAL_RCC_OscConfig+0xb3c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0e8      	beq.n	8001cfa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x92e>
 8001d38:	4b87      	ldr	r3, [pc, #540]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a86      	ldr	r2, [pc, #536]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e035      	b.n	8001db2 <HAL_RCC_OscConfig+0x99a>
 8001d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x958>
 8001d56:	4b80      	ldr	r3, [pc, #512]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a7f      	ldr	r2, [pc, #508]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b7d      	ldr	r3, [pc, #500]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a7c      	ldr	r2, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	e020      	b.n	8001db2 <HAL_RCC_OscConfig+0x99a>
 8001d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x982>
 8001d80:	4b75      	ldr	r3, [pc, #468]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a74      	ldr	r2, [pc, #464]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b72      	ldr	r3, [pc, #456]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a71      	ldr	r2, [pc, #452]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x99a>
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a6b      	ldr	r2, [pc, #428]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8081 	beq.w	8001ec6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f858 	bl	8000e78 <HAL_GetTick>
 8001dc8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff f853 	bl	8000e78 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e365      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
 8001de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001dee:	2202      	movs	r2, #2
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e2c:	601a      	str	r2, [r3, #0]
  return result;
 8001e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e32:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_OscConfig+0xa3a>
 8001e4c:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	e013      	b.n	8001e7a <HAL_RCC_OscConfig+0xa62>
 8001e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e56:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fa93 f2a3 	rbit	r2, r3
 8001e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e70:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e7e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e82:	2102      	movs	r1, #2
 8001e84:	6011      	str	r1, [r2, #0]
 8001e86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e8a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	fa92 f1a2 	rbit	r1, r2
 8001e94:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e98:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e9c:	6011      	str	r1, [r2, #0]
  return result;
 8001e9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ea2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d084      	beq.n	8001dce <HAL_RCC_OscConfig+0x9b6>
 8001ec4:	e083      	b.n	8001fce <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe ffd7 	bl	8000e78 <HAL_GetTick>
 8001eca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe ffd2 	bl	8000e78 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e2e4      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
 8001ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f2e:	601a      	str	r2, [r3, #0]
  return result;
 8001f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f34:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0xb44>
 8001f4e:	4b02      	ldr	r3, [pc, #8]	@ (8001f58 <HAL_RCC_OscConfig+0xb40>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	e017      	b.n	8001f84 <HAL_RCC_OscConfig+0xb6c>
 8001f54:	40007000 	.word	0x40007000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f60:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f64:	2202      	movs	r2, #2
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4bb3      	ldr	r3, [pc, #716]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f88:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	6011      	str	r1, [r2, #0]
 8001f90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f94:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	fa92 f1a2 	rbit	r1, r2
 8001f9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fa2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001fa6:	6011      	str	r1, [r2, #0]
  return result;
 8001fa8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fac:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f002 021f 	and.w	r2, r2, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d180      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fce:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b9e      	ldr	r3, [pc, #632]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a9d      	ldr	r2, [pc, #628]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 825e 	beq.w	80024b0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff4:	4b96      	ldr	r3, [pc, #600]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	f000 821f 	beq.w	8002440 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002006:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	f040 8170 	bne.w	80022f4 <HAL_RCC_OscConfig+0xedc>
 8002014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002018:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800201c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002026:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002038:	601a      	str	r2, [r3, #0]
  return result;
 800203a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002042:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800204e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	461a      	mov	r2, r3
 8002056:	2300      	movs	r3, #0
 8002058:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe ff0d 	bl	8000e78 <HAL_GetTick>
 800205e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e009      	b.n	8002078 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe ff08 	bl	8000e78 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e21c      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
 8002078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002080:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800209c:	601a      	str	r2, [r3, #0]
  return result;
 800209e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0xcaa>
 80020bc:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e027      	b.n	8002112 <HAL_RCC_OscConfig+0xcfa>
 80020c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80020ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80020f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002108:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002116:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800211a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800211e:	6011      	str	r1, [r2, #0]
 8002120:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002124:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	fa92 f1a2 	rbit	r1, r2
 800212e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002132:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002136:	6011      	str	r1, [r2, #0]
  return result;
 8002138:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800213c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d182      	bne.n	8002064 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215e:	4b3c      	ldr	r3, [pc, #240]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	f023 020f 	bic.w	r2, r3, #15
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	4937      	ldr	r1, [pc, #220]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 8002174:	4313      	orrs	r3, r2
 8002176:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002178:	4b35      	ldr	r3, [pc, #212]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002180:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002184:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a19      	ldr	r1, [r3, #32]
 800218c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002190:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	430b      	orrs	r3, r1
 800219a:	492d      	ldr	r1, [pc, #180]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80021c4:	601a      	str	r2, [r3, #0]
  return result;
 80021c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80021ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	2301      	movs	r3, #1
 80021e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fe47 	bl	8000e78 <HAL_GetTick>
 80021ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ee:	e009      	b.n	8002204 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fe42 	bl	8000e78 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e156      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
 8002204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002208:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800220c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002224:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002228:	601a      	str	r2, [r3, #0]
  return result;
 800222a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002232:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0xe3c>
 8002248:	4b01      	ldr	r3, [pc, #4]	@ (8002250 <HAL_RCC_OscConfig+0xe38>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e02a      	b.n	80022a4 <HAL_RCC_OscConfig+0xe8c>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800225c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002266:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002274:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002282:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b86      	ldr	r3, [pc, #536]	@ (80024bc <HAL_RCC_OscConfig+0x10a4>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fa92 f1a2 	rbit	r1, r2
 80022c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022c4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80022c8:	6011      	str	r1, [r2, #0]
  return result;
 80022ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022ce:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f43f af7f 	beq.w	80021f0 <HAL_RCC_OscConfig+0xdd8>
 80022f2:	e0dd      	b.n	80024b0 <HAL_RCC_OscConfig+0x1098>
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80022fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002306:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002318:	601a      	str	r2, [r3, #0]
  return result;
 800231a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002322:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800232e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	461a      	mov	r2, r3
 8002336:	2300      	movs	r3, #0
 8002338:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fd9d 	bl	8000e78 <HAL_GetTick>
 800233e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fd98 	bl	8000e78 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0ac      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
 8002358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002360:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	fa93 f2a3 	rbit	r2, r3
 8002374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002378:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800237c:	601a      	str	r2, [r3, #0]
  return result;
 800237e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002382:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002386:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0xf8a>
 800239c:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_OscConfig+0x10a4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	e027      	b.n	80023f2 <HAL_RCC_OscConfig+0xfda>
 80023a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023cc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <HAL_RCC_OscConfig+0x10a4>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80023fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023fe:	6011      	str	r1, [r2, #0]
 8002400:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002404:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	fa92 f1a2 	rbit	r1, r2
 800240e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002412:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002416:	6011      	str	r1, [r2, #0]
  return result;
 8002418:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f002 021f 	and.w	r2, r2, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d182      	bne.n	8002344 <HAL_RCC_OscConfig+0xf2c>
 800243e:	e037      	b.n	80024b0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002444:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e02e      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_OscConfig+0x10a4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_RCC_OscConfig+0x10a4>)
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002464:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002468:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800246c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002470:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	429a      	cmp	r2, r3
 800247a:	d117      	bne.n	80024ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800247c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002480:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002488:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002490:	429a      	cmp	r2, r3
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000

080024c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b09e      	sub	sp, #120	@ 0x78
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e162      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b90      	ldr	r3, [pc, #576]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b8d      	ldr	r3, [pc, #564]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	498b      	ldr	r1, [pc, #556]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b89      	ldr	r3, [pc, #548]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e14a      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b82      	ldr	r3, [pc, #520]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	497f      	ldr	r1, [pc, #508]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80dc 	beq.w	80026ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d13c      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xf6>
 800253c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002540:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800254a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d102      	bne.n	8002566 <HAL_RCC_ClockConfig+0xa6>
 8002560:	4b6f      	ldr	r3, [pc, #444]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	e00f      	b.n	8002586 <HAL_RCC_ClockConfig+0xc6>
 8002566:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800256a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	667b      	str	r3, [r7, #100]	@ 0x64
 8002574:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002578:	663b      	str	r3, [r7, #96]	@ 0x60
 800257a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002582:	4b67      	ldr	r3, [pc, #412]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800258a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800258c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800258e:	fa92 f2a2 	rbit	r2, r2
 8002592:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d17b      	bne.n	80026aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0f3      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d13c      	bne.n	8002638 <HAL_RCC_ClockConfig+0x178>
 80025be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x128>
 80025e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_ClockConfig+0x148>
 80025e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80025fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002604:	4b46      	ldr	r3, [pc, #280]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800260e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002618:	fab2 f282 	clz	r2, r2
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f042 0220 	orr.w	r2, r2, #32
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f002 021f 	and.w	r2, r2, #31
 8002628:	2101      	movs	r1, #1
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d13a      	bne.n	80026aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b2      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
 8002638:	2302      	movs	r3, #2
 800263a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_RCC_ClockConfig+0x1a0>
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	e00d      	b.n	800267c <HAL_RCC_ClockConfig+0x1bc>
 8002660:	2302      	movs	r3, #2
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	2302      	movs	r3, #2
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2202      	movs	r2, #2
 800267e:	61ba      	str	r2, [r7, #24]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	617a      	str	r2, [r7, #20]
  return result;
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f002 021f 	and.w	r2, r2, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e079      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	491a      	ldr	r1, [pc, #104]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fbdc 	bl	8000e78 <HAL_GetTick>
 80026c0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fbd8 	bl	8000e78 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e061      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_RCC_ClockConfig+0x260>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d214      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4906      	ldr	r1, [pc, #24]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b04      	ldr	r3, [pc, #16]	@ (800271c <HAL_RCC_ClockConfig+0x25c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e040      	b.n	800279e <HAL_RCC_ClockConfig+0x2de>
 800271c:	40022000 	.word	0x40022000
 8002720:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	491a      	ldr	r1, [pc, #104]	@ (80027a8 <HAL_RCC_ClockConfig+0x2e8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4912      	ldr	r1, [pc, #72]	@ (80027a8 <HAL_RCC_ClockConfig+0x2e8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002762:	f000 f829 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002766:	4601      	mov	r1, r0
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <HAL_RCC_ClockConfig+0x2e8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002770:	22f0      	movs	r2, #240	@ 0xf0
 8002772:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	60fa      	str	r2, [r7, #12]
  return result;
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	40d3      	lsrs	r3, r2
 8002786:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_RCC_ClockConfig+0x2ec>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	fa21 f303 	lsr.w	r3, r1, r3
 800278e:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fb2a 	bl	8000df0 <HAL_InitTick>
  
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3778      	adds	r7, #120	@ 0x78
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08004f9c 	.word	0x08004f9c
 80027b0:	20000034 	.word	0x20000034
 80027b4:	20000038 	.word	0x20000038

080027b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x30>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x36>
 80027e6:	e029      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	e029      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002814:	4a0f      	ldr	r2, [pc, #60]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	fbb2 f2f3 	udiv	r2, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e007      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002826:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	fbb2 f2f3 	udiv	r2, r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	613b      	str	r3, [r7, #16]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x9c>)
 800283e:	613b      	str	r3, [r7, #16]
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	693b      	ldr	r3, [r7, #16]
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	007a1200 	.word	0x007a1200
 8002858:	08004fb4 	.word	0x08004fb4
 800285c:	08004fc4 	.word	0x08004fc4

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000034 	.word	0x20000034

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800287e:	f7ff ffef 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002882:	4601      	mov	r1, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800288c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002890:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	603a      	str	r2, [r7, #0]
  return result;
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	40d3      	lsrs	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08004fac 	.word	0x08004fac

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028c2:	f7ff ffcd 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028c6:	4601      	mov	r1, r0
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80028d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80028d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	603a      	str	r2, [r7, #0]
  return result;
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	40d3      	lsrs	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	08004fac 	.word	0x08004fac

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b092      	sub	sp, #72	@ 0x48
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80d4 	beq.w	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002924:	4b4e      	ldr	r3, [pc, #312]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10e      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002930:	4b4b      	ldr	r3, [pc, #300]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4a4a      	ldr	r2, [pc, #296]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293a:	61d3      	str	r3, [r2, #28]
 800293c:	4b48      	ldr	r3, [pc, #288]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b45      	ldr	r3, [pc, #276]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b42      	ldr	r3, [pc, #264]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a41      	ldr	r2, [pc, #260]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7fe fa87 	bl	8000e78 <HAL_GetTick>
 800296a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fe fa83 	bl	8000e78 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	@ 0x64
 800297a:	d901      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1d6      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800298c:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002994:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8084 	beq.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d07c      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	461a      	mov	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	461a      	mov	r2, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029fe:	4a18      	ldr	r2, [pc, #96]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04b      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fa33 	bl	8000e78 <HAL_GetTick>
 8002a12:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe fa2f 	bl	8000e78 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e180      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	61fb      	str	r3, [r7, #28]
  return result;
 8002a44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d108      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a5a:	4b01      	ldr	r3, [pc, #4]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	e00d      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	10908100 	.word	0x10908100
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	4b9a      	ldr	r3, [pc, #616]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	613a      	str	r2, [r7, #16]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	60fa      	str	r2, [r7, #12]
  return result;
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0b7      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	498c      	ldr	r1, [pc, #560]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	4a87      	ldr	r2, [pc, #540]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad8:	4b82      	ldr	r3, [pc, #520]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	f023 0203 	bic.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	497f      	ldr	r1, [pc, #508]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4978      	ldr	r1, [pc, #480]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b14:	4b73      	ldr	r3, [pc, #460]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	4970      	ldr	r1, [pc, #448]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b32:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f023 0210 	bic.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4969      	ldr	r1, [pc, #420]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b50:	4b64      	ldr	r3, [pc, #400]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5c:	4961      	ldr	r1, [pc, #388]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f023 0220 	bic.w	r2, r3, #32
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	495a      	ldr	r1, [pc, #360]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	4952      	ldr	r1, [pc, #328]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002baa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	494b      	ldr	r1, [pc, #300]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc8:	4b46      	ldr	r3, [pc, #280]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4943      	ldr	r1, [pc, #268]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	493c      	ldr	r1, [pc, #240]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c04:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	4934      	ldr	r1, [pc, #208]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c22:	4b30      	ldr	r3, [pc, #192]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	492d      	ldr	r1, [pc, #180]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c40:	4b28      	ldr	r3, [pc, #160]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	4925      	ldr	r1, [pc, #148]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	491e      	ldr	r1, [pc, #120]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	4916      	ldr	r1, [pc, #88]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	490f      	ldr	r1, [pc, #60]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	4907      	ldr	r1, [pc, #28]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002cd6:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cea:	4913      	ldr	r1, [pc, #76]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d08:	490b      	ldr	r1, [pc, #44]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d26:	4904      	ldr	r1, [pc, #16]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3748      	adds	r7, #72	@ 0x48
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e09d      	b.n	8002e8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d5e:	d009      	beq.n	8002d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
 8002d66:	e005      	b.n	8002d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fef0 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002daa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002db4:	d902      	bls.n	8002dbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e002      	b.n	8002dc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002dca:	d007      	beq.n	8002ddc <HAL_SPI_Init+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	ea42 0103 	orr.w	r1, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	f003 0204 	and.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b088      	sub	sp, #32
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_SPI_Transmit+0x22>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e15f      	b.n	8003174 <HAL_SPI_Transmit+0x2e2>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ebc:	f7fd ffdc 	bl	8000e78 <HAL_GetTick>
 8002ec0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed6:	e148      	b.n	800316a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_SPI_Transmit+0x52>
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ee8:	e13f      	b.n	800316a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2203      	movs	r2, #3
 8002eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f34:	d10f      	bne.n	8002f56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b40      	cmp	r3, #64	@ 0x40
 8002f62:	d007      	beq.n	8002f74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f7c:	d94f      	bls.n	800301e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Transmit+0xfa>
 8002f86:	8afb      	ldrh	r3, [r7, #22]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d142      	bne.n	8003012 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9c:	1c9a      	adds	r2, r3, #2
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fb0:	e02f      	b.n	8003012 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d112      	bne.n	8002fe6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fe4:	e015      	b.n	8003012 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe6:	f7fd ff47 	bl	8000e78 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d803      	bhi.n	8002ffe <HAL_SPI_Transmit+0x16c>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Transmit+0x172>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003010:	e0ab      	b.n	800316a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ca      	bne.n	8002fb2 <HAL_SPI_Transmit+0x120>
 800301c:	e080      	b.n	8003120 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_Transmit+0x19a>
 8003026:	8afb      	ldrh	r3, [r7, #22]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d174      	bne.n	8003116 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d912      	bls.n	800305c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003046:	1c9a      	adds	r2, r3, #2
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b02      	subs	r3, #2
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800305a:	e05c      	b.n	8003116 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003082:	e048      	b.n	8003116 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d12b      	bne.n	80030ea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d912      	bls.n	80030c2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b02      	subs	r3, #2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030c0:	e029      	b.n	8003116 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	7812      	ldrb	r2, [r2, #0]
 80030ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e8:	e015      	b.n	8003116 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ea:	f7fd fec5 	bl	8000e78 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d803      	bhi.n	8003102 <HAL_SPI_Transmit+0x270>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d102      	bne.n	8003108 <HAL_SPI_Transmit+0x276>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003114:	e029      	b.n	800316a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1b1      	bne.n	8003084 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	6839      	ldr	r1, [r7, #0]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fcf9 	bl	8003b1c <SPI_EndRxTxTransaction>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e003      	b.n	800316a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003172:	7ffb      	ldrb	r3, [r7, #31]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a0:	e11a      	b.n	80033d8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031aa:	d112      	bne.n	80031d2 <HAL_SPI_Receive+0x56>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10e      	bne.n	80031d2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2204      	movs	r2, #4
 80031b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f90e 	bl	80033ea <HAL_SPI_TransmitReceive>
 80031ce:	4603      	mov	r3, r0
 80031d0:	e107      	b.n	80033e2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_SPI_Receive+0x64>
 80031dc:	2302      	movs	r3, #2
 80031de:	e100      	b.n	80033e2 <HAL_SPI_Receive+0x266>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e8:	f7fd fe46 	bl	8000e78 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_Receive+0x7e>
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031fe:	e0eb      	b.n	80033d8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2204      	movs	r2, #4
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800324a:	d908      	bls.n	800325e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	e007      	b.n	800326e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003276:	d10f      	bne.n	8003298 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003286:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d007      	beq.n	80032b6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032be:	d86f      	bhi.n	80033a0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032c0:	e034      	b.n	800332c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d117      	bne.n	8003300 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f103 020c 	add.w	r2, r3, #12
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032fe:	e015      	b.n	800332c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003300:	f7fd fdba 	bl	8000e78 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d803      	bhi.n	8003318 <HAL_SPI_Receive+0x19c>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d102      	bne.n	800331e <HAL_SPI_Receive+0x1a2>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800332a:	e055      	b.n	80033d8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1c4      	bne.n	80032c2 <HAL_SPI_Receive+0x146>
 8003338:	e038      	b.n	80033ac <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d115      	bne.n	8003374 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	b292      	uxth	r2, r2
 8003354:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003372:	e015      	b.n	80033a0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003374:	f7fd fd80 	bl	8000e78 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d803      	bhi.n	800338c <HAL_SPI_Receive+0x210>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d102      	bne.n	8003392 <HAL_SPI_Receive+0x216>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800339e:	e01b      	b.n	80033d8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1c6      	bne.n	800333a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fb5b 	bl	8003a6c <SPI_EndRxTransaction>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
 80033ce:	e003      	b.n	80033d8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b08a      	sub	sp, #40	@ 0x28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x26>
 800340c:	2302      	movs	r3, #2
 800340e:	e20a      	b.n	8003826 <HAL_SPI_TransmitReceive+0x43c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003418:	f7fd fd2e 	bl	8000e78 <HAL_GetTick>
 800341c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003424:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003434:	7efb      	ldrb	r3, [r7, #27]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d00e      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x6e>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003440:	d106      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x66>
 800344a:	7efb      	ldrb	r3, [r7, #27]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d003      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003450:	2302      	movs	r3, #2
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003456:	e1e0      	b.n	800381a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_SPI_TransmitReceive+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_SPI_TransmitReceive+0x80>
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003470:	e1d3      	b.n	800381a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b04      	cmp	r3, #4
 800347c:	d003      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2205      	movs	r2, #5
 8003482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	887a      	ldrh	r2, [r7, #2]
 80034b2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034c8:	d802      	bhi.n	80034d0 <HAL_SPI_TransmitReceive+0xe6>
 80034ca:	8a3b      	ldrh	r3, [r7, #16]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d908      	bls.n	80034e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	e007      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fc:	2b40      	cmp	r3, #64	@ 0x40
 80034fe:	d007      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003518:	f240 8081 	bls.w	800361e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_SPI_TransmitReceive+0x140>
 8003524:	8a7b      	ldrh	r3, [r7, #18]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d16d      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354e:	e05a      	b.n	8003606 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d11b      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x1ac>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_SPI_TransmitReceive+0x1ac>
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2b01      	cmp	r3, #1
 800356c:	d113      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d11c      	bne.n	80035de <HAL_SPI_TransmitReceive+0x1f4>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d016      	beq.n	80035de <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	b292      	uxth	r2, r2
 80035bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	1c9a      	adds	r2, r3, #2
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035de:	f7fd fc4b 	bl	8000e78 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d80b      	bhi.n	8003606 <HAL_SPI_TransmitReceive+0x21c>
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d007      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003604:	e109      	b.n	800381a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d19f      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x166>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d199      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x166>
 800361c:	e0e3      	b.n	80037e6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_SPI_TransmitReceive+0x244>
 8003626:	8a7b      	ldrh	r3, [r7, #18]
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 80cf 	bne.w	80037cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d912      	bls.n	800365e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b02      	subs	r3, #2
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800365c:	e0b6      	b.n	80037cc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003684:	e0a2      	b.n	80037cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d134      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x314>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02f      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x314>
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d12c      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d912      	bls.n	80036d4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b02      	subs	r3, #2
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036d2:	e012      	b.n	80036fa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d148      	bne.n	800379e <HAL_SPI_TransmitReceive+0x3b4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d042      	beq.n	800379e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d923      	bls.n	800376c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b02      	subs	r3, #2
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d81f      	bhi.n	800379a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e016      	b.n	800379a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f103 020c 	add.w	r2, r3, #12
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800379a:	2301      	movs	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800379e:	f7fd fb6b 	bl	8000e78 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d803      	bhi.n	80037b6 <HAL_SPI_TransmitReceive+0x3cc>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d102      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x3d2>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80037ca:	e026      	b.n	800381a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f47f af57 	bne.w	8003686 <HAL_SPI_TransmitReceive+0x29c>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f47f af50 	bne.w	8003686 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f996 	bl	8003b1c <SPI_EndRxTxTransaction>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003810:	e003      	b.n	800381a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003822:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003826:	4618      	mov	r0, r3
 8003828:	3728      	adds	r7, #40	@ 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003840:	f7fd fb1a 	bl	8000e78 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	4413      	add	r3, r2
 800384e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003850:	f7fd fb12 	bl	8000e78 <HAL_GetTick>
 8003854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003856:	4b39      	ldr	r3, [pc, #228]	@ (800393c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	015b      	lsls	r3, r3, #5
 800385c:	0d1b      	lsrs	r3, r3, #20
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003866:	e054      	b.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d050      	beq.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003870:	f7fd fb02 	bl	8000e78 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	429a      	cmp	r2, r3
 800387e:	d902      	bls.n	8003886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d13d      	bne.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389e:	d111      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a8:	d004      	beq.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d107      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038cc:	d10f      	bne.n	80038ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e017      	b.n	8003932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3b01      	subs	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4013      	ands	r3, r2
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	bf0c      	ite	eq
 8003922:	2301      	moveq	r3, #1
 8003924:	2300      	movne	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	429a      	cmp	r2, r3
 800392e:	d19b      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000034 	.word	0x20000034

08003940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003952:	f7fd fa91 	bl	8000e78 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	4413      	add	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003962:	f7fd fa89 	bl	8000e78 <HAL_GetTick>
 8003966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003970:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00da      	lsls	r2, r3, #3
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	0d1b      	lsrs	r3, r3, #20
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003988:	e060      	b.n	8003a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003990:	d107      	bne.n	80039a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d050      	beq.n	8003a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039aa:	f7fd fa65 	bl	8000e78 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d902      	bls.n	80039c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13d      	bne.n	8003a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d8:	d111      	bne.n	80039fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e2:	d004      	beq.n	80039ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ec:	d107      	bne.n	80039fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a06:	d10f      	bne.n	8003a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e010      	b.n	8003a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d196      	bne.n	800398a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	@ 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000034 	.word	0x20000034

08003a6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a80:	d111      	bne.n	8003aa6 <SPI_EndRxTransaction+0x3a>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a8a:	d004      	beq.n	8003a96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a94:	d107      	bne.n	8003aa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2180      	movs	r1, #128	@ 0x80
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff febd 	bl	8003830 <SPI_WaitFlagStateUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e023      	b.n	8003b14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad4:	d11d      	bne.n	8003b12 <SPI_EndRxTransaction+0xa6>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ade:	d004      	beq.n	8003aea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae8:	d113      	bne.n	8003b12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ff22 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e000      	b.n	8003b14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff03 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e027      	b.n	8003ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	@ 0x80
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fe68 	bl	8003830 <SPI_WaitFlagStateUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e014      	b.n	8003ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff fedc 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e000      	b.n	8003ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e040      	b.n	8003c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f816 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	@ 0x24
 8003bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa86 	bl	8004100 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8af 	bl	8003d58 <UART_SetConfig>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e01b      	b.n	8003c3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb05 	bl	8004244 <UART_CheckIdleState>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d177      	bne.n	8003d4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_UART_Transmit+0x24>
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e070      	b.n	8003d4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2221      	movs	r2, #33	@ 0x21
 8003c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd f8fd 	bl	8000e78 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d108      	bne.n	8003cac <HAL_UART_Transmit+0x68>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb4:	e02f      	b.n	8003d16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2180      	movs	r1, #128	@ 0x80
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fb67 	bl	8004394 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e03b      	b.n	8003d4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	3302      	adds	r3, #2
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e007      	b.n	8003d04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1c9      	bne.n	8003cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2140      	movs	r1, #64	@ 0x40
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb31 	bl	8004394 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e005      	b.n	8003d4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b92      	ldr	r3, [pc, #584]	@ (8003fcc <UART_SetConfig+0x274>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	6979      	ldr	r1, [r7, #20]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a80      	ldr	r2, [pc, #512]	@ (8003fd0 <UART_SetConfig+0x278>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d120      	bne.n	8003e16 <UART_SetConfig+0xbe>
 8003dd4:	4b7f      	ldr	r3, [pc, #508]	@ (8003fd4 <UART_SetConfig+0x27c>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d817      	bhi.n	8003e10 <UART_SetConfig+0xb8>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <UART_SetConfig+0x90>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e05 	.word	0x08003e05
 8003df0:	08003e0b 	.word	0x08003e0b
 8003df4:	08003dff 	.word	0x08003dff
 8003df8:	2301      	movs	r3, #1
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e0b5      	b.n	8003f6a <UART_SetConfig+0x212>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e0b2      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e04:	2304      	movs	r3, #4
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e0af      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e0ac      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e10:	2310      	movs	r3, #16
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e0a9      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003fd8 <UART_SetConfig+0x280>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d124      	bne.n	8003e6a <UART_SetConfig+0x112>
 8003e20:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd4 <UART_SetConfig+0x27c>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e2c:	d011      	beq.n	8003e52 <UART_SetConfig+0xfa>
 8003e2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e32:	d817      	bhi.n	8003e64 <UART_SetConfig+0x10c>
 8003e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x106>
 8003e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e3e:	d811      	bhi.n	8003e64 <UART_SetConfig+0x10c>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0xf4>
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e48:	d006      	beq.n	8003e58 <UART_SetConfig+0x100>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x10c>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e08b      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e088      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e085      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e082      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e07f      	b.n	8003f6a <UART_SetConfig+0x212>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fdc <UART_SetConfig+0x284>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d124      	bne.n	8003ebe <UART_SetConfig+0x166>
 8003e74:	4b57      	ldr	r3, [pc, #348]	@ (8003fd4 <UART_SetConfig+0x27c>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003e7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e80:	d011      	beq.n	8003ea6 <UART_SetConfig+0x14e>
 8003e82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e86:	d817      	bhi.n	8003eb8 <UART_SetConfig+0x160>
 8003e88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e8c:	d011      	beq.n	8003eb2 <UART_SetConfig+0x15a>
 8003e8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e92:	d811      	bhi.n	8003eb8 <UART_SetConfig+0x160>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <UART_SetConfig+0x148>
 8003e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e9c:	d006      	beq.n	8003eac <UART_SetConfig+0x154>
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x160>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e061      	b.n	8003f6a <UART_SetConfig+0x212>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e05e      	b.n	8003f6a <UART_SetConfig+0x212>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e05b      	b.n	8003f6a <UART_SetConfig+0x212>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e058      	b.n	8003f6a <UART_SetConfig+0x212>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e055      	b.n	8003f6a <UART_SetConfig+0x212>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a47      	ldr	r2, [pc, #284]	@ (8003fe0 <UART_SetConfig+0x288>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d124      	bne.n	8003f12 <UART_SetConfig+0x1ba>
 8003ec8:	4b42      	ldr	r3, [pc, #264]	@ (8003fd4 <UART_SetConfig+0x27c>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003ed0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ed4:	d011      	beq.n	8003efa <UART_SetConfig+0x1a2>
 8003ed6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eda:	d817      	bhi.n	8003f0c <UART_SetConfig+0x1b4>
 8003edc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ee0:	d011      	beq.n	8003f06 <UART_SetConfig+0x1ae>
 8003ee2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ee6:	d811      	bhi.n	8003f0c <UART_SetConfig+0x1b4>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <UART_SetConfig+0x19c>
 8003eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef0:	d006      	beq.n	8003f00 <UART_SetConfig+0x1a8>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x1b4>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e037      	b.n	8003f6a <UART_SetConfig+0x212>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e034      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e031      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e02e      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e02b      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a33      	ldr	r2, [pc, #204]	@ (8003fe4 <UART_SetConfig+0x28c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d124      	bne.n	8003f66 <UART_SetConfig+0x20e>
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <UART_SetConfig+0x27c>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003f24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f28:	d011      	beq.n	8003f4e <UART_SetConfig+0x1f6>
 8003f2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f2e:	d817      	bhi.n	8003f60 <UART_SetConfig+0x208>
 8003f30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f34:	d011      	beq.n	8003f5a <UART_SetConfig+0x202>
 8003f36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f3a:	d811      	bhi.n	8003f60 <UART_SetConfig+0x208>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <UART_SetConfig+0x1f0>
 8003f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f44:	d006      	beq.n	8003f54 <UART_SetConfig+0x1fc>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x208>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e00d      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e00a      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e007      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e004      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e001      	b.n	8003f6a <UART_SetConfig+0x212>
 8003f66:	2310      	movs	r3, #16
 8003f68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f72:	d16b      	bne.n	800404c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003f74:	7ffb      	ldrb	r3, [r7, #31]
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d838      	bhi.n	8003fec <UART_SetConfig+0x294>
 8003f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <UART_SetConfig+0x228>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fb5 	.word	0x08003fb5
 8003f8c:	08003fed 	.word	0x08003fed
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fed 	.word	0x08003fed
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe fc68 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	61b8      	str	r0, [r7, #24]
        break;
 8003faa:	e024      	b.n	8003ff6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7fe fc86 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003fb0:	61b8      	str	r0, [r7, #24]
        break;
 8003fb2:	e020      	b.n	8003ff6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <UART_SetConfig+0x290>)
 8003fb6:	61bb      	str	r3, [r7, #24]
        break;
 8003fb8:	e01d      	b.n	8003ff6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7fe fbfd 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8003fbe:	61b8      	str	r0, [r7, #24]
        break;
 8003fc0:	e019      	b.n	8003ff6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e015      	b.n	8003ff6 <UART_SetConfig+0x29e>
 8003fca:	bf00      	nop
 8003fcc:	efff69f3 	.word	0xefff69f3
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40004400 	.word	0x40004400
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	40004c00 	.word	0x40004c00
 8003fe4:	40005000 	.word	0x40005000
 8003fe8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77bb      	strb	r3, [r7, #30]
        break;
 8003ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d073      	beq.n	80040e4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	005a      	lsls	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	441a      	add	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b0f      	cmp	r3, #15
 8004016:	d916      	bls.n	8004046 <UART_SetConfig+0x2ee>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401e:	d212      	bcs.n	8004046 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f023 030f 	bic.w	r3, r3, #15
 8004028:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	b29b      	uxth	r3, r3
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	b29a      	uxth	r2, r3
 8004036:	89fb      	ldrh	r3, [r7, #14]
 8004038:	4313      	orrs	r3, r2
 800403a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	89fa      	ldrh	r2, [r7, #14]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e04e      	b.n	80040e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	77bb      	strb	r3, [r7, #30]
 800404a:	e04b      	b.n	80040e4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800404c:	7ffb      	ldrb	r3, [r7, #31]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d827      	bhi.n	80040a2 <UART_SetConfig+0x34a>
 8004052:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <UART_SetConfig+0x300>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800407d 	.word	0x0800407d
 800405c:	08004085 	.word	0x08004085
 8004060:	0800408d 	.word	0x0800408d
 8004064:	080040a3 	.word	0x080040a3
 8004068:	08004093 	.word	0x08004093
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040a3 	.word	0x080040a3
 8004074:	080040a3 	.word	0x080040a3
 8004078:	0800409b 	.word	0x0800409b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7fe fbfc 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004080:	61b8      	str	r0, [r7, #24]
        break;
 8004082:	e013      	b.n	80040ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7fe fc1a 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8004088:	61b8      	str	r0, [r7, #24]
        break;
 800408a:	e00f      	b.n	80040ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <UART_SetConfig+0x3a4>)
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e00c      	b.n	80040ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004092:	f7fe fb91 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8004096:	61b8      	str	r0, [r7, #24]
        break;
 8004098:	e008      	b.n	80040ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800409e:	61bb      	str	r3, [r7, #24]
        break;
 80040a0:	e004      	b.n	80040ac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	77bb      	strb	r3, [r7, #30]
        break;
 80040aa:	bf00      	nop
    }

    if (pclk != 0U)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085a      	lsrs	r2, r3, #1
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b0f      	cmp	r3, #15
 80040ca:	d909      	bls.n	80040e0 <UART_SetConfig+0x388>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d2:	d205      	bcs.n	80040e0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	e001      	b.n	80040e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	007a1200 	.word	0x007a1200

08004100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01a      	beq.n	8004216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041fe:	d10a      	bne.n	8004216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b098      	sub	sp, #96	@ 0x60
 8004248:	af02      	add	r7, sp, #8
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004254:	f7fc fe10 	bl	8000e78 <HAL_GetTick>
 8004258:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b08      	cmp	r3, #8
 8004266:	d12e      	bne.n	80042c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004268:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f88c 	bl	8004394 <UART_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d021      	beq.n	80042c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004296:	653b      	str	r3, [r7, #80]	@ 0x50
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e062      	b.n	800438c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d149      	bne.n	8004368 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	2200      	movs	r2, #0
 80042de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f856 	bl	8004394 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d03c      	beq.n	8004368 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	623b      	str	r3, [r7, #32]
   return(result);
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30
 800430e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	617b      	str	r3, [r7, #20]
   return(result);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e5      	bne.n	8004320 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e011      	b.n	800438c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3758      	adds	r7, #88	@ 0x58
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a4:	e04f      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d04b      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fc fd63 	bl	8000e78 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e04e      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d037      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b80      	cmp	r3, #128	@ 0x80
 80043da:	d034      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b40      	cmp	r3, #64	@ 0x40
 80043e0:	d031      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d110      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f838 	bl	800446e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2208      	movs	r2, #8
 8004402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e029      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004420:	d111      	bne.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800442a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f81e 	bl	800446e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e00f      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	bf0c      	ite	eq
 8004456:	2301      	moveq	r3, #1
 8004458:	2300      	movne	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	429a      	cmp	r2, r3
 8004462:	d0a0      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800446e:	b480      	push	{r7}
 8004470:	b095      	sub	sp, #84	@ 0x54
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800448a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004494:	643b      	str	r3, [r7, #64]	@ 0x40
 8004496:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800449a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d118      	bne.n	8004516 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0310 	bic.w	r3, r3, #16
 80044f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	613b      	str	r3, [r7, #16]
   return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e6      	bne.n	80044e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800452a:	bf00      	nop
 800452c:	3754      	adds	r7, #84	@ 0x54
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <_vsniprintf_r>:
 8004536:	b530      	push	{r4, r5, lr}
 8004538:	4614      	mov	r4, r2
 800453a:	2c00      	cmp	r4, #0
 800453c:	b09b      	sub	sp, #108	@ 0x6c
 800453e:	4605      	mov	r5, r0
 8004540:	461a      	mov	r2, r3
 8004542:	da05      	bge.n	8004550 <_vsniprintf_r+0x1a>
 8004544:	238b      	movs	r3, #139	@ 0x8b
 8004546:	6003      	str	r3, [r0, #0]
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b01b      	add	sp, #108	@ 0x6c
 800454e:	bd30      	pop	{r4, r5, pc}
 8004550:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004554:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004558:	bf14      	ite	ne
 800455a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800455e:	4623      	moveq	r3, r4
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004568:	9100      	str	r1, [sp, #0]
 800456a:	9104      	str	r1, [sp, #16]
 800456c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004570:	4669      	mov	r1, sp
 8004572:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004574:	f000 f9a0 	bl	80048b8 <_svfiprintf_r>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	bfbc      	itt	lt
 800457c:	238b      	movlt	r3, #139	@ 0x8b
 800457e:	602b      	strlt	r3, [r5, #0]
 8004580:	2c00      	cmp	r4, #0
 8004582:	d0e3      	beq.n	800454c <_vsniprintf_r+0x16>
 8004584:	9b00      	ldr	r3, [sp, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e7df      	b.n	800454c <_vsniprintf_r+0x16>

0800458c <vsniprintf>:
 800458c:	b507      	push	{r0, r1, r2, lr}
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	4601      	mov	r1, r0
 8004596:	4803      	ldr	r0, [pc, #12]	@ (80045a4 <vsniprintf+0x18>)
 8004598:	6800      	ldr	r0, [r0, #0]
 800459a:	f7ff ffcc 	bl	8004536 <_vsniprintf_r>
 800459e:	b003      	add	sp, #12
 80045a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80045a4:	20000040 	.word	0x20000040

080045a8 <memset>:
 80045a8:	4402      	add	r2, r0
 80045aa:	4603      	mov	r3, r0
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d100      	bne.n	80045b2 <memset+0xa>
 80045b0:	4770      	bx	lr
 80045b2:	f803 1b01 	strb.w	r1, [r3], #1
 80045b6:	e7f9      	b.n	80045ac <memset+0x4>

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	@ (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000040 	.word	0x20000040

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	@ (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004608 <__libc_init_array+0x44>)
 80045d8:	f000 fc66 	bl	8004ea8 <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08005010 	.word	0x08005010
 8004600:	08005010 	.word	0x08005010
 8004604:	08005010 	.word	0x08005010
 8004608:	08005014 	.word	0x08005014

0800460c <__retarget_lock_acquire_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_release_recursive>:
 800460e:	4770      	bx	lr

08004610 <_free_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4605      	mov	r5, r0
 8004614:	2900      	cmp	r1, #0
 8004616:	d041      	beq.n	800469c <_free_r+0x8c>
 8004618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461c:	1f0c      	subs	r4, r1, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfb8      	it	lt
 8004622:	18e4      	addlt	r4, r4, r3
 8004624:	f000 f8e0 	bl	80047e8 <__malloc_lock>
 8004628:	4a1d      	ldr	r2, [pc, #116]	@ (80046a0 <_free_r+0x90>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	b933      	cbnz	r3, 800463c <_free_r+0x2c>
 800462e:	6063      	str	r3, [r4, #4]
 8004630:	6014      	str	r4, [r2, #0]
 8004632:	4628      	mov	r0, r5
 8004634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004638:	f000 b8dc 	b.w	80047f4 <__malloc_unlock>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d908      	bls.n	8004652 <_free_r+0x42>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	1821      	adds	r1, r4, r0
 8004644:	428b      	cmp	r3, r1
 8004646:	bf01      	itttt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	e7ed      	b.n	800462e <_free_r+0x1e>
 8004652:	461a      	mov	r2, r3
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	b10b      	cbz	r3, 800465c <_free_r+0x4c>
 8004658:	42a3      	cmp	r3, r4
 800465a:	d9fa      	bls.n	8004652 <_free_r+0x42>
 800465c:	6811      	ldr	r1, [r2, #0]
 800465e:	1850      	adds	r0, r2, r1
 8004660:	42a0      	cmp	r0, r4
 8004662:	d10b      	bne.n	800467c <_free_r+0x6c>
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	4401      	add	r1, r0
 8004668:	1850      	adds	r0, r2, r1
 800466a:	4283      	cmp	r3, r0
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	d1e0      	bne.n	8004632 <_free_r+0x22>
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	6053      	str	r3, [r2, #4]
 8004676:	4408      	add	r0, r1
 8004678:	6010      	str	r0, [r2, #0]
 800467a:	e7da      	b.n	8004632 <_free_r+0x22>
 800467c:	d902      	bls.n	8004684 <_free_r+0x74>
 800467e:	230c      	movs	r3, #12
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	e7d6      	b.n	8004632 <_free_r+0x22>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	bf04      	itt	eq
 800468c:	6819      	ldreq	r1, [r3, #0]
 800468e:	685b      	ldreq	r3, [r3, #4]
 8004690:	6063      	str	r3, [r4, #4]
 8004692:	bf04      	itt	eq
 8004694:	1809      	addeq	r1, r1, r0
 8004696:	6021      	streq	r1, [r4, #0]
 8004698:	6054      	str	r4, [r2, #4]
 800469a:	e7ca      	b.n	8004632 <_free_r+0x22>
 800469c:	bd38      	pop	{r3, r4, r5, pc}
 800469e:	bf00      	nop
 80046a0:	200003fc 	.word	0x200003fc

080046a4 <sbrk_aligned>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4e0f      	ldr	r6, [pc, #60]	@ (80046e4 <sbrk_aligned+0x40>)
 80046a8:	460c      	mov	r4, r1
 80046aa:	6831      	ldr	r1, [r6, #0]
 80046ac:	4605      	mov	r5, r0
 80046ae:	b911      	cbnz	r1, 80046b6 <sbrk_aligned+0x12>
 80046b0:	f000 fba6 	bl	8004e00 <_sbrk_r>
 80046b4:	6030      	str	r0, [r6, #0]
 80046b6:	4621      	mov	r1, r4
 80046b8:	4628      	mov	r0, r5
 80046ba:	f000 fba1 	bl	8004e00 <_sbrk_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	d103      	bne.n	80046ca <sbrk_aligned+0x26>
 80046c2:	f04f 34ff 	mov.w	r4, #4294967295
 80046c6:	4620      	mov	r0, r4
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	1cc4      	adds	r4, r0, #3
 80046cc:	f024 0403 	bic.w	r4, r4, #3
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d0f8      	beq.n	80046c6 <sbrk_aligned+0x22>
 80046d4:	1a21      	subs	r1, r4, r0
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 fb92 	bl	8004e00 <_sbrk_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	d1f2      	bne.n	80046c6 <sbrk_aligned+0x22>
 80046e0:	e7ef      	b.n	80046c2 <sbrk_aligned+0x1e>
 80046e2:	bf00      	nop
 80046e4:	200003f8 	.word	0x200003f8

080046e8 <_malloc_r>:
 80046e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ec:	1ccd      	adds	r5, r1, #3
 80046ee:	f025 0503 	bic.w	r5, r5, #3
 80046f2:	3508      	adds	r5, #8
 80046f4:	2d0c      	cmp	r5, #12
 80046f6:	bf38      	it	cc
 80046f8:	250c      	movcc	r5, #12
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	4606      	mov	r6, r0
 80046fe:	db01      	blt.n	8004704 <_malloc_r+0x1c>
 8004700:	42a9      	cmp	r1, r5
 8004702:	d904      	bls.n	800470e <_malloc_r+0x26>
 8004704:	230c      	movs	r3, #12
 8004706:	6033      	str	r3, [r6, #0]
 8004708:	2000      	movs	r0, #0
 800470a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047e4 <_malloc_r+0xfc>
 8004712:	f000 f869 	bl	80047e8 <__malloc_lock>
 8004716:	f8d8 3000 	ldr.w	r3, [r8]
 800471a:	461c      	mov	r4, r3
 800471c:	bb44      	cbnz	r4, 8004770 <_malloc_r+0x88>
 800471e:	4629      	mov	r1, r5
 8004720:	4630      	mov	r0, r6
 8004722:	f7ff ffbf 	bl	80046a4 <sbrk_aligned>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	4604      	mov	r4, r0
 800472a:	d158      	bne.n	80047de <_malloc_r+0xf6>
 800472c:	f8d8 4000 	ldr.w	r4, [r8]
 8004730:	4627      	mov	r7, r4
 8004732:	2f00      	cmp	r7, #0
 8004734:	d143      	bne.n	80047be <_malloc_r+0xd6>
 8004736:	2c00      	cmp	r4, #0
 8004738:	d04b      	beq.n	80047d2 <_malloc_r+0xea>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	4639      	mov	r1, r7
 800473e:	4630      	mov	r0, r6
 8004740:	eb04 0903 	add.w	r9, r4, r3
 8004744:	f000 fb5c 	bl	8004e00 <_sbrk_r>
 8004748:	4581      	cmp	r9, r0
 800474a:	d142      	bne.n	80047d2 <_malloc_r+0xea>
 800474c:	6821      	ldr	r1, [r4, #0]
 800474e:	1a6d      	subs	r5, r5, r1
 8004750:	4629      	mov	r1, r5
 8004752:	4630      	mov	r0, r6
 8004754:	f7ff ffa6 	bl	80046a4 <sbrk_aligned>
 8004758:	3001      	adds	r0, #1
 800475a:	d03a      	beq.n	80047d2 <_malloc_r+0xea>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	442b      	add	r3, r5
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	f8d8 3000 	ldr.w	r3, [r8]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	bb62      	cbnz	r2, 80047c4 <_malloc_r+0xdc>
 800476a:	f8c8 7000 	str.w	r7, [r8]
 800476e:	e00f      	b.n	8004790 <_malloc_r+0xa8>
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	1b52      	subs	r2, r2, r5
 8004774:	d420      	bmi.n	80047b8 <_malloc_r+0xd0>
 8004776:	2a0b      	cmp	r2, #11
 8004778:	d917      	bls.n	80047aa <_malloc_r+0xc2>
 800477a:	1961      	adds	r1, r4, r5
 800477c:	42a3      	cmp	r3, r4
 800477e:	6025      	str	r5, [r4, #0]
 8004780:	bf18      	it	ne
 8004782:	6059      	strne	r1, [r3, #4]
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	bf08      	it	eq
 8004788:	f8c8 1000 	streq.w	r1, [r8]
 800478c:	5162      	str	r2, [r4, r5]
 800478e:	604b      	str	r3, [r1, #4]
 8004790:	4630      	mov	r0, r6
 8004792:	f000 f82f 	bl	80047f4 <__malloc_unlock>
 8004796:	f104 000b 	add.w	r0, r4, #11
 800479a:	1d23      	adds	r3, r4, #4
 800479c:	f020 0007 	bic.w	r0, r0, #7
 80047a0:	1ac2      	subs	r2, r0, r3
 80047a2:	bf1c      	itt	ne
 80047a4:	1a1b      	subne	r3, r3, r0
 80047a6:	50a3      	strne	r3, [r4, r2]
 80047a8:	e7af      	b.n	800470a <_malloc_r+0x22>
 80047aa:	6862      	ldr	r2, [r4, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	bf0c      	ite	eq
 80047b0:	f8c8 2000 	streq.w	r2, [r8]
 80047b4:	605a      	strne	r2, [r3, #4]
 80047b6:	e7eb      	b.n	8004790 <_malloc_r+0xa8>
 80047b8:	4623      	mov	r3, r4
 80047ba:	6864      	ldr	r4, [r4, #4]
 80047bc:	e7ae      	b.n	800471c <_malloc_r+0x34>
 80047be:	463c      	mov	r4, r7
 80047c0:	687f      	ldr	r7, [r7, #4]
 80047c2:	e7b6      	b.n	8004732 <_malloc_r+0x4a>
 80047c4:	461a      	mov	r2, r3
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	d1fb      	bne.n	80047c4 <_malloc_r+0xdc>
 80047cc:	2300      	movs	r3, #0
 80047ce:	6053      	str	r3, [r2, #4]
 80047d0:	e7de      	b.n	8004790 <_malloc_r+0xa8>
 80047d2:	230c      	movs	r3, #12
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	4630      	mov	r0, r6
 80047d8:	f000 f80c 	bl	80047f4 <__malloc_unlock>
 80047dc:	e794      	b.n	8004708 <_malloc_r+0x20>
 80047de:	6005      	str	r5, [r0, #0]
 80047e0:	e7d6      	b.n	8004790 <_malloc_r+0xa8>
 80047e2:	bf00      	nop
 80047e4:	200003fc 	.word	0x200003fc

080047e8 <__malloc_lock>:
 80047e8:	4801      	ldr	r0, [pc, #4]	@ (80047f0 <__malloc_lock+0x8>)
 80047ea:	f7ff bf0f 	b.w	800460c <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	200003f4 	.word	0x200003f4

080047f4 <__malloc_unlock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__malloc_unlock+0x8>)
 80047f6:	f7ff bf0a 	b.w	800460e <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	200003f4 	.word	0x200003f4

08004800 <__ssputs_r>:
 8004800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004804:	688e      	ldr	r6, [r1, #8]
 8004806:	461f      	mov	r7, r3
 8004808:	42be      	cmp	r6, r7
 800480a:	680b      	ldr	r3, [r1, #0]
 800480c:	4682      	mov	sl, r0
 800480e:	460c      	mov	r4, r1
 8004810:	4690      	mov	r8, r2
 8004812:	d82d      	bhi.n	8004870 <__ssputs_r+0x70>
 8004814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004818:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800481c:	d026      	beq.n	800486c <__ssputs_r+0x6c>
 800481e:	6965      	ldr	r5, [r4, #20]
 8004820:	6909      	ldr	r1, [r1, #16]
 8004822:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004826:	eba3 0901 	sub.w	r9, r3, r1
 800482a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800482e:	1c7b      	adds	r3, r7, #1
 8004830:	444b      	add	r3, r9
 8004832:	106d      	asrs	r5, r5, #1
 8004834:	429d      	cmp	r5, r3
 8004836:	bf38      	it	cc
 8004838:	461d      	movcc	r5, r3
 800483a:	0553      	lsls	r3, r2, #21
 800483c:	d527      	bpl.n	800488e <__ssputs_r+0x8e>
 800483e:	4629      	mov	r1, r5
 8004840:	f7ff ff52 	bl	80046e8 <_malloc_r>
 8004844:	4606      	mov	r6, r0
 8004846:	b360      	cbz	r0, 80048a2 <__ssputs_r+0xa2>
 8004848:	6921      	ldr	r1, [r4, #16]
 800484a:	464a      	mov	r2, r9
 800484c:	f000 fae8 	bl	8004e20 <memcpy>
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	6126      	str	r6, [r4, #16]
 800485e:	6165      	str	r5, [r4, #20]
 8004860:	444e      	add	r6, r9
 8004862:	eba5 0509 	sub.w	r5, r5, r9
 8004866:	6026      	str	r6, [r4, #0]
 8004868:	60a5      	str	r5, [r4, #8]
 800486a:	463e      	mov	r6, r7
 800486c:	42be      	cmp	r6, r7
 800486e:	d900      	bls.n	8004872 <__ssputs_r+0x72>
 8004870:	463e      	mov	r6, r7
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	4632      	mov	r2, r6
 8004876:	4641      	mov	r1, r8
 8004878:	f000 faa8 	bl	8004dcc <memmove>
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	1b9b      	subs	r3, r3, r6
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	4433      	add	r3, r6
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	2000      	movs	r0, #0
 800488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488e:	462a      	mov	r2, r5
 8004890:	f000 fad4 	bl	8004e3c <_realloc_r>
 8004894:	4606      	mov	r6, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d1e0      	bne.n	800485c <__ssputs_r+0x5c>
 800489a:	6921      	ldr	r1, [r4, #16]
 800489c:	4650      	mov	r0, sl
 800489e:	f7ff feb7 	bl	8004610 <_free_r>
 80048a2:	230c      	movs	r3, #12
 80048a4:	f8ca 3000 	str.w	r3, [sl]
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	e7e9      	b.n	800488a <__ssputs_r+0x8a>
	...

080048b8 <_svfiprintf_r>:
 80048b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	4698      	mov	r8, r3
 80048be:	898b      	ldrh	r3, [r1, #12]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	b09d      	sub	sp, #116	@ 0x74
 80048c4:	4607      	mov	r7, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	4614      	mov	r4, r2
 80048ca:	d510      	bpl.n	80048ee <_svfiprintf_r+0x36>
 80048cc:	690b      	ldr	r3, [r1, #16]
 80048ce:	b973      	cbnz	r3, 80048ee <_svfiprintf_r+0x36>
 80048d0:	2140      	movs	r1, #64	@ 0x40
 80048d2:	f7ff ff09 	bl	80046e8 <_malloc_r>
 80048d6:	6028      	str	r0, [r5, #0]
 80048d8:	6128      	str	r0, [r5, #16]
 80048da:	b930      	cbnz	r0, 80048ea <_svfiprintf_r+0x32>
 80048dc:	230c      	movs	r3, #12
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	b01d      	add	sp, #116	@ 0x74
 80048e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ea:	2340      	movs	r3, #64	@ 0x40
 80048ec:	616b      	str	r3, [r5, #20]
 80048ee:	2300      	movs	r3, #0
 80048f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f2:	2320      	movs	r3, #32
 80048f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048fc:	2330      	movs	r3, #48	@ 0x30
 80048fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a9c <_svfiprintf_r+0x1e4>
 8004902:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004906:	f04f 0901 	mov.w	r9, #1
 800490a:	4623      	mov	r3, r4
 800490c:	469a      	mov	sl, r3
 800490e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004912:	b10a      	cbz	r2, 8004918 <_svfiprintf_r+0x60>
 8004914:	2a25      	cmp	r2, #37	@ 0x25
 8004916:	d1f9      	bne.n	800490c <_svfiprintf_r+0x54>
 8004918:	ebba 0b04 	subs.w	fp, sl, r4
 800491c:	d00b      	beq.n	8004936 <_svfiprintf_r+0x7e>
 800491e:	465b      	mov	r3, fp
 8004920:	4622      	mov	r2, r4
 8004922:	4629      	mov	r1, r5
 8004924:	4638      	mov	r0, r7
 8004926:	f7ff ff6b 	bl	8004800 <__ssputs_r>
 800492a:	3001      	adds	r0, #1
 800492c:	f000 80a7 	beq.w	8004a7e <_svfiprintf_r+0x1c6>
 8004930:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004932:	445a      	add	r2, fp
 8004934:	9209      	str	r2, [sp, #36]	@ 0x24
 8004936:	f89a 3000 	ldrb.w	r3, [sl]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 809f 	beq.w	8004a7e <_svfiprintf_r+0x1c6>
 8004940:	2300      	movs	r3, #0
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800494a:	f10a 0a01 	add.w	sl, sl, #1
 800494e:	9304      	str	r3, [sp, #16]
 8004950:	9307      	str	r3, [sp, #28]
 8004952:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004956:	931a      	str	r3, [sp, #104]	@ 0x68
 8004958:	4654      	mov	r4, sl
 800495a:	2205      	movs	r2, #5
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	484e      	ldr	r0, [pc, #312]	@ (8004a9c <_svfiprintf_r+0x1e4>)
 8004962:	f7fb fc45 	bl	80001f0 <memchr>
 8004966:	9a04      	ldr	r2, [sp, #16]
 8004968:	b9d8      	cbnz	r0, 80049a2 <_svfiprintf_r+0xea>
 800496a:	06d0      	lsls	r0, r2, #27
 800496c:	bf44      	itt	mi
 800496e:	2320      	movmi	r3, #32
 8004970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004974:	0711      	lsls	r1, r2, #28
 8004976:	bf44      	itt	mi
 8004978:	232b      	movmi	r3, #43	@ 0x2b
 800497a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b2a      	cmp	r3, #42	@ 0x2a
 8004984:	d015      	beq.n	80049b2 <_svfiprintf_r+0xfa>
 8004986:	9a07      	ldr	r2, [sp, #28]
 8004988:	4654      	mov	r4, sl
 800498a:	2000      	movs	r0, #0
 800498c:	f04f 0c0a 	mov.w	ip, #10
 8004990:	4621      	mov	r1, r4
 8004992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004996:	3b30      	subs	r3, #48	@ 0x30
 8004998:	2b09      	cmp	r3, #9
 800499a:	d94b      	bls.n	8004a34 <_svfiprintf_r+0x17c>
 800499c:	b1b0      	cbz	r0, 80049cc <_svfiprintf_r+0x114>
 800499e:	9207      	str	r2, [sp, #28]
 80049a0:	e014      	b.n	80049cc <_svfiprintf_r+0x114>
 80049a2:	eba0 0308 	sub.w	r3, r0, r8
 80049a6:	fa09 f303 	lsl.w	r3, r9, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	46a2      	mov	sl, r4
 80049b0:	e7d2      	b.n	8004958 <_svfiprintf_r+0xa0>
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	1d19      	adds	r1, r3, #4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	9103      	str	r1, [sp, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bfbb      	ittet	lt
 80049be:	425b      	neglt	r3, r3
 80049c0:	f042 0202 	orrlt.w	r2, r2, #2
 80049c4:	9307      	strge	r3, [sp, #28]
 80049c6:	9307      	strlt	r3, [sp, #28]
 80049c8:	bfb8      	it	lt
 80049ca:	9204      	strlt	r2, [sp, #16]
 80049cc:	7823      	ldrb	r3, [r4, #0]
 80049ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80049d0:	d10a      	bne.n	80049e8 <_svfiprintf_r+0x130>
 80049d2:	7863      	ldrb	r3, [r4, #1]
 80049d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d6:	d132      	bne.n	8004a3e <_svfiprintf_r+0x186>
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	1d1a      	adds	r2, r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	9203      	str	r2, [sp, #12]
 80049e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049e4:	3402      	adds	r4, #2
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004aac <_svfiprintf_r+0x1f4>
 80049ec:	7821      	ldrb	r1, [r4, #0]
 80049ee:	2203      	movs	r2, #3
 80049f0:	4650      	mov	r0, sl
 80049f2:	f7fb fbfd 	bl	80001f0 <memchr>
 80049f6:	b138      	cbz	r0, 8004a08 <_svfiprintf_r+0x150>
 80049f8:	9b04      	ldr	r3, [sp, #16]
 80049fa:	eba0 000a 	sub.w	r0, r0, sl
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	4082      	lsls	r2, r0
 8004a02:	4313      	orrs	r3, r2
 8004a04:	3401      	adds	r4, #1
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0c:	4824      	ldr	r0, [pc, #144]	@ (8004aa0 <_svfiprintf_r+0x1e8>)
 8004a0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a12:	2206      	movs	r2, #6
 8004a14:	f7fb fbec 	bl	80001f0 <memchr>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d036      	beq.n	8004a8a <_svfiprintf_r+0x1d2>
 8004a1c:	4b21      	ldr	r3, [pc, #132]	@ (8004aa4 <_svfiprintf_r+0x1ec>)
 8004a1e:	bb1b      	cbnz	r3, 8004a68 <_svfiprintf_r+0x1b0>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	3307      	adds	r3, #7
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	3308      	adds	r3, #8
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a2e:	4433      	add	r3, r6
 8004a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a32:	e76a      	b.n	800490a <_svfiprintf_r+0x52>
 8004a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a38:	460c      	mov	r4, r1
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e7a8      	b.n	8004990 <_svfiprintf_r+0xd8>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	3401      	adds	r4, #1
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	4619      	mov	r1, r3
 8004a46:	f04f 0c0a 	mov.w	ip, #10
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a50:	3a30      	subs	r2, #48	@ 0x30
 8004a52:	2a09      	cmp	r2, #9
 8004a54:	d903      	bls.n	8004a5e <_svfiprintf_r+0x1a6>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0c6      	beq.n	80049e8 <_svfiprintf_r+0x130>
 8004a5a:	9105      	str	r1, [sp, #20]
 8004a5c:	e7c4      	b.n	80049e8 <_svfiprintf_r+0x130>
 8004a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a62:	4604      	mov	r4, r0
 8004a64:	2301      	movs	r3, #1
 8004a66:	e7f0      	b.n	8004a4a <_svfiprintf_r+0x192>
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <_svfiprintf_r+0x1f0>)
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4638      	mov	r0, r7
 8004a74:	f3af 8000 	nop.w
 8004a78:	1c42      	adds	r2, r0, #1
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	d1d6      	bne.n	8004a2c <_svfiprintf_r+0x174>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	065b      	lsls	r3, r3, #25
 8004a82:	f53f af2d 	bmi.w	80048e0 <_svfiprintf_r+0x28>
 8004a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a88:	e72c      	b.n	80048e4 <_svfiprintf_r+0x2c>
 8004a8a:	ab03      	add	r3, sp, #12
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	462a      	mov	r2, r5
 8004a90:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <_svfiprintf_r+0x1f0>)
 8004a92:	a904      	add	r1, sp, #16
 8004a94:	4638      	mov	r0, r7
 8004a96:	f000 f879 	bl	8004b8c <_printf_i>
 8004a9a:	e7ed      	b.n	8004a78 <_svfiprintf_r+0x1c0>
 8004a9c:	08004fd4 	.word	0x08004fd4
 8004aa0:	08004fde 	.word	0x08004fde
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	08004801 	.word	0x08004801
 8004aac:	08004fda 	.word	0x08004fda

08004ab0 <_printf_common>:
 8004ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	688a      	ldr	r2, [r1, #8]
 8004aba:	690b      	ldr	r3, [r1, #16]
 8004abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	bfb8      	it	lt
 8004ac4:	4613      	movlt	r3, r2
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004acc:	4607      	mov	r7, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b10a      	cbz	r2, 8004ad6 <_printf_common+0x26>
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	0699      	lsls	r1, r3, #26
 8004ada:	bf42      	ittt	mi
 8004adc:	6833      	ldrmi	r3, [r6, #0]
 8004ade:	3302      	addmi	r3, #2
 8004ae0:	6033      	strmi	r3, [r6, #0]
 8004ae2:	6825      	ldr	r5, [r4, #0]
 8004ae4:	f015 0506 	ands.w	r5, r5, #6
 8004ae8:	d106      	bne.n	8004af8 <_printf_common+0x48>
 8004aea:	f104 0a19 	add.w	sl, r4, #25
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dc26      	bgt.n	8004b46 <_printf_common+0x96>
 8004af8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	3b00      	subs	r3, #0
 8004b00:	bf18      	it	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	0692      	lsls	r2, r2, #26
 8004b06:	d42b      	bmi.n	8004b60 <_printf_common+0xb0>
 8004b08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c8      	blx	r9
 8004b12:	3001      	adds	r0, #1
 8004b14:	d01e      	beq.n	8004b54 <_printf_common+0xa4>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	6922      	ldr	r2, [r4, #16]
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf02      	ittt	eq
 8004b22:	68e5      	ldreq	r5, [r4, #12]
 8004b24:	6833      	ldreq	r3, [r6, #0]
 8004b26:	1aed      	subeq	r5, r5, r3
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	bf0c      	ite	eq
 8004b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b30:	2500      	movne	r5, #0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	bfc4      	itt	gt
 8004b36:	1a9b      	subgt	r3, r3, r2
 8004b38:	18ed      	addgt	r5, r5, r3
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	341a      	adds	r4, #26
 8004b3e:	42b5      	cmp	r5, r6
 8004b40:	d11a      	bne.n	8004b78 <_printf_common+0xc8>
 8004b42:	2000      	movs	r0, #0
 8004b44:	e008      	b.n	8004b58 <_printf_common+0xa8>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4652      	mov	r2, sl
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	47c8      	blx	r9
 8004b50:	3001      	adds	r0, #1
 8004b52:	d103      	bne.n	8004b5c <_printf_common+0xac>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	e7c6      	b.n	8004aee <_printf_common+0x3e>
 8004b60:	18e1      	adds	r1, r4, r3
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	2030      	movs	r0, #48	@ 0x30
 8004b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b6a:	4422      	add	r2, r4
 8004b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b74:	3302      	adds	r3, #2
 8004b76:	e7c7      	b.n	8004b08 <_printf_common+0x58>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	4638      	mov	r0, r7
 8004b80:	47c8      	blx	r9
 8004b82:	3001      	adds	r0, #1
 8004b84:	d0e6      	beq.n	8004b54 <_printf_common+0xa4>
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7d9      	b.n	8004b3e <_printf_common+0x8e>
	...

08004b8c <_printf_i>:
 8004b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	7e0f      	ldrb	r7, [r1, #24]
 8004b92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b94:	2f78      	cmp	r7, #120	@ 0x78
 8004b96:	4691      	mov	r9, r2
 8004b98:	4680      	mov	r8, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	469a      	mov	sl, r3
 8004b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ba2:	d807      	bhi.n	8004bb4 <_printf_i+0x28>
 8004ba4:	2f62      	cmp	r7, #98	@ 0x62
 8004ba6:	d80a      	bhi.n	8004bbe <_printf_i+0x32>
 8004ba8:	2f00      	cmp	r7, #0
 8004baa:	f000 80d2 	beq.w	8004d52 <_printf_i+0x1c6>
 8004bae:	2f58      	cmp	r7, #88	@ 0x58
 8004bb0:	f000 80b9 	beq.w	8004d26 <_printf_i+0x19a>
 8004bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bbc:	e03a      	b.n	8004c34 <_printf_i+0xa8>
 8004bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bc2:	2b15      	cmp	r3, #21
 8004bc4:	d8f6      	bhi.n	8004bb4 <_printf_i+0x28>
 8004bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bcc <_printf_i+0x40>)
 8004bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004bb5 	.word	0x08004bb5
 8004bd8:	08004bb5 	.word	0x08004bb5
 8004bdc:	08004bb5 	.word	0x08004bb5
 8004be0:	08004bb5 	.word	0x08004bb5
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004bb5 	.word	0x08004bb5
 8004bec:	08004bb5 	.word	0x08004bb5
 8004bf0:	08004bb5 	.word	0x08004bb5
 8004bf4:	08004bb5 	.word	0x08004bb5
 8004bf8:	08004d39 	.word	0x08004d39
 8004bfc:	08004c63 	.word	0x08004c63
 8004c00:	08004cf3 	.word	0x08004cf3
 8004c04:	08004bb5 	.word	0x08004bb5
 8004c08:	08004bb5 	.word	0x08004bb5
 8004c0c:	08004d5b 	.word	0x08004d5b
 8004c10:	08004bb5 	.word	0x08004bb5
 8004c14:	08004c63 	.word	0x08004c63
 8004c18:	08004bb5 	.word	0x08004bb5
 8004c1c:	08004bb5 	.word	0x08004bb5
 8004c20:	08004cfb 	.word	0x08004cfb
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6032      	str	r2, [r6, #0]
 8004c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c34:	2301      	movs	r3, #1
 8004c36:	e09d      	b.n	8004d74 <_printf_i+0x1e8>
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	6031      	str	r1, [r6, #0]
 8004c40:	0606      	lsls	r6, r0, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xbc>
 8004c44:	681d      	ldr	r5, [r3, #0]
 8004c46:	e003      	b.n	8004c50 <_printf_i+0xc4>
 8004c48:	0645      	lsls	r5, r0, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xb8>
 8004c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	da03      	bge.n	8004c5c <_printf_i+0xd0>
 8004c54:	232d      	movs	r3, #45	@ 0x2d
 8004c56:	426d      	negs	r5, r5
 8004c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c5c:	4859      	ldr	r0, [pc, #356]	@ (8004dc4 <_printf_i+0x238>)
 8004c5e:	230a      	movs	r3, #10
 8004c60:	e011      	b.n	8004c86 <_printf_i+0xfa>
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	6833      	ldr	r3, [r6, #0]
 8004c66:	0608      	lsls	r0, r1, #24
 8004c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c6c:	d402      	bmi.n	8004c74 <_printf_i+0xe8>
 8004c6e:	0649      	lsls	r1, r1, #25
 8004c70:	bf48      	it	mi
 8004c72:	b2ad      	uxthmi	r5, r5
 8004c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c76:	4853      	ldr	r0, [pc, #332]	@ (8004dc4 <_printf_i+0x238>)
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	bf14      	ite	ne
 8004c7c:	230a      	movne	r3, #10
 8004c7e:	2308      	moveq	r3, #8
 8004c80:	2100      	movs	r1, #0
 8004c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c86:	6866      	ldr	r6, [r4, #4]
 8004c88:	60a6      	str	r6, [r4, #8]
 8004c8a:	2e00      	cmp	r6, #0
 8004c8c:	bfa2      	ittt	ge
 8004c8e:	6821      	ldrge	r1, [r4, #0]
 8004c90:	f021 0104 	bicge.w	r1, r1, #4
 8004c94:	6021      	strge	r1, [r4, #0]
 8004c96:	b90d      	cbnz	r5, 8004c9c <_printf_i+0x110>
 8004c98:	2e00      	cmp	r6, #0
 8004c9a:	d04b      	beq.n	8004d34 <_printf_i+0x1a8>
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ca2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ca6:	5dc7      	ldrb	r7, [r0, r7]
 8004ca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cac:	462f      	mov	r7, r5
 8004cae:	42bb      	cmp	r3, r7
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	d9f4      	bls.n	8004c9e <_printf_i+0x112>
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d10b      	bne.n	8004cd0 <_printf_i+0x144>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	07df      	lsls	r7, r3, #31
 8004cbc:	d508      	bpl.n	8004cd0 <_printf_i+0x144>
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	6861      	ldr	r1, [r4, #4]
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	bfde      	ittt	le
 8004cc6:	2330      	movle	r3, #48	@ 0x30
 8004cc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cd0:	1b92      	subs	r2, r2, r6
 8004cd2:	6122      	str	r2, [r4, #16]
 8004cd4:	f8cd a000 	str.w	sl, [sp]
 8004cd8:	464b      	mov	r3, r9
 8004cda:	aa03      	add	r2, sp, #12
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f7ff fee6 	bl	8004ab0 <_printf_common>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d14a      	bne.n	8004d7e <_printf_i+0x1f2>
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	b004      	add	sp, #16
 8004cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	f043 0320 	orr.w	r3, r3, #32
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	4833      	ldr	r0, [pc, #204]	@ (8004dc8 <_printf_i+0x23c>)
 8004cfc:	2778      	movs	r7, #120	@ 0x78
 8004cfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	6831      	ldr	r1, [r6, #0]
 8004d06:	061f      	lsls	r7, r3, #24
 8004d08:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d0c:	d402      	bmi.n	8004d14 <_printf_i+0x188>
 8004d0e:	065f      	lsls	r7, r3, #25
 8004d10:	bf48      	it	mi
 8004d12:	b2ad      	uxthmi	r5, r5
 8004d14:	6031      	str	r1, [r6, #0]
 8004d16:	07d9      	lsls	r1, r3, #31
 8004d18:	bf44      	itt	mi
 8004d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d1e:	6023      	strmi	r3, [r4, #0]
 8004d20:	b11d      	cbz	r5, 8004d2a <_printf_i+0x19e>
 8004d22:	2310      	movs	r3, #16
 8004d24:	e7ac      	b.n	8004c80 <_printf_i+0xf4>
 8004d26:	4827      	ldr	r0, [pc, #156]	@ (8004dc4 <_printf_i+0x238>)
 8004d28:	e7e9      	b.n	8004cfe <_printf_i+0x172>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f023 0320 	bic.w	r3, r3, #32
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	e7f6      	b.n	8004d22 <_printf_i+0x196>
 8004d34:	4616      	mov	r6, r2
 8004d36:	e7bd      	b.n	8004cb4 <_printf_i+0x128>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	6825      	ldr	r5, [r4, #0]
 8004d3c:	6961      	ldr	r1, [r4, #20]
 8004d3e:	1d18      	adds	r0, r3, #4
 8004d40:	6030      	str	r0, [r6, #0]
 8004d42:	062e      	lsls	r6, r5, #24
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	d501      	bpl.n	8004d4c <_printf_i+0x1c0>
 8004d48:	6019      	str	r1, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <_printf_i+0x1c6>
 8004d4c:	0668      	lsls	r0, r5, #25
 8004d4e:	d5fb      	bpl.n	8004d48 <_printf_i+0x1bc>
 8004d50:	8019      	strh	r1, [r3, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	4616      	mov	r6, r2
 8004d58:	e7bc      	b.n	8004cd4 <_printf_i+0x148>
 8004d5a:	6833      	ldr	r3, [r6, #0]
 8004d5c:	1d1a      	adds	r2, r3, #4
 8004d5e:	6032      	str	r2, [r6, #0]
 8004d60:	681e      	ldr	r6, [r3, #0]
 8004d62:	6862      	ldr	r2, [r4, #4]
 8004d64:	2100      	movs	r1, #0
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7fb fa42 	bl	80001f0 <memchr>
 8004d6c:	b108      	cbz	r0, 8004d72 <_printf_i+0x1e6>
 8004d6e:	1b80      	subs	r0, r0, r6
 8004d70:	6060      	str	r0, [r4, #4]
 8004d72:	6863      	ldr	r3, [r4, #4]
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	2300      	movs	r3, #0
 8004d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d7c:	e7aa      	b.n	8004cd4 <_printf_i+0x148>
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	4632      	mov	r2, r6
 8004d82:	4649      	mov	r1, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	47d0      	blx	sl
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d0ad      	beq.n	8004ce8 <_printf_i+0x15c>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	079b      	lsls	r3, r3, #30
 8004d90:	d413      	bmi.n	8004dba <_printf_i+0x22e>
 8004d92:	68e0      	ldr	r0, [r4, #12]
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	4298      	cmp	r0, r3
 8004d98:	bfb8      	it	lt
 8004d9a:	4618      	movlt	r0, r3
 8004d9c:	e7a6      	b.n	8004cec <_printf_i+0x160>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4632      	mov	r2, r6
 8004da2:	4649      	mov	r1, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	47d0      	blx	sl
 8004da8:	3001      	adds	r0, #1
 8004daa:	d09d      	beq.n	8004ce8 <_printf_i+0x15c>
 8004dac:	3501      	adds	r5, #1
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	9903      	ldr	r1, [sp, #12]
 8004db2:	1a5b      	subs	r3, r3, r1
 8004db4:	42ab      	cmp	r3, r5
 8004db6:	dcf2      	bgt.n	8004d9e <_printf_i+0x212>
 8004db8:	e7eb      	b.n	8004d92 <_printf_i+0x206>
 8004dba:	2500      	movs	r5, #0
 8004dbc:	f104 0619 	add.w	r6, r4, #25
 8004dc0:	e7f5      	b.n	8004dae <_printf_i+0x222>
 8004dc2:	bf00      	nop
 8004dc4:	08004fe5 	.word	0x08004fe5
 8004dc8:	08004ff6 	.word	0x08004ff6

08004dcc <memmove>:
 8004dcc:	4288      	cmp	r0, r1
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	eb01 0402 	add.w	r4, r1, r2
 8004dd4:	d902      	bls.n	8004ddc <memmove+0x10>
 8004dd6:	4284      	cmp	r4, r0
 8004dd8:	4623      	mov	r3, r4
 8004dda:	d807      	bhi.n	8004dec <memmove+0x20>
 8004ddc:	1e43      	subs	r3, r0, #1
 8004dde:	42a1      	cmp	r1, r4
 8004de0:	d008      	beq.n	8004df4 <memmove+0x28>
 8004de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dea:	e7f8      	b.n	8004dde <memmove+0x12>
 8004dec:	4402      	add	r2, r0
 8004dee:	4601      	mov	r1, r0
 8004df0:	428a      	cmp	r2, r1
 8004df2:	d100      	bne.n	8004df6 <memmove+0x2a>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dfe:	e7f7      	b.n	8004df0 <memmove+0x24>

08004e00 <_sbrk_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d06      	ldr	r5, [pc, #24]	@ (8004e1c <_sbrk_r+0x1c>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fb ff68 	bl	8000ce0 <_sbrk>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_sbrk_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_sbrk_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	200003f0 	.word	0x200003f0

08004e20 <memcpy>:
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e28:	d100      	bne.n	8004e2c <memcpy+0xc>
 8004e2a:	4770      	bx	lr
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d1f9      	bne.n	8004e2e <memcpy+0xe>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <_realloc_r>:
 8004e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	4680      	mov	r8, r0
 8004e42:	4615      	mov	r5, r2
 8004e44:	460c      	mov	r4, r1
 8004e46:	b921      	cbnz	r1, 8004e52 <_realloc_r+0x16>
 8004e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	f7ff bc4b 	b.w	80046e8 <_malloc_r>
 8004e52:	b92a      	cbnz	r2, 8004e60 <_realloc_r+0x24>
 8004e54:	f7ff fbdc 	bl	8004610 <_free_r>
 8004e58:	2400      	movs	r4, #0
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e60:	f000 f81a 	bl	8004e98 <_malloc_usable_size_r>
 8004e64:	4285      	cmp	r5, r0
 8004e66:	4606      	mov	r6, r0
 8004e68:	d802      	bhi.n	8004e70 <_realloc_r+0x34>
 8004e6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e6e:	d8f4      	bhi.n	8004e5a <_realloc_r+0x1e>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4640      	mov	r0, r8
 8004e74:	f7ff fc38 	bl	80046e8 <_malloc_r>
 8004e78:	4607      	mov	r7, r0
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d0ec      	beq.n	8004e58 <_realloc_r+0x1c>
 8004e7e:	42b5      	cmp	r5, r6
 8004e80:	462a      	mov	r2, r5
 8004e82:	4621      	mov	r1, r4
 8004e84:	bf28      	it	cs
 8004e86:	4632      	movcs	r2, r6
 8004e88:	f7ff ffca 	bl	8004e20 <memcpy>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f7ff fbbe 	bl	8004610 <_free_r>
 8004e94:	463c      	mov	r4, r7
 8004e96:	e7e0      	b.n	8004e5a <_realloc_r+0x1e>

08004e98 <_malloc_usable_size_r>:
 8004e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e9c:	1f18      	subs	r0, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bfbc      	itt	lt
 8004ea2:	580b      	ldrlt	r3, [r1, r0]
 8004ea4:	18c0      	addlt	r0, r0, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_init>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr

08004eb4 <_fini>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr
