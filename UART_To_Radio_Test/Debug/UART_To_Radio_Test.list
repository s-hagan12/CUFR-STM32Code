
UART_To_Radio_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080030c0  080030c0  000040c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800311c  0800311c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800311c  0800311c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003124  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c9b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b8  00000000  00000000  0000dcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  0000f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ef  00000000  00000000  0000f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed37  00000000  00000000  0000fcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009755  00000000  00000000  0002ea26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc436  00000000  00000000  0003817b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f45b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001904  00000000  00000000  000f45f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000f5ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080030a8 	.word	0x080030a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080030a8 	.word	0x080030a8

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fab5 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f865 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f923 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 f8f1 	bl	80003cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001ea:	f000 f8bf 	bl	800036c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  const char *hw = "Hello World! \r\n";
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <main+0xc0>)
 80001f0:	61bb      	str	r3, [r7, #24]
  const char *send = "GT + CC + GT";
 80001f2:	4b29      	ldr	r3, [pc, #164]	@ (8000298 <main+0xc4>)
 80001f4:	617b      	str	r3, [r7, #20]
  const char *test = "y";
 80001f6:	4b29      	ldr	r3, [pc, #164]	@ (800029c <main+0xc8>)
 80001f8:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef ok_notok = HAL_BUSY;
 80001fa:	2302      	movs	r3, #2
 80001fc:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2120      	movs	r1, #32
 8000202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000206:	f000 fdb1 	bl	8000d6c <HAL_GPIO_WritePin>
  GPIO_PinState pressed;
  int len = 15;
 800020a:	230f      	movs	r3, #15
 800020c:	60bb      	str	r3, [r7, #8]
  int count = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000216:	4822      	ldr	r0, [pc, #136]	@ (80002a0 <main+0xcc>)
 8000218:	f000 fd90 	bl	8000d3c <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	71fb      	strb	r3, [r7, #7]
	 count ++;
 8000220:	69fb      	ldr	r3, [r7, #28]
 8000222:	3301      	adds	r3, #1
 8000224:	61fb      	str	r3, [r7, #28]
	  if(pressed == 0){
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f2      	bne.n	8000212 <main+0x3e>
		  //HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
		  //ok_notok = HAL_UART_Transmit(&huart1, (uint8_t *)test, 1, 100);
		  ok_notok = HAL_UART_Transmit(&huart2, (uint8_t *)hw, len, 100);
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	b29a      	uxth	r2, r3
 8000230:	2364      	movs	r3, #100	@ 0x64
 8000232:	69b9      	ldr	r1, [r7, #24]
 8000234:	481b      	ldr	r0, [pc, #108]	@ (80002a4 <main+0xd0>)
 8000236:	f002 fa91 	bl	800275c <HAL_UART_Transmit>
 800023a:	4603      	mov	r3, r0
 800023c:	73fb      	strb	r3, [r7, #15]
		  ok_notok = HAL_UART_Transmit(&huart1, (uint8_t *)hw, len, 100);
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	b29a      	uxth	r2, r3
 8000242:	2364      	movs	r3, #100	@ 0x64
 8000244:	69b9      	ldr	r1, [r7, #24]
 8000246:	4818      	ldr	r0, [pc, #96]	@ (80002a8 <main+0xd4>)
 8000248:	f002 fa88 	bl	800275c <HAL_UART_Transmit>
 800024c:	4603      	mov	r3, r0
 800024e:	73fb      	strb	r3, [r7, #15]
//		  ok_notok = HAL_UART_Transmit(&huart1, (uint8_t *)send, 6, 100);
		  if(ok_notok == HAL_OK){
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d105      	bne.n	8000262 <main+0x8e>
			  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2120      	movs	r1, #32
 800025a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025e:	f000 fd85 	bl	8000d6c <HAL_GPIO_WritePin>
		  }
		  if(count == 4) {
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	2b04      	cmp	r3, #4
 8000266:	d109      	bne.n	800027c <main+0xa8>
			  count = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	61fb      	str	r3, [r7, #28]
			  ok_notok = HAL_UART_Transmit(&huart1, (uint8_t *)send, 12, 100);
 800026c:	2364      	movs	r3, #100	@ 0x64
 800026e:	220c      	movs	r2, #12
 8000270:	6979      	ldr	r1, [r7, #20]
 8000272:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <main+0xd4>)
 8000274:	f002 fa72 	bl	800275c <HAL_UART_Transmit>
 8000278:	4603      	mov	r3, r0
 800027a:	73fb      	strb	r3, [r7, #15]
		  }
		  HAL_Delay(1000);
 800027c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000280:	f000 fac8 	bl	8000814 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2120      	movs	r1, #32
 8000288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028c:	f000 fd6e 	bl	8000d6c <HAL_GPIO_WritePin>
	  pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000290:	e7bf      	b.n	8000212 <main+0x3e>
 8000292:	bf00      	nop
 8000294:	080030c0 	.word	0x080030c0
 8000298:	080030d0 	.word	0x080030d0
 800029c:	080030e0 	.word	0x080030e0
 80002a0:	48000800 	.word	0x48000800
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	20000028 	.word	0x20000028

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b0a6      	sub	sp, #152	@ 0x98
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002b6:	2228      	movs	r2, #40	@ 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fec7 	bl	800304e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2258      	movs	r2, #88	@ 0x58
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 feb9 	bl	800304e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	2302      	movs	r3, #2
 80002de:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	2310      	movs	r3, #16
 80002e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fd46 	bl	8000d9c <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000316:	f000 f8ef 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2302      	movs	r3, #2
 8000320:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800032a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000330:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fd84 	bl	8001e44 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000342:	f000 f8d9 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000346:	2303      	movs	r3, #3
 8000348:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f001 ff95 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000360:	f000 f8ca 	bl	80004f8 <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3798      	adds	r7, #152	@ 0x98
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 8000372:	4a15      	ldr	r2, [pc, #84]	@ (80003c8 <MX_USART1_UART_Init+0x5c>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000396:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 8000398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800039c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_USART1_UART_Init+0x58>)
 80003b2:	f002 f985 	bl	80026c0 <HAL_UART_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80003bc:	f000 f89c 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40013800 	.word	0x40013800

080003cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d0:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003d2:	4a15      	ldr	r2, [pc, #84]	@ (8000428 <MX_USART2_UART_Init+0x5c>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003d6:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <MX_USART2_UART_Init+0x58>)
 8000410:	f002 f956 	bl	80026c0 <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800041a:	f000 f86d 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000b0 	.word	0x200000b0
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	@ 0x28
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a2a      	ldr	r2, [pc, #168]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b25      	ldr	r3, [pc, #148]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a24      	ldr	r2, [pc, #144]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a1e      	ldr	r2, [pc, #120]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a18      	ldr	r2, [pc, #96]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_GPIO_Init+0xc4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2120      	movs	r1, #32
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004aa:	f000 fc5f 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	480b      	ldr	r0, [pc, #44]	@ (80004f4 <MX_GPIO_Init+0xc8>)
 80004c6:	f000 faaf 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 80004ca:	2320      	movs	r3, #32
 80004cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e4:	f000 faa0 	bl	8000a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e8:	bf00      	nop
 80004ea:	3728      	adds	r7, #40	@ 0x28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000800 	.word	0x48000800

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x44>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_MspInit+0x44>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <HAL_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <HAL_MspInit+0x44>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <HAL_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800053a:	2007      	movs	r0, #7
 800053c:	f000 fa40 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a3d      	ldr	r2, [pc, #244]	@ (8000660 <HAL_UART_MspInit+0x114>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d146      	bne.n	80005fc <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056e:	4b3d      	ldr	r3, [pc, #244]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a3c      	ldr	r2, [pc, #240]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b3a      	ldr	r3, [pc, #232]	@ (8000664 <HAL_UART_MspInit+0x118>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a36      	ldr	r2, [pc, #216]	@ (8000664 <HAL_UART_MspInit+0x118>)
 800058c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b34      	ldr	r3, [pc, #208]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b31      	ldr	r3, [pc, #196]	@ (8000664 <HAL_UART_MspInit+0x118>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a30      	ldr	r2, [pc, #192]	@ (8000664 <HAL_UART_MspInit+0x118>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <HAL_UART_MspInit+0x118>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005b6:	2330      	movs	r3, #48	@ 0x30
 80005b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005c6:	2307      	movs	r3, #7
 80005c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4825      	ldr	r0, [pc, #148]	@ (8000668 <HAL_UART_MspInit+0x11c>)
 80005d2:	f000 fa29 	bl	8000a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005e8:	2307      	movs	r3, #7
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f6:	f000 fa17 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005fa:	e02d      	b.n	8000658 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <HAL_UART_MspInit+0x120>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d128      	bne.n	8000658 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a16      	ldr	r2, [pc, #88]	@ (8000664 <HAL_UART_MspInit+0x118>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <HAL_UART_MspInit+0x118>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_UART_MspInit+0x118>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000636:	230c      	movs	r3, #12
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000646:	2307      	movs	r3, #7
 8000648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000654:	f000 f9e8 	bl	8000a28 <HAL_GPIO_Init>
}
 8000658:	bf00      	nop
 800065a:	3730      	adds	r7, #48	@ 0x30
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40013800 	.word	0x40013800
 8000664:	40021000 	.word	0x40021000
 8000668:	48000800 	.word	0x48000800
 800066c:	40004400 	.word	0x40004400

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <NMI_Handler+0x4>

08000678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <MemManage_Handler+0x4>

08000688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <UsageFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c6:	f000 f885 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800072c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f8:	f7ff ffea 	bl	80006d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	@ (8000734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	@ (8000740 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000722:	f002 fc9d 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000726:	f7ff fd55 	bl	80001d4 <main>

0800072a <LoopForever>:

LoopForever:
    b LoopForever
 800072a:	e7fe      	b.n	800072a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000738:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 800073c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000740:	2000013c 	.word	0x2000013c

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f931 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff fece 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f93b 	bl	8000a0e <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 f911 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000138 	.word	0x20000138

080007fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000138 	.word	0x20000138

08000814 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ffee 	bl	80007fc <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffde 	bl	80007fc <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	@ (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	@ (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	@ 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	@ 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff8e 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff47 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff5c 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff8e 	bl	8000914 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5d 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffb0 	bl	800097c <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e160      	b.n	8000cfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 8152 	beq.w	8000cf4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d005      	beq.n	8000a68 <HAL_GPIO_Init+0x40>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d130      	bne.n	8000aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	f003 0201 	and.w	r2, r3, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d017      	beq.n	8000b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d123      	bne.n	8000b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	08da      	lsrs	r2, r3, #3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3208      	adds	r2, #8
 8000b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	691a      	ldr	r2, [r3, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	08da      	lsrs	r2, r3, #3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3208      	adds	r2, #8
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0203 	and.w	r2, r3, #3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 80ac 	beq.w	8000cf4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb4:	4a59      	ldr	r2, [pc, #356]	@ (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	3302      	adds	r3, #2
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bde:	d025      	beq.n	8000c2c <HAL_GPIO_Init+0x204>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d20 <HAL_GPIO_Init+0x2f8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d01f      	beq.n	8000c28 <HAL_GPIO_Init+0x200>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4e      	ldr	r2, [pc, #312]	@ (8000d24 <HAL_GPIO_Init+0x2fc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d019      	beq.n	8000c24 <HAL_GPIO_Init+0x1fc>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8000d28 <HAL_GPIO_Init+0x300>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d013      	beq.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8000d2c <HAL_GPIO_Init+0x304>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00d      	beq.n	8000c1c <HAL_GPIO_Init+0x1f4>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4b      	ldr	r2, [pc, #300]	@ (8000d30 <HAL_GPIO_Init+0x308>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x1f0>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d34 <HAL_GPIO_Init+0x30c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d101      	bne.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000c10:	2306      	movs	r3, #6
 8000c12:	e00c      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c14:	2307      	movs	r3, #7
 8000c16:	e00a      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c18:	2305      	movs	r3, #5
 8000c1a:	e008      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c20:	2303      	movs	r3, #3
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	@ (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c70:	4a31      	ldr	r2, [pc, #196]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c76:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <HAL_GPIO_Init+0x310>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f ae97 	bne.w	8000a38 <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	48001400 	.word	0x48001400
 8000d34:	48001800 	.word	0x48001800
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f001 b83a 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 816f 	beq.w	80010b6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd8:	4bb5      	ldr	r3, [pc, #724]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d00c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	4bb2      	ldr	r3, [pc, #712]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d15c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x10e>
 8000df0:	4baf      	ldr	r3, [pc, #700]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfc:	d155      	bne.n	8000eaa <HAL_RCC_OscConfig+0x10e>
 8000dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e02:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_OscConfig+0x94>
 8000e2a:	4ba1      	ldr	r3, [pc, #644]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	e015      	b.n	8000e5c <HAL_RCC_OscConfig+0xc0>
 8000e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e34:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e4c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e58:	4b95      	ldr	r3, [pc, #596]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e60:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e64:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e68:	fa92 f2a2 	rbit	r2, r2
 8000e6c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e70:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	f002 021f 	and.w	r2, r2, #31
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 8111 	beq.w	80010b4 <HAL_RCC_OscConfig+0x318>
 8000e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 8108 	bne.w	80010b4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f000 bfc6 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x12e>
 8000ebc:	4b7c      	ldr	r3, [pc, #496]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a7b      	ldr	r2, [pc, #492]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e036      	b.n	8000f38 <HAL_RCC_OscConfig+0x19c>
 8000eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ece:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x158>
 8000eda:	4b75      	ldr	r3, [pc, #468]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a74      	ldr	r2, [pc, #464]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b72      	ldr	r3, [pc, #456]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a71      	ldr	r2, [pc, #452]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e021      	b.n	8000f38 <HAL_RCC_OscConfig+0x19c>
 8000ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ef8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x184>
 8000f06:	4b6a      	ldr	r3, [pc, #424]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a69      	ldr	r2, [pc, #420]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b67      	ldr	r3, [pc, #412]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a66      	ldr	r2, [pc, #408]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0x19c>
 8000f20:	4b63      	ldr	r3, [pc, #396]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a62      	ldr	r2, [pc, #392]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b60      	ldr	r3, [pc, #384]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a5f      	ldr	r2, [pc, #380]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f36:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d059      	beq.n	8000ffc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc58 	bl	80007fc <HAL_GetTick>
 8000f4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f52:	f7ff fc53 	bl	80007fc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	@ 0x64
 8000f60:	d902      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f000 bf67 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
 8000f68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f6c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d102      	bne.n	8000f9a <HAL_RCC_OscConfig+0x1fe>
 8000f94:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	e015      	b.n	8000fc6 <HAL_RCC_OscConfig+0x22a>
 8000f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f9e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fca:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000fce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000fd2:	fa92 f2a2 	rbit	r2, r2
 8000fd6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000fda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fde:	fab2 f282 	clz	r2, r2
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	f042 0220 	orr.w	r2, r2, #32
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	f002 021f 	and.w	r2, r2, #31
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0ab      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1b6>
 8000ffa:	e05c      	b.n	80010b6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fbfe 	bl	80007fc <HAL_GetTick>
 8001000:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001004:	e00a      	b.n	800101c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001006:	f7ff fbf9 	bl	80007fc <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	@ 0x64
 8001014:	d902      	bls.n	800101c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	f000 bf0d 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
 800101c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001020:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001028:	fa93 f3a3 	rbit	r3, r3
 800102c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001030:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d102      	bne.n	800104e <HAL_RCC_OscConfig+0x2b2>
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x2de>
 800104e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001052:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001066:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800106a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_RCC_OscConfig+0x314>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800107e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001082:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001086:	fa92 f2a2 	rbit	r2, r2
 800108a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800108e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001092:	fab2 f282 	clz	r2, r2
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	f042 0220 	orr.w	r2, r2, #32
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	f002 021f 	and.w	r2, r2, #31
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f202 	lsl.w	r2, r1, r2
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ab      	bne.n	8001006 <HAL_RCC_OscConfig+0x26a>
 80010ae:	e002      	b.n	80010b6 <HAL_RCC_OscConfig+0x31a>
 80010b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 817f 	beq.w	80013ca <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010cc:	4ba7      	ldr	r3, [pc, #668]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010d8:	4ba4      	ldr	r3, [pc, #656]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d173      	bne.n	80011cc <HAL_RCC_OscConfig+0x430>
 80010e4:	4ba1      	ldr	r3, [pc, #644]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80010ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010f0:	d16c      	bne.n	80011cc <HAL_RCC_OscConfig+0x430>
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001104:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <HAL_RCC_OscConfig+0x386>
 800111c:	4b93      	ldr	r3, [pc, #588]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	e013      	b.n	800114a <HAL_RCC_OscConfig+0x3ae>
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800113a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001146:	4b89      	ldr	r3, [pc, #548]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114a:	2202      	movs	r2, #2
 800114c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001150:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001154:	fa92 f2a2 	rbit	r2, r2
 8001158:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800115c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001160:	fab2 f282 	clz	r2, r2
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	f042 0220 	orr.w	r2, r2, #32
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f002 021f 	and.w	r2, r2, #31
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	4013      	ands	r3, r2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00a      	beq.n	8001192 <HAL_RCC_OscConfig+0x3f6>
 800117c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001180:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d002      	beq.n	8001192 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	f000 be52 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b76      	ldr	r3, [pc, #472]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800119a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800119e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	21f8      	movs	r1, #248	@ 0xf8
 80011a8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80011b0:	fa91 f1a1 	rbit	r1, r1
 80011b4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80011b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011bc:	fab1 f181 	clz	r1, r1
 80011c0:	b2c9      	uxtb	r1, r1
 80011c2:	408b      	lsls	r3, r1
 80011c4:	4969      	ldr	r1, [pc, #420]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e0fe      	b.n	80013ca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8088 	beq.w	80012ee <HAL_RCC_OscConfig+0x552>
 80011de:	2301      	movs	r3, #1
 80011e0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80011f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	461a      	mov	r2, r3
 8001206:	2301      	movs	r3, #1
 8001208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff faf7 	bl	80007fc <HAL_GetTick>
 800120e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff faf2 	bl	80007fc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d902      	bls.n	800122a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	f000 be06 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800123c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d102      	bne.n	800125a <HAL_RCC_OscConfig+0x4be>
 8001254:	4b45      	ldr	r3, [pc, #276]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	e013      	b.n	8001282 <HAL_RCC_OscConfig+0x4e6>
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001272:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	2202      	movs	r2, #2
 8001284:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001288:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800128c:	fa92 f2a2 	rbit	r2, r2
 8001290:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001294:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f002 021f 	and.w	r2, r2, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0af      	beq.n	8001214 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	21f8      	movs	r1, #248	@ 0xf8
 80012ca:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80012d2:	fa91 f1a1 	rbit	r1, r1
 80012d6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80012da:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012de:	fab1 f181 	clz	r1, r1
 80012e2:	b2c9      	uxtb	r1, r1
 80012e4:	408b      	lsls	r3, r1
 80012e6:	4921      	ldr	r1, [pc, #132]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
 80012ec:	e06d      	b.n	80013ca <HAL_RCC_OscConfig+0x62e>
 80012ee:	2301      	movs	r3, #1
 80012f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001300:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800130e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	2300      	movs	r3, #0
 8001318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fa6f 	bl	80007fc <HAL_GetTick>
 800131e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fa6a 	bl	80007fc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 bd7e 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800134c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_RCC_OscConfig+0x5d4>
 8001364:	4b01      	ldr	r3, [pc, #4]	@ (800136c <HAL_RCC_OscConfig+0x5d0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	e016      	b.n	8001398 <HAL_RCC_OscConfig+0x5fc>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001388:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001394:	4bbf      	ldr	r3, [pc, #764]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	2202      	movs	r2, #2
 800139a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800139e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013a2:	fa92 f2a2 	rbit	r2, r2
 80013a6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80013aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013ae:	fab2 f282 	clz	r2, r2
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	f042 0220 	orr.w	r2, r2, #32
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f002 021f 	and.w	r2, r2, #31
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ac      	bne.n	8001324 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8113 	beq.w	8001606 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d07c      	beq.n	80014ea <HAL_RCC_OscConfig+0x74e>
 80013f0:	2301      	movs	r3, #1
 80013f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001402:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	4ba2      	ldr	r3, [pc, #648]	@ (8001698 <HAL_RCC_OscConfig+0x8fc>)
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	461a      	mov	r2, r3
 8001416:	2301      	movs	r3, #1
 8001418:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff f9ef 	bl	80007fc <HAL_GetTick>
 800141e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff f9ea 	bl	80007fc <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d902      	bls.n	800143a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	f000 bcfe 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800145a:	2202      	movs	r2, #2
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800147e:	2202      	movs	r2, #2
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001486:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fa93 f2a3 	rbit	r2, r3
 8001490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001494:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001498:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b7e      	ldr	r3, [pc, #504]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 800149c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800149e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014a6:	2102      	movs	r1, #2
 80014a8:	6019      	str	r1, [r3, #0]
 80014aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f1a3 	rbit	r1, r3
 80014b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014c0:	6019      	str	r1, [r3, #0]
  return result;
 80014c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2101      	movs	r1, #1
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d09d      	beq.n	8001424 <HAL_RCC_OscConfig+0x688>
 80014e8:	e08d      	b.n	8001606 <HAL_RCC_OscConfig+0x86a>
 80014ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800150c:	601a      	str	r2, [r3, #0]
  return result;
 800150e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001512:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001516:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	4b5d      	ldr	r3, [pc, #372]	@ (8001698 <HAL_RCC_OscConfig+0x8fc>)
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	461a      	mov	r2, r3
 8001528:	2300      	movs	r3, #0
 800152a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff f966 	bl	80007fc <HAL_GetTick>
 8001530:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff f961 	bl	80007fc <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d902      	bls.n	800154c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	f000 bc75 	b.w	8001e36 <HAL_RCC_OscConfig+0x109a>
 800154c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001550:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001554:	2202      	movs	r2, #2
 8001556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001578:	2202      	movs	r2, #2
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fa93 f2a3 	rbit	r2, r3
 800158a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001598:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 80015ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015c4:	2102      	movs	r1, #2
 80015c6:	6019      	str	r1, [r3, #0]
 80015c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f1a3 	rbit	r1, r3
 80015d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015de:	6019      	str	r1, [r3, #0]
  return result;
 80015e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d197      	bne.n	8001536 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 81a5 	beq.w	8001966 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_RCC_OscConfig+0x8f8>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001650:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001654:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_RCC_OscConfig+0x900>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <HAL_RCC_OscConfig+0x900>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_RCC_OscConfig+0x900>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001672:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001674:	f7ff f8c2 	bl	80007fc <HAL_GetTick>
 8001678:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	e010      	b.n	80016a0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff f8bd 	bl	80007fc <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d908      	bls.n	80016a0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e3d1      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	10908120 	.word	0x10908120
 800169c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b8d      	ldr	r3, [pc, #564]	@ (80018d8 <HAL_RCC_OscConfig+0xb3c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0e8      	beq.n	800167e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x92e>
 80016bc:	4b87      	ldr	r3, [pc, #540]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a86      	ldr	r2, [pc, #536]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e035      	b.n	8001736 <HAL_RCC_OscConfig+0x99a>
 80016ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x958>
 80016da:	4b80      	ldr	r3, [pc, #512]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a7f      	ldr	r2, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b7d      	ldr	r3, [pc, #500]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a7c      	ldr	r2, [pc, #496]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e020      	b.n	8001736 <HAL_RCC_OscConfig+0x99a>
 80016f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x982>
 8001704:	4b75      	ldr	r3, [pc, #468]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a74      	ldr	r2, [pc, #464]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a71      	ldr	r2, [pc, #452]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x99a>
 800171e:	4b6f      	ldr	r3, [pc, #444]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a6e      	ldr	r2, [pc, #440]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b6c      	ldr	r3, [pc, #432]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a6b      	ldr	r2, [pc, #428]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8081 	beq.w	800184a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff f858 	bl	80007fc <HAL_GetTick>
 800174c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff f853 	bl	80007fc <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e365      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
 800176a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001772:	2202      	movs	r2, #2
 8001774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001792:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017b0:	601a      	str	r2, [r3, #0]
  return result;
 80017b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d102      	bne.n	80017d6 <HAL_RCC_OscConfig+0xa3a>
 80017d0:	4b42      	ldr	r3, [pc, #264]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	e013      	b.n	80017fe <HAL_RCC_OscConfig+0xa62>
 80017d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001802:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001806:	2102      	movs	r1, #2
 8001808:	6011      	str	r1, [r2, #0]
 800180a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800180e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	fa92 f1a2 	rbit	r1, r2
 8001818:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800181c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001820:	6011      	str	r1, [r2, #0]
  return result;
 8001822:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001826:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f002 021f 	and.w	r2, r2, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d084      	beq.n	8001752 <HAL_RCC_OscConfig+0x9b6>
 8001848:	e083      	b.n	8001952 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7fe ffd7 	bl	80007fc <HAL_GetTick>
 800184e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7fe ffd2 	bl	80007fc <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e2e4      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001894:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018b2:	601a      	str	r2, [r3, #0]
  return result;
 80018b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0xb44>
 80018d2:	4b02      	ldr	r3, [pc, #8]	@ (80018dc <HAL_RCC_OscConfig+0xb40>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	e017      	b.n	8001908 <HAL_RCC_OscConfig+0xb6c>
 80018d8:	40007000 	.word	0x40007000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fe:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	4bb3      	ldr	r3, [pc, #716]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800190c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001910:	2102      	movs	r1, #2
 8001912:	6011      	str	r1, [r2, #0]
 8001914:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001918:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	fa92 f1a2 	rbit	r1, r2
 8001922:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001926:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800192a:	6011      	str	r1, [r2, #0]
  return result;
 800192c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001930:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f002 021f 	and.w	r2, r2, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d180      	bne.n	8001854 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001952:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001956:	2b01      	cmp	r3, #1
 8001958:	d105      	bne.n	8001966 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	4b9e      	ldr	r3, [pc, #632]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a9d      	ldr	r2, [pc, #628]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 825e 	beq.w	8001e34 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001978:	4b96      	ldr	r3, [pc, #600]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	f000 821f 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b02      	cmp	r3, #2
 8001994:	f040 8170 	bne.w	8001c78 <HAL_RCC_OscConfig+0xedc>
 8001998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019bc:	601a      	str	r2, [r3, #0]
  return result;
 80019be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	461a      	mov	r2, r3
 80019da:	2300      	movs	r3, #0
 80019dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7fe ff0d 	bl	80007fc <HAL_GetTick>
 80019e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	e009      	b.n	80019fc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7fe ff08 	bl	80007fc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e21c      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
 80019fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a00:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a20:	601a      	str	r2, [r3, #0]
  return result;
 8001a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0xcaa>
 8001a40:	4b64      	ldr	r3, [pc, #400]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e027      	b.n	8001a96 <HAL_RCC_OscConfig+0xcfa>
 8001a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a66:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	fa93 f2a3 	rbit	r2, r3
 8001a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a9a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aa8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	fa92 f1a2 	rbit	r1, r2
 8001ab2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ab6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001aba:	6011      	str	r1, [r2, #0]
  return result;
 8001abc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ac0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f002 021f 	and.w	r2, r2, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d182      	bne.n	80019e8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	f023 020f 	bic.w	r2, r3, #15
 8001aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	4937      	ldr	r1, [pc, #220]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001afc:	4b35      	ldr	r3, [pc, #212]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a19      	ldr	r1, [r3, #32]
 8001b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	492d      	ldr	r1, [pc, #180]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b28:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b36:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b44:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b48:	601a      	str	r2, [r3, #0]
  return result;
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b52:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	461a      	mov	r2, r3
 8001b66:	2301      	movs	r3, #1
 8001b68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fe47 	bl	80007fc <HAL_GetTick>
 8001b6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b72:	e009      	b.n	8001b88 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b74:	f7fe fe42 	bl	80007fc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e156      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
 8001b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bac:	601a      	str	r2, [r3, #0]
  return result;
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe3c>
 8001bcc:	4b01      	ldr	r3, [pc, #4]	@ (8001bd4 <HAL_RCC_OscConfig+0xe38>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	e02a      	b.n	8001c28 <HAL_RCC_OscConfig+0xe8c>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bdc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001be0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c02:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4b86      	ldr	r3, [pc, #536]	@ (8001e40 <HAL_RCC_OscConfig+0x10a4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c2c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c34:	6011      	str	r1, [r2, #0]
 8001c36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c3a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	fa92 f1a2 	rbit	r1, r2
 8001c44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c48:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c4c:	6011      	str	r1, [r2, #0]
  return result;
 8001c4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c52:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	fab2 f282 	clz	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f002 021f 	and.w	r2, r2, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f43f af7f 	beq.w	8001b74 <HAL_RCC_OscConfig+0xdd8>
 8001c76:	e0dd      	b.n	8001e34 <HAL_RCC_OscConfig+0x1098>
 8001c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c98:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ca6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fd9d 	bl	80007fc <HAL_GetTick>
 8001cc2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe fd98 	bl	80007fc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0ac      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
 8001cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d00:	601a      	str	r2, [r3, #0]
  return result;
 8001d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d06:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0xf8a>
 8001d20:	4b47      	ldr	r3, [pc, #284]	@ (8001e40 <HAL_RCC_OscConfig+0x10a4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e027      	b.n	8001d76 <HAL_RCC_OscConfig+0xfda>
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d38:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d46:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <HAL_RCC_OscConfig+0x10a4>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d7a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d7e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d82:	6011      	str	r1, [r2, #0]
 8001d84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d88:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	fa92 f1a2 	rbit	r1, r2
 8001d92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d96:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d9a:	6011      	str	r1, [r2, #0]
  return result;
 8001d9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001da0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	fab2 f282 	clz	r2, r2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d182      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xf2c>
 8001dc2:	e037      	b.n	8001e34 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e02e      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_RCC_OscConfig+0x10a4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_RCC_OscConfig+0x10a4>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001de8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001dec:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d117      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e04:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e1c:	f003 020f 	and.w	r2, r3, #15
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b09e      	sub	sp, #120	@ 0x78
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e162      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b90      	ldr	r3, [pc, #576]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d910      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	498b      	ldr	r1, [pc, #556]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b89      	ldr	r3, [pc, #548]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e14a      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b82      	ldr	r3, [pc, #520]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	497f      	ldr	r1, [pc, #508]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80dc 	beq.w	8002070 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d13c      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xf6>
 8001ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_ClockConfig+0xa6>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e00f      	b.n	8001f0a <HAL_RCC_ClockConfig+0xc6>
 8001eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ef8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8001efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	4b67      	ldr	r3, [pc, #412]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d17b      	bne.n	800202e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0f3      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d13c      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x178>
 8001f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x128>
 8001f66:	4b4f      	ldr	r3, [pc, #316]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e00f      	b.n	8001f8c <HAL_RCC_ClockConfig+0x148>
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f88:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f94:	fa92 f2a2 	rbit	r2, r2
 8001f98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d13a      	bne.n	800202e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b2      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x1a0>
 8001fde:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e00d      	b.n	8002000 <HAL_RCC_ClockConfig+0x1bc>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	2202      	movs	r2, #2
 8002002:	61ba      	str	r2, [r7, #24]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	617a      	str	r2, [r7, #20]
  return result;
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e079      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	491a      	ldr	r1, [pc, #104]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7fe fbdc 	bl	80007fc <HAL_GetTick>
 8002044:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe fbd8 	bl	80007fc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e061      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d214      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e040      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	491a      	ldr	r1, [pc, #104]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4912      	ldr	r1, [pc, #72]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020e6:	f000 f829 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020f4:	22f0      	movs	r2, #240	@ 0xf0
 80020f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	40d3      	lsrs	r3, r2
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x2ec>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	fa21 f303 	lsr.w	r3, r1, r3
 8002112:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <HAL_RCC_ClockConfig+0x2f0>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_ClockConfig+0x2f4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fb2a 	bl	8000774 <HAL_InitTick>
  
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3778      	adds	r7, #120	@ 0x78
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	080030e4 	.word	0x080030e4
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002156:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e029      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e029      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002198:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e007      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021aa:	4a0b      	ldr	r2, [pc, #44]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	613b      	str	r3, [r7, #16]
      break;
 80021be:	e002      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c6:	693b      	ldr	r3, [r7, #16]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	080030fc 	.word	0x080030fc
 80021e0:	0800310c 	.word	0x0800310c

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002202:	f7ff ffef 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002210:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	603a      	str	r2, [r7, #0]
  return result;
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	40d3      	lsrs	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_RCC_GetPCLK1Freq+0x40>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	080030f4 	.word	0x080030f4

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002246:	f7ff ffcd 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002254:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	603a      	str	r2, [r7, #0]
  return result;
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	40d3      	lsrs	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	080030f4 	.word	0x080030f4

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b092      	sub	sp, #72	@ 0x48
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80d4 	beq.w	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a8:	4b4e      	ldr	r3, [pc, #312]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10e      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a4a      	ldr	r2, [pc, #296]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022be:	61d3      	str	r3, [r2, #28]
 80022c0:	4b48      	ldr	r3, [pc, #288]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a41      	ldr	r2, [pc, #260]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fa87 	bl	80007fc <HAL_GetTick>
 80022ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe fa83 	bl	80007fc <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	@ 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1d6      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002310:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8084 	beq.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800232c:	429a      	cmp	r2, r3
 800232e:	d07c      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002330:	4b2c      	ldr	r3, [pc, #176]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800233a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	461a      	mov	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800236c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	461a      	mov	r2, r3
 800237e:	2300      	movs	r3, #0
 8002380:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002382:	4a18      	ldr	r2, [pc, #96]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002386:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d04b      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fa33 	bl	80007fc <HAL_GetTick>
 8002396:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fa2f 	bl	80007fc <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e180      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023b0:	2302      	movs	r3, #2
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	61fb      	str	r3, [r7, #28]
  return result;
 80023c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d108      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023de:	4b01      	ldr	r3, [pc, #4]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	e00d      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	10908100 	.word	0x10908100
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	2202      	movs	r2, #2
 8002402:	613a      	str	r2, [r7, #16]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	fa92 f2a2 	rbit	r2, r2
 800240a:	60fa      	str	r2, [r7, #12]
  return result;
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f002 021f 	and.w	r2, r2, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0b7      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800242a:	4b8f      	ldr	r3, [pc, #572]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	498c      	ldr	r1, [pc, #560]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800243c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b88      	ldr	r3, [pc, #544]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4a87      	ldr	r2, [pc, #540]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800245c:	4b82      	ldr	r3, [pc, #520]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	f023 0203 	bic.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	497f      	ldr	r1, [pc, #508]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800247a:	4b7b      	ldr	r3, [pc, #492]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4978      	ldr	r1, [pc, #480]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002498:	4b73      	ldr	r3, [pc, #460]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	4970      	ldr	r1, [pc, #448]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f023 0210 	bic.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4969      	ldr	r1, [pc, #420]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024d4:	4b64      	ldr	r3, [pc, #400]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	4961      	ldr	r1, [pc, #388]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f023 0220 	bic.w	r2, r3, #32
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	495a      	ldr	r1, [pc, #360]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002510:	4b55      	ldr	r3, [pc, #340]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	4952      	ldr	r1, [pc, #328]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252e:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	494b      	ldr	r1, [pc, #300]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254c:	4b46      	ldr	r3, [pc, #280]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4943      	ldr	r1, [pc, #268]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800256a:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	493c      	ldr	r1, [pc, #240]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002588:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	4934      	ldr	r1, [pc, #208]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025a6:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	492d      	ldr	r1, [pc, #180]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025c4:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d0:	4925      	ldr	r1, [pc, #148]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	491e      	ldr	r1, [pc, #120]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260c:	4916      	ldr	r1, [pc, #88]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262a:	490f      	ldr	r1, [pc, #60]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	4907      	ldr	r1, [pc, #28]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800265a:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e002      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266e:	4913      	ldr	r1, [pc, #76]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	490b      	ldr	r1, [pc, #44]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800268e:	4313      	orrs	r3, r2
 8002690:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800269e:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026aa:	4904      	ldr	r1, [pc, #16]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3748      	adds	r7, #72	@ 0x48
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e040      	b.n	8002754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fd ff32 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	@ 0x24
 80026ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa86 	bl	8002c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f8af 	bl	8002870 <UART_SetConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e01b      	b.n	8002754 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800272a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800273a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fb05 	bl	8002d5c <UART_CheckIdleState>
 8002752:	4603      	mov	r3, r0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002770:	2b20      	cmp	r3, #32
 8002772:	d177      	bne.n	8002864 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_UART_Transmit+0x24>
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e070      	b.n	8002866 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2221      	movs	r2, #33	@ 0x21
 8002790:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002792:	f7fe f833 	bl	80007fc <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b0:	d108      	bne.n	80027c4 <HAL_UART_Transmit+0x68>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	e003      	b.n	80027cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027cc:	e02f      	b.n	800282e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2180      	movs	r1, #128	@ 0x80
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fb67 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e03b      	b.n	8002866 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002800:	b292      	uxth	r2, r2
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3302      	adds	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e007      	b.n	800281c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1c9      	bne.n	80027ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	@ 0x40
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fb31 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e005      	b.n	8002866 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b92      	ldr	r3, [pc, #584]	@ (8002ae4 <UART_SetConfig+0x274>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a80      	ldr	r2, [pc, #512]	@ (8002ae8 <UART_SetConfig+0x278>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d120      	bne.n	800292e <UART_SetConfig+0xbe>
 80028ec:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <UART_SetConfig+0x27c>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d817      	bhi.n	8002928 <UART_SetConfig+0xb8>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <UART_SetConfig+0x90>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002911 	.word	0x08002911
 8002904:	0800291d 	.word	0x0800291d
 8002908:	08002923 	.word	0x08002923
 800290c:	08002917 	.word	0x08002917
 8002910:	2301      	movs	r3, #1
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e0b5      	b.n	8002a82 <UART_SetConfig+0x212>
 8002916:	2302      	movs	r3, #2
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e0b2      	b.n	8002a82 <UART_SetConfig+0x212>
 800291c:	2304      	movs	r3, #4
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e0af      	b.n	8002a82 <UART_SetConfig+0x212>
 8002922:	2308      	movs	r3, #8
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e0ac      	b.n	8002a82 <UART_SetConfig+0x212>
 8002928:	2310      	movs	r3, #16
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e0a9      	b.n	8002a82 <UART_SetConfig+0x212>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6f      	ldr	r2, [pc, #444]	@ (8002af0 <UART_SetConfig+0x280>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d124      	bne.n	8002982 <UART_SetConfig+0x112>
 8002938:	4b6c      	ldr	r3, [pc, #432]	@ (8002aec <UART_SetConfig+0x27c>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002944:	d011      	beq.n	800296a <UART_SetConfig+0xfa>
 8002946:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800294a:	d817      	bhi.n	800297c <UART_SetConfig+0x10c>
 800294c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002950:	d011      	beq.n	8002976 <UART_SetConfig+0x106>
 8002952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002956:	d811      	bhi.n	800297c <UART_SetConfig+0x10c>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <UART_SetConfig+0xf4>
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002960:	d006      	beq.n	8002970 <UART_SetConfig+0x100>
 8002962:	e00b      	b.n	800297c <UART_SetConfig+0x10c>
 8002964:	2300      	movs	r3, #0
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e08b      	b.n	8002a82 <UART_SetConfig+0x212>
 800296a:	2302      	movs	r3, #2
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e088      	b.n	8002a82 <UART_SetConfig+0x212>
 8002970:	2304      	movs	r3, #4
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e085      	b.n	8002a82 <UART_SetConfig+0x212>
 8002976:	2308      	movs	r3, #8
 8002978:	77fb      	strb	r3, [r7, #31]
 800297a:	e082      	b.n	8002a82 <UART_SetConfig+0x212>
 800297c:	2310      	movs	r3, #16
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e07f      	b.n	8002a82 <UART_SetConfig+0x212>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a5b      	ldr	r2, [pc, #364]	@ (8002af4 <UART_SetConfig+0x284>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d124      	bne.n	80029d6 <UART_SetConfig+0x166>
 800298c:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <UART_SetConfig+0x27c>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002994:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002998:	d011      	beq.n	80029be <UART_SetConfig+0x14e>
 800299a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800299e:	d817      	bhi.n	80029d0 <UART_SetConfig+0x160>
 80029a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029a4:	d011      	beq.n	80029ca <UART_SetConfig+0x15a>
 80029a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029aa:	d811      	bhi.n	80029d0 <UART_SetConfig+0x160>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <UART_SetConfig+0x148>
 80029b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029b4:	d006      	beq.n	80029c4 <UART_SetConfig+0x154>
 80029b6:	e00b      	b.n	80029d0 <UART_SetConfig+0x160>
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e061      	b.n	8002a82 <UART_SetConfig+0x212>
 80029be:	2302      	movs	r3, #2
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e05e      	b.n	8002a82 <UART_SetConfig+0x212>
 80029c4:	2304      	movs	r3, #4
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e05b      	b.n	8002a82 <UART_SetConfig+0x212>
 80029ca:	2308      	movs	r3, #8
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e058      	b.n	8002a82 <UART_SetConfig+0x212>
 80029d0:	2310      	movs	r3, #16
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e055      	b.n	8002a82 <UART_SetConfig+0x212>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a47      	ldr	r2, [pc, #284]	@ (8002af8 <UART_SetConfig+0x288>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d124      	bne.n	8002a2a <UART_SetConfig+0x1ba>
 80029e0:	4b42      	ldr	r3, [pc, #264]	@ (8002aec <UART_SetConfig+0x27c>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80029e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029ec:	d011      	beq.n	8002a12 <UART_SetConfig+0x1a2>
 80029ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029f2:	d817      	bhi.n	8002a24 <UART_SetConfig+0x1b4>
 80029f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f8:	d011      	beq.n	8002a1e <UART_SetConfig+0x1ae>
 80029fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029fe:	d811      	bhi.n	8002a24 <UART_SetConfig+0x1b4>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <UART_SetConfig+0x19c>
 8002a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a08:	d006      	beq.n	8002a18 <UART_SetConfig+0x1a8>
 8002a0a:	e00b      	b.n	8002a24 <UART_SetConfig+0x1b4>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e037      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a12:	2302      	movs	r3, #2
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e034      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e031      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e02e      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a24:	2310      	movs	r3, #16
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e02b      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a33      	ldr	r2, [pc, #204]	@ (8002afc <UART_SetConfig+0x28c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d124      	bne.n	8002a7e <UART_SetConfig+0x20e>
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <UART_SetConfig+0x27c>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002a3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a40:	d011      	beq.n	8002a66 <UART_SetConfig+0x1f6>
 8002a42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a46:	d817      	bhi.n	8002a78 <UART_SetConfig+0x208>
 8002a48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a4c:	d011      	beq.n	8002a72 <UART_SetConfig+0x202>
 8002a4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a52:	d811      	bhi.n	8002a78 <UART_SetConfig+0x208>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <UART_SetConfig+0x1f0>
 8002a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a5c:	d006      	beq.n	8002a6c <UART_SetConfig+0x1fc>
 8002a5e:	e00b      	b.n	8002a78 <UART_SetConfig+0x208>
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e00d      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a66:	2302      	movs	r3, #2
 8002a68:	77fb      	strb	r3, [r7, #31]
 8002a6a:	e00a      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e007      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a72:	2308      	movs	r3, #8
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e004      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e001      	b.n	8002a82 <UART_SetConfig+0x212>
 8002a7e:	2310      	movs	r3, #16
 8002a80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a8a:	d16b      	bne.n	8002b64 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d838      	bhi.n	8002b04 <UART_SetConfig+0x294>
 8002a92:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <UART_SetConfig+0x228>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002b05 	.word	0x08002b05
 8002aa8:	08002ad3 	.word	0x08002ad3
 8002aac:	08002b05 	.word	0x08002b05
 8002ab0:	08002b05 	.word	0x08002b05
 8002ab4:	08002b05 	.word	0x08002b05
 8002ab8:	08002adb 	.word	0x08002adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7ff fb9e 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002ac0:	61b8      	str	r0, [r7, #24]
        break;
 8002ac2:	e024      	b.n	8002b0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac4:	f7ff fbbc 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002ac8:	61b8      	str	r0, [r7, #24]
        break;
 8002aca:	e020      	b.n	8002b0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <UART_SetConfig+0x290>)
 8002ace:	61bb      	str	r3, [r7, #24]
        break;
 8002ad0:	e01d      	b.n	8002b0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad2:	f7ff fb33 	bl	800213c <HAL_RCC_GetSysClockFreq>
 8002ad6:	61b8      	str	r0, [r7, #24]
        break;
 8002ad8:	e019      	b.n	8002b0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ade:	61bb      	str	r3, [r7, #24]
        break;
 8002ae0:	e015      	b.n	8002b0e <UART_SetConfig+0x29e>
 8002ae2:	bf00      	nop
 8002ae4:	efff69f3 	.word	0xefff69f3
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40004400 	.word	0x40004400
 8002af4:	40004800 	.word	0x40004800
 8002af8:	40004c00 	.word	0x40004c00
 8002afc:	40005000 	.word	0x40005000
 8002b00:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	77bb      	strb	r3, [r7, #30]
        break;
 8002b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d073      	beq.n	8002bfc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	005a      	lsls	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d916      	bls.n	8002b5e <UART_SetConfig+0x2ee>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b36:	d212      	bcs.n	8002b5e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f023 030f 	bic.w	r3, r3, #15
 8002b40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	89fb      	ldrh	r3, [r7, #14]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	89fa      	ldrh	r2, [r7, #14]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	e04e      	b.n	8002bfc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	77bb      	strb	r3, [r7, #30]
 8002b62:	e04b      	b.n	8002bfc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d827      	bhi.n	8002bba <UART_SetConfig+0x34a>
 8002b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b70 <UART_SetConfig+0x300>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002b9d 	.word	0x08002b9d
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bbb 	.word	0x08002bbb
 8002b80:	08002bab 	.word	0x08002bab
 8002b84:	08002bbb 	.word	0x08002bbb
 8002b88:	08002bbb 	.word	0x08002bbb
 8002b8c:	08002bbb 	.word	0x08002bbb
 8002b90:	08002bb3 	.word	0x08002bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7ff fb32 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002b98:	61b8      	str	r0, [r7, #24]
        break;
 8002b9a:	e013      	b.n	8002bc4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b9c:	f7ff fb50 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002ba0:	61b8      	str	r0, [r7, #24]
        break;
 8002ba2:	e00f      	b.n	8002bc4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <UART_SetConfig+0x3a4>)
 8002ba6:	61bb      	str	r3, [r7, #24]
        break;
 8002ba8:	e00c      	b.n	8002bc4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002baa:	f7ff fac7 	bl	800213c <HAL_RCC_GetSysClockFreq>
 8002bae:	61b8      	str	r0, [r7, #24]
        break;
 8002bb0:	e008      	b.n	8002bc4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bb6:	61bb      	str	r3, [r7, #24]
        break;
 8002bb8:	e004      	b.n	8002bc4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8002bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d018      	beq.n	8002bfc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	085a      	lsrs	r2, r3, #1
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d909      	bls.n	8002bf8 <UART_SetConfig+0x388>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bea:	d205      	bcs.n	8002bf8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e001      	b.n	8002bfc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c08:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	007a1200 	.word	0x007a1200

08002c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01a      	beq.n	8002d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d16:	d10a      	bne.n	8002d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b098      	sub	sp, #96	@ 0x60
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d6c:	f7fd fd46 	bl	80007fc <HAL_GetTick>
 8002d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d12e      	bne.n	8002dde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f88c 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e6      	bne.n	8002d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e062      	b.n	8002ea4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d149      	bne.n	8002e80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f856 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03c      	beq.n	8002e80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	623b      	str	r3, [r7, #32]
   return(result);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e6      	bne.n	8002e06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3308      	adds	r3, #8
 8002e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e58:	61fa      	str	r2, [r7, #28]
 8002e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	617b      	str	r3, [r7, #20]
   return(result);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e5      	bne.n	8002e38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e011      	b.n	8002ea4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3758      	adds	r7, #88	@ 0x58
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	e04f      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d04b      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fd fc99 	bl	80007fc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e04e      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d037      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b80      	cmp	r3, #128	@ 0x80
 8002ef2:	d034      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	d031      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d110      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f838 	bl	8002f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e029      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f38:	d111      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f81e 	bl	8002f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e00f      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d0a0      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b095      	sub	sp, #84	@ 0x54
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e6      	bne.n	8002f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e5      	bne.n	8002fc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d118      	bne.n	800302e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	60bb      	str	r3, [r7, #8]
   return(result);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f023 0310 	bic.w	r3, r3, #16
 8003010:	647b      	str	r3, [r7, #68]	@ 0x44
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6979      	ldr	r1, [r7, #20]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	613b      	str	r3, [r7, #16]
   return(result);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e6      	bne.n	8002ffc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003042:	bf00      	nop
 8003044:	3754      	adds	r7, #84	@ 0x54
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <memset>:
 800304e:	4402      	add	r2, r0
 8003050:	4603      	mov	r3, r0
 8003052:	4293      	cmp	r3, r2
 8003054:	d100      	bne.n	8003058 <memset+0xa>
 8003056:	4770      	bx	lr
 8003058:	f803 1b01 	strb.w	r1, [r3], #1
 800305c:	e7f9      	b.n	8003052 <memset+0x4>
	...

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4d0d      	ldr	r5, [pc, #52]	@ (8003098 <__libc_init_array+0x38>)
 8003064:	4c0d      	ldr	r4, [pc, #52]	@ (800309c <__libc_init_array+0x3c>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	2600      	movs	r6, #0
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	4d0b      	ldr	r5, [pc, #44]	@ (80030a0 <__libc_init_array+0x40>)
 8003072:	4c0c      	ldr	r4, [pc, #48]	@ (80030a4 <__libc_init_array+0x44>)
 8003074:	f000 f818 	bl	80030a8 <_init>
 8003078:	1b64      	subs	r4, r4, r5
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	2600      	movs	r6, #0
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	f855 3b04 	ldr.w	r3, [r5], #4
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	0800311c 	.word	0x0800311c
 800309c:	0800311c 	.word	0x0800311c
 80030a0:	0800311c 	.word	0x0800311c
 80030a4:	08003120 	.word	0x08003120

080030a8 <_init>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr

080030b4 <_fini>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr
